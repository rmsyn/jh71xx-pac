<?xml version="1.0" encoding="utf-8"?>
<device schemaVersion="1.3" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD.xsd">
  <name>StarFive VisionFive 2 v1.3B</name>
  <version>0.1</version>
  <description>From StarFive VisionFive 2 v1.3B,model device generator</description>
  <addressUnitBits>8</addressUnitBits>
  <width>32</width>
  <size>32</size>
  <access>read-write</access>
  <peripherals>
    <peripheral>
      <name>clint</name>
      <description>From starfive,jh7110-clint, peripheral generator</description>
      <baseAddress>0x2000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>msip_0</name>
          <description>MSIP Register for hart 0</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>control</name>
              <description></description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msip_1</name>
          <description>MSIP Register for hart 1</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>control</name>
              <description></description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msip_2</name>
          <description>MSIP Register for hart 2</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>control</name>
              <description></description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msip_3</name>
          <description>MSIP Register for hart 3</description>
          <addressOffset>0xC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>control</name>
              <description></description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msip_4</name>
          <description>MSIP Register for hart 4</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>control</name>
              <description></description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mtimecmp_0</name>
          <description>MTIMECMP Register for hart 0</description>
          <addressOffset>0x4000</addressOffset>
          <size>64</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cycles</name>
              <description></description>
              <bitRange>[63:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mtimecmp_1</name>
          <description>MTIMECMP Register for hart 1</description>
          <addressOffset>0x4008</addressOffset>
          <size>64</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cycles</name>
              <description></description>
              <bitRange>[63:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mtimecmp_2</name>
          <description>MTIMECMP Register for hart 2</description>
          <addressOffset>0x4010</addressOffset>
          <size>64</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cycles</name>
              <description></description>
              <bitRange>[63:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mtimecmp_3</name>
          <description>MTIMECMP Register for hart 3</description>
          <addressOffset>0x4018</addressOffset>
          <size>64</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cycles</name>
              <description></description>
              <bitRange>[63:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mtimecmp_4</name>
          <description>MTIMECMP Register for hart 4</description>
          <addressOffset>0x4020</addressOffset>
          <size>64</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cycles</name>
              <description></description>
              <bitRange>[63:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mtime</name>
          <description>MTIME Register</description>
          <addressOffset>0xBFF8</addressOffset>
          <size>64</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cycles</name>
              <description></description>
              <bitRange>[63:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_ccache_0</name>
      <description>From starfive,jh7110-ccache, peripheral generator</description>
      <baseAddress>0x2010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x4000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>sifive_ccache0_0</name>
      <description>From sifive,ccache0, peripheral generator</description>
      <baseAddress>0x2010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x4000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>cache_0</name>
      <description>From cache, peripheral generator</description>
      <baseAddress>0x2010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x4000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>plic</name>
      <description>From starfive,jh7110-plic, peripheral generator</description>
      <baseAddress>0xC000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x4000000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>priority_1</name>
          <description>PRIORITY Register for interrupt id 1</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_2</name>
          <description>PRIORITY Register for interrupt id 2</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_3</name>
          <description>PRIORITY Register for interrupt id 3</description>
          <addressOffset>0xC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_4</name>
          <description>PRIORITY Register for interrupt id 4</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_5</name>
          <description>PRIORITY Register for interrupt id 5</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_6</name>
          <description>PRIORITY Register for interrupt id 6</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_7</name>
          <description>PRIORITY Register for interrupt id 7</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_8</name>
          <description>PRIORITY Register for interrupt id 8</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_9</name>
          <description>PRIORITY Register for interrupt id 9</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_10</name>
          <description>PRIORITY Register for interrupt id 10</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_11</name>
          <description>PRIORITY Register for interrupt id 11</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_12</name>
          <description>PRIORITY Register for interrupt id 12</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_13</name>
          <description>PRIORITY Register for interrupt id 13</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_14</name>
          <description>PRIORITY Register for interrupt id 14</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_15</name>
          <description>PRIORITY Register for interrupt id 15</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_16</name>
          <description>PRIORITY Register for interrupt id 16</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_17</name>
          <description>PRIORITY Register for interrupt id 17</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_18</name>
          <description>PRIORITY Register for interrupt id 18</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_19</name>
          <description>PRIORITY Register for interrupt id 19</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_20</name>
          <description>PRIORITY Register for interrupt id 20</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_21</name>
          <description>PRIORITY Register for interrupt id 21</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_22</name>
          <description>PRIORITY Register for interrupt id 22</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_23</name>
          <description>PRIORITY Register for interrupt id 23</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_24</name>
          <description>PRIORITY Register for interrupt id 24</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_25</name>
          <description>PRIORITY Register for interrupt id 25</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_26</name>
          <description>PRIORITY Register for interrupt id 26</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_27</name>
          <description>PRIORITY Register for interrupt id 27</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_28</name>
          <description>PRIORITY Register for interrupt id 28</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_29</name>
          <description>PRIORITY Register for interrupt id 29</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_30</name>
          <description>PRIORITY Register for interrupt id 30</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_31</name>
          <description>PRIORITY Register for interrupt id 31</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_32</name>
          <description>PRIORITY Register for interrupt id 32</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_33</name>
          <description>PRIORITY Register for interrupt id 33</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_34</name>
          <description>PRIORITY Register for interrupt id 34</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_35</name>
          <description>PRIORITY Register for interrupt id 35</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_36</name>
          <description>PRIORITY Register for interrupt id 36</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_37</name>
          <description>PRIORITY Register for interrupt id 37</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_38</name>
          <description>PRIORITY Register for interrupt id 38</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_39</name>
          <description>PRIORITY Register for interrupt id 39</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_40</name>
          <description>PRIORITY Register for interrupt id 40</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_41</name>
          <description>PRIORITY Register for interrupt id 41</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_42</name>
          <description>PRIORITY Register for interrupt id 42</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_43</name>
          <description>PRIORITY Register for interrupt id 43</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_44</name>
          <description>PRIORITY Register for interrupt id 44</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_45</name>
          <description>PRIORITY Register for interrupt id 45</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_46</name>
          <description>PRIORITY Register for interrupt id 46</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_47</name>
          <description>PRIORITY Register for interrupt id 47</description>
          <addressOffset>0xBC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_48</name>
          <description>PRIORITY Register for interrupt id 48</description>
          <addressOffset>0xC0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_49</name>
          <description>PRIORITY Register for interrupt id 49</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_50</name>
          <description>PRIORITY Register for interrupt id 50</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_51</name>
          <description>PRIORITY Register for interrupt id 51</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_52</name>
          <description>PRIORITY Register for interrupt id 52</description>
          <addressOffset>0xD0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_53</name>
          <description>PRIORITY Register for interrupt id 53</description>
          <addressOffset>0xD4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_54</name>
          <description>PRIORITY Register for interrupt id 54</description>
          <addressOffset>0xD8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_55</name>
          <description>PRIORITY Register for interrupt id 55</description>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_56</name>
          <description>PRIORITY Register for interrupt id 56</description>
          <addressOffset>0xE0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_57</name>
          <description>PRIORITY Register for interrupt id 57</description>
          <addressOffset>0xE4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_58</name>
          <description>PRIORITY Register for interrupt id 58</description>
          <addressOffset>0xE8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_59</name>
          <description>PRIORITY Register for interrupt id 59</description>
          <addressOffset>0xEC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_60</name>
          <description>PRIORITY Register for interrupt id 60</description>
          <addressOffset>0xF0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_61</name>
          <description>PRIORITY Register for interrupt id 61</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_62</name>
          <description>PRIORITY Register for interrupt id 62</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_63</name>
          <description>PRIORITY Register for interrupt id 63</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_64</name>
          <description>PRIORITY Register for interrupt id 64</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_65</name>
          <description>PRIORITY Register for interrupt id 65</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_66</name>
          <description>PRIORITY Register for interrupt id 66</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_67</name>
          <description>PRIORITY Register for interrupt id 67</description>
          <addressOffset>0x10C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_68</name>
          <description>PRIORITY Register for interrupt id 68</description>
          <addressOffset>0x110</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_69</name>
          <description>PRIORITY Register for interrupt id 69</description>
          <addressOffset>0x114</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_70</name>
          <description>PRIORITY Register for interrupt id 70</description>
          <addressOffset>0x118</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_71</name>
          <description>PRIORITY Register for interrupt id 71</description>
          <addressOffset>0x11C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_72</name>
          <description>PRIORITY Register for interrupt id 72</description>
          <addressOffset>0x120</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_73</name>
          <description>PRIORITY Register for interrupt id 73</description>
          <addressOffset>0x124</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_74</name>
          <description>PRIORITY Register for interrupt id 74</description>
          <addressOffset>0x128</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_75</name>
          <description>PRIORITY Register for interrupt id 75</description>
          <addressOffset>0x12C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_76</name>
          <description>PRIORITY Register for interrupt id 76</description>
          <addressOffset>0x130</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_77</name>
          <description>PRIORITY Register for interrupt id 77</description>
          <addressOffset>0x134</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_78</name>
          <description>PRIORITY Register for interrupt id 78</description>
          <addressOffset>0x138</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_79</name>
          <description>PRIORITY Register for interrupt id 79</description>
          <addressOffset>0x13C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_80</name>
          <description>PRIORITY Register for interrupt id 80</description>
          <addressOffset>0x140</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_81</name>
          <description>PRIORITY Register for interrupt id 81</description>
          <addressOffset>0x144</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_82</name>
          <description>PRIORITY Register for interrupt id 82</description>
          <addressOffset>0x148</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_83</name>
          <description>PRIORITY Register for interrupt id 83</description>
          <addressOffset>0x14C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_84</name>
          <description>PRIORITY Register for interrupt id 84</description>
          <addressOffset>0x150</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_85</name>
          <description>PRIORITY Register for interrupt id 85</description>
          <addressOffset>0x154</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_86</name>
          <description>PRIORITY Register for interrupt id 86</description>
          <addressOffset>0x158</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_87</name>
          <description>PRIORITY Register for interrupt id 87</description>
          <addressOffset>0x15C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_88</name>
          <description>PRIORITY Register for interrupt id 88</description>
          <addressOffset>0x160</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_89</name>
          <description>PRIORITY Register for interrupt id 89</description>
          <addressOffset>0x164</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_90</name>
          <description>PRIORITY Register for interrupt id 90</description>
          <addressOffset>0x168</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_91</name>
          <description>PRIORITY Register for interrupt id 91</description>
          <addressOffset>0x16C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_92</name>
          <description>PRIORITY Register for interrupt id 92</description>
          <addressOffset>0x170</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_93</name>
          <description>PRIORITY Register for interrupt id 93</description>
          <addressOffset>0x174</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_94</name>
          <description>PRIORITY Register for interrupt id 94</description>
          <addressOffset>0x178</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_95</name>
          <description>PRIORITY Register for interrupt id 95</description>
          <addressOffset>0x17C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_96</name>
          <description>PRIORITY Register for interrupt id 96</description>
          <addressOffset>0x180</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_97</name>
          <description>PRIORITY Register for interrupt id 97</description>
          <addressOffset>0x184</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_98</name>
          <description>PRIORITY Register for interrupt id 98</description>
          <addressOffset>0x188</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_99</name>
          <description>PRIORITY Register for interrupt id 99</description>
          <addressOffset>0x18C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_100</name>
          <description>PRIORITY Register for interrupt id 100</description>
          <addressOffset>0x190</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_101</name>
          <description>PRIORITY Register for interrupt id 101</description>
          <addressOffset>0x194</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_102</name>
          <description>PRIORITY Register for interrupt id 102</description>
          <addressOffset>0x198</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_103</name>
          <description>PRIORITY Register for interrupt id 103</description>
          <addressOffset>0x19C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_104</name>
          <description>PRIORITY Register for interrupt id 104</description>
          <addressOffset>0x1A0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_105</name>
          <description>PRIORITY Register for interrupt id 105</description>
          <addressOffset>0x1A4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_106</name>
          <description>PRIORITY Register for interrupt id 106</description>
          <addressOffset>0x1A8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_107</name>
          <description>PRIORITY Register for interrupt id 107</description>
          <addressOffset>0x1AC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_108</name>
          <description>PRIORITY Register for interrupt id 108</description>
          <addressOffset>0x1B0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_109</name>
          <description>PRIORITY Register for interrupt id 109</description>
          <addressOffset>0x1B4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_110</name>
          <description>PRIORITY Register for interrupt id 110</description>
          <addressOffset>0x1B8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_111</name>
          <description>PRIORITY Register for interrupt id 111</description>
          <addressOffset>0x1BC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_112</name>
          <description>PRIORITY Register for interrupt id 112</description>
          <addressOffset>0x1C0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_113</name>
          <description>PRIORITY Register for interrupt id 113</description>
          <addressOffset>0x1C4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_114</name>
          <description>PRIORITY Register for interrupt id 114</description>
          <addressOffset>0x1C8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_115</name>
          <description>PRIORITY Register for interrupt id 115</description>
          <addressOffset>0x1CC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_116</name>
          <description>PRIORITY Register for interrupt id 116</description>
          <addressOffset>0x1D0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_117</name>
          <description>PRIORITY Register for interrupt id 117</description>
          <addressOffset>0x1D4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_118</name>
          <description>PRIORITY Register for interrupt id 118</description>
          <addressOffset>0x1D8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_119</name>
          <description>PRIORITY Register for interrupt id 119</description>
          <addressOffset>0x1DC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_120</name>
          <description>PRIORITY Register for interrupt id 120</description>
          <addressOffset>0x1E0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_121</name>
          <description>PRIORITY Register for interrupt id 121</description>
          <addressOffset>0x1E4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_122</name>
          <description>PRIORITY Register for interrupt id 122</description>
          <addressOffset>0x1E8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_123</name>
          <description>PRIORITY Register for interrupt id 123</description>
          <addressOffset>0x1EC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_124</name>
          <description>PRIORITY Register for interrupt id 124</description>
          <addressOffset>0x1F0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_125</name>
          <description>PRIORITY Register for interrupt id 125</description>
          <addressOffset>0x1F4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_126</name>
          <description>PRIORITY Register for interrupt id 126</description>
          <addressOffset>0x1F8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_127</name>
          <description>PRIORITY Register for interrupt id 127</description>
          <addressOffset>0x1FC</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_128</name>
          <description>PRIORITY Register for interrupt id 128</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_129</name>
          <description>PRIORITY Register for interrupt id 129</description>
          <addressOffset>0x204</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_130</name>
          <description>PRIORITY Register for interrupt id 130</description>
          <addressOffset>0x208</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_131</name>
          <description>PRIORITY Register for interrupt id 131</description>
          <addressOffset>0x20C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_132</name>
          <description>PRIORITY Register for interrupt id 132</description>
          <addressOffset>0x210</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_133</name>
          <description>PRIORITY Register for interrupt id 133</description>
          <addressOffset>0x214</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_134</name>
          <description>PRIORITY Register for interrupt id 134</description>
          <addressOffset>0x218</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_135</name>
          <description>PRIORITY Register for interrupt id 135</description>
          <addressOffset>0x21C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>priority_136</name>
          <description>PRIORITY Register for interrupt id 136</description>
          <addressOffset>0x220</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pending_0</name>
          <description>PENDING Register for interrupt ids 31 to 0</description>
          <addressOffset>0x1000</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pending</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pending_1</name>
          <description>PENDING Register for interrupt ids 63 to 32</description>
          <addressOffset>0x1004</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pending</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pending_2</name>
          <description>PENDING Register for interrupt ids 95 to 64</description>
          <addressOffset>0x1008</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pending</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pending_3</name>
          <description>PENDING Register for interrupt ids 127 to 96</description>
          <addressOffset>0x100C</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pending</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pending_4</name>
          <description>PENDING Register for interrupt ids 136 to 128</description>
          <addressOffset>0x1010</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pending</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_0_0</name>
          <description>ENABLE Register for interrupt ids 31 to 0 for hart 0</description>
          <addressOffset>0x2000</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_1_0</name>
          <description>ENABLE Register for interrupt ids 63 to 32 for hart 0</description>
          <addressOffset>0x2004</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_2_0</name>
          <description>ENABLE Register for interrupt ids 95 to 64 for hart 0</description>
          <addressOffset>0x2008</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_3_0</name>
          <description>ENABLE Register for interrupt ids 127 to 96 for hart 0</description>
          <addressOffset>0x200C</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_4_0</name>
          <description>ENABLE Register for interrupt ids 136 to 128 for hart 0</description>
          <addressOffset>0x2010</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_0_1</name>
          <description>ENABLE Register for interrupt ids 31 to 0 for hart 1</description>
          <addressOffset>0x2080</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_1_1</name>
          <description>ENABLE Register for interrupt ids 63 to 32 for hart 1</description>
          <addressOffset>0x2084</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_2_1</name>
          <description>ENABLE Register for interrupt ids 95 to 64 for hart 1</description>
          <addressOffset>0x2088</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_3_1</name>
          <description>ENABLE Register for interrupt ids 127 to 96 for hart 1</description>
          <addressOffset>0x208C</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_4_1</name>
          <description>ENABLE Register for interrupt ids 136 to 128 for hart 1</description>
          <addressOffset>0x2090</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_0_2</name>
          <description>ENABLE Register for interrupt ids 31 to 0 for hart 2</description>
          <addressOffset>0x2100</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_1_2</name>
          <description>ENABLE Register for interrupt ids 63 to 32 for hart 2</description>
          <addressOffset>0x2104</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_2_2</name>
          <description>ENABLE Register for interrupt ids 95 to 64 for hart 2</description>
          <addressOffset>0x2108</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_3_2</name>
          <description>ENABLE Register for interrupt ids 127 to 96 for hart 2</description>
          <addressOffset>0x210C</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_4_2</name>
          <description>ENABLE Register for interrupt ids 136 to 128 for hart 2</description>
          <addressOffset>0x2110</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_0_3</name>
          <description>ENABLE Register for interrupt ids 31 to 0 for hart 3</description>
          <addressOffset>0x2180</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_1_3</name>
          <description>ENABLE Register for interrupt ids 63 to 32 for hart 3</description>
          <addressOffset>0x2184</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_2_3</name>
          <description>ENABLE Register for interrupt ids 95 to 64 for hart 3</description>
          <addressOffset>0x2188</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_3_3</name>
          <description>ENABLE Register for interrupt ids 127 to 96 for hart 3</description>
          <addressOffset>0x218C</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_4_3</name>
          <description>ENABLE Register for interrupt ids 136 to 128 for hart 3</description>
          <addressOffset>0x2190</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_0_4</name>
          <description>ENABLE Register for interrupt ids 31 to 0 for hart 4</description>
          <addressOffset>0x2200</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_1_4</name>
          <description>ENABLE Register for interrupt ids 63 to 32 for hart 4</description>
          <addressOffset>0x2204</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_2_4</name>
          <description>ENABLE Register for interrupt ids 95 to 64 for hart 4</description>
          <addressOffset>0x2208</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_3_4</name>
          <description>ENABLE Register for interrupt ids 127 to 96 for hart 4</description>
          <addressOffset>0x220C</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_4_4</name>
          <description>ENABLE Register for interrupt ids 136 to 128 for hart 4</description>
          <addressOffset>0x2210</addressOffset>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>threshold_0</name>
          <description>PRIORITY THRESHOLD Register for hart 0</description>
          <addressOffset>0x200000</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>claimplete_0</name>
          <description>CLAIM and COMPLETE Register for hart 0</description>
          <addressOffset>0x200004</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>claimplete</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>threshold_1</name>
          <description>PRIORITY THRESHOLD Register for hart 1</description>
          <addressOffset>0x201000</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>claimplete_1</name>
          <description>CLAIM and COMPLETE Register for hart 1</description>
          <addressOffset>0x201004</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>claimplete</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>threshold_2</name>
          <description>PRIORITY THRESHOLD Register for hart 2</description>
          <addressOffset>0x202000</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>claimplete_2</name>
          <description>CLAIM and COMPLETE Register for hart 2</description>
          <addressOffset>0x202004</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>claimplete</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>threshold_3</name>
          <description>PRIORITY THRESHOLD Register for hart 3</description>
          <addressOffset>0x203000</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>claimplete_3</name>
          <description>CLAIM and COMPLETE Register for hart 3</description>
          <addressOffset>0x203004</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>claimplete</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>threshold_4</name>
          <description>PRIORITY THRESHOLD Register for hart 4</description>
          <addressOffset>0x204000</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>priority</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>claimplete_4</name>
          <description>CLAIM and COMPLETE Register for hart 4</description>
          <addressOffset>0x204004</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>claimplete</name>
              <description></description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>uart0</name>
      <description>From snps,dw-apb-uart, peripheral generator</description>
      <baseAddress>0x10000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>uart0</name>
        <value>27</value>
      </interrupt>
      <registers>
        <register>
          <name>rbr</name>
          <description>Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rbr</name>
              <description>Data byte received on the serial input port (sin) in UART mode, or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an over-run error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an over-run error occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>thr</name>
          <description>Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>thr</name>
              <description>Data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] = 0) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dll</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dll</name>
              <description>Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dlh</name>
          <description>Divisor Latch High</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlh</name>
              <description>Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ier</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ptime</name>
              <description>Programmable THRE Interrupt Mode Enable that can be written to only when THRE_MODE_USER == Enabled, always readable. This is used to enable/disable the generation of THRE Interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>edssi</name>
              <description>Enable Modem Status Interrupt. This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>elsi</name>
              <description>Enable Receiver Line Status Interrupt. This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>etbei</name>
              <description>Enable Transmit Holding Register Empty Interrupt. This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>erbfi</name>
              <description>Enable Received Data Available Interrupt. This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 0 = disabled 1 = enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>iir</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>fifose</name>
              <description>FIFOs Enabled. This is used to indicate whether the FIFOs are enabled or disabled. 00 = disabled 11 = enabled</description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>iid</name>
              <description>Interrupt ID. This indicates the highest priority pending interrupt which can be one of the following types: 0000 = modem status 0001 = no interrupt pending 0010 = THR empty 0100 = received data available 0110 = receiver line status 0111 = busy detect 1100 = character timeout The interrupt priorities are split into four levels that are detailed in Table 8 on page 97. Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fcr</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rt</name>
              <description>RCVR Trigger. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>tet</name>
              <description>TX Empty Trigger. Writes have no effect when THRE_MODE_USER == Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>dmam</name>
              <description>DMA Mode. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == No). For details on DMA support, refer to “DMA Support” on page 58. 0 = mode 0 1 = mode 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>xfifor</name>
              <description>XMIT FIFO Reset. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfifor</name>
              <description>RCVR FIFO Reset. This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>fifoe</name>
              <description>FIFO Enable. This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lcr</name>
          <description>Line Control Register</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlab</name>
              <description>Divisor Latch Access Bit. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bc</name>
              <description>Break Control Bit.This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>eps</name>
              <description>Even Parity Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). If set to one, an even number of logic 1s is transmitted or checked. If set to zero, an odd number of logic 1s is transmitted or checked.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pen</name>
              <description>Parity Enable. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 0 = parity disabled 1 = parity enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Number of stop bits. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 0 = 1 stop bit 1 = 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dls</name>
              <description>Data Length Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 00 = 5 bits 01 = 6 bits 10 = 7 bits 11 = 8 bits</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mcr</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sire</name>
              <description>SIR Mode Enable. Writeable only when SIR_MODE == Enabled, always readable. This is used to enable/disable the IrDA SIR Mode features as described in “IrDA 1.0 SIR Protocol” on page 47. 0 = IrDA SIR Mode disabled 1 = IrDA SIR Mode enabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>afce</name>
              <description>Auto Flow Control Enable. Writeable only when AFCE_MODE == Enabled, always readable. When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled as described in “Auto Flow Control” on page 51. 0 = Auto Flow Control Mode disabled 1 = Auto Flow Control Mode enabled</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>lb</name>
              <description>LoopBack Bit. This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out2</name>
              <description>OUT2. This is used to directly control the user-designated Output2 (out2_n) output. The value written to this location is inverted and driven out on out2_n, that is: 0 = out2_n de-asserted (logic 1) 1 = out2_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out2_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out1</name>
              <description>OUT1. This is used to directly control the user-designated Output1 (out1_n) output. The value written to this location is inverted and driven out on out1_n, that is: 0 = out1_n de-asserted (logic 1) 1 = out1_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out1_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rts</name>
              <description>Request to Send. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dtr</name>
              <description>Data Terminal Ready. This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n, that is: 0 = dtr_n de-asserted (logic 1) 1 = dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lsr</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfe</name>
              <description>Receiver FIFO Error bit. This bit is only relevant when FIFO_MODE != NONE AND FIFOs are enabled (FCR[0] set to one). This is used to indicate if there is at least one parity error, framing error, or break indication in the FIFO. 0 = no error in RX FIFO 1 = error in RX FIFO This bit is cleared when the LSR is read and the character with the error is at the top of the receiver FIFO and there are no subsequent errors in the FIFO.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>temt</name>
              <description>Transmitter Empty bit. If in FIFO mode (FIFO_MODE != NONE) and FIFOs enabled (FCR[0] set to one), this bit is set whenever the Transmitter Shift Register and the FIFO are both empty. If in non-FIFO mode or FIFOs are disabled, this bit is set whenever the Transmitter Holding Register and the Transmitter Shift Register are both empty.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre</name>
              <description>Transmit Holding Register Empty bit. If THRE_MODE_USER == Disabled or THRE mode is disabled (IER[7] set to zero) and regardless of FIFO's being implemented/enabled or not, this bit indicates that the THR or TX FIFO is empty. This bit is set whenever data is transferred from the THR or TX FIFO to the transmitter shift register and no new data has been written to the THR or TX FIFO. This also causes a THRE Interrupt to occur, if the THRE Interrupt is enabled. If THRE_MODE_USER == Enabled AND FIFO_MODE != NONE and both modes are active (IER[7] set to one and FCR[0] set to one respectively), the functionality is switched to indicate the transmitter FIFO is full, and no longer controls THRE interrupts, which are then controlled by the FCR[5:4] threshold setting. For more details, see “Programmable THRE Interrupt” on page 54.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bi</name>
              <description>Break Interrupt bit. This is used to indicate the detection of a break sequence on the serial input data. If in UART mode (SIR_MODE == Disabled), it is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. If in infrared mode (SIR_MODE == Enabled), it is set whenever the serial input, sir_in, is continuously pulsed to logic '0' for longer than the sum of start time + data bits + parity + stop bits. A break condition on serial input causes one and only one character, consisting of all zeros, to be received by the UART. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fe</name>
              <description>Framing Error bit. This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no framing error 1 = framing error Reading the LSR clears the FE bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pe</name>
              <description>Parity Error bit. This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no parity error 1 = parity error Reading the LSR clears the PE bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>oe</name>
              <description>Overrun error bit. This is used to indicate the occurrence of an overrun error. This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 0 = no overrun error 1 = overrun error Reading the LSR clears the OE bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dr</name>
              <description>Data Ready bit. This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 0 = no data ready 1 = data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msr</name>
          <description>Line Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dcd</name>
              <description>Data Carrier Detect. This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 0 = dcd_n input is de-asserted (logic 1) 1 = dcd_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DCD is the same as MCR[3] (Out2).</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ri</name>
              <description>Ring Indicator. This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 0 = ri_n input is de-asserted (logic 1) 1 = ri_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), RI is the same as MCR[2] (Out1).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dsr</name>
              <description>Data Set Ready. This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with the DW_apb_uart. 0 = dsr_n input is de-asserted (logic 1) 1 = dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>cts</name>
              <description>Clear to Send. This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with the DW_apb_uart. 0 = cts_n input is de-asserted (logic 1) 1 = cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS)</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddcd</name>
              <description>Delta Data Carrier Detect. This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 0 = no change on dcd_n since last read of MSR 1 = change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. In Loopback Mode (MCR[4] = 1), DDCD reflects changes on MCR[3] (Out2). Note, if the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>teri</name>
              <description>Trailing Edge of Ring Indicator. This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 0 = no change on ri_n since last read of MSR 1 = change on ri_n since last read of MSR Reading the MSR clears the TERI bit. In Loopback Mode (MCR[4] = 1), TERI reflects when MCR[2] (Out1) has changed state from a high to a low.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddsr</name>
              <description>Delta Data Set Ready. This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 0 = no change on dsr_n since last read of MSR 1 = change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR). Note, if the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dcts</name>
              <description>Delta Clear to Send. This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 0 = no change on ctsdsr_n since last read of MSR 1 = change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note, if the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset is removed if the cts_n signal remains asserted.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>scr</name>
          <description>Scratch Pad Register</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>scr</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose in the DW_apb_uart.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdll</name>
          <description>Low Power Divisor Latch Low Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdll</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLL is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdlh</name>
          <description>Low Power Divisor Latch High Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdlh</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLH is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr0</name>
          <description>Shadow Receive Buffer Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr0</name>
          <description>Shadow Transmit Holding Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr1</name>
          <description>Shadow Receive Buffer Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr1</name>
          <description>Shadow Transmit Holding Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr2</name>
          <description>Shadow Receive Buffer Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr2</name>
          <description>Shadow Transmit Holding Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr3</name>
          <description>Shadow Receive Buffer Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr3</name>
          <description>Shadow Transmit Holding Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr4</name>
          <description>Shadow Receive Buffer Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr4</name>
          <description>Shadow Transmit Holding Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr5</name>
          <description>Shadow Receive Buffer Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr5</name>
          <description>Shadow Transmit Holding Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr6</name>
          <description>Shadow Receive Buffer Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr6</name>
          <description>Shadow Transmit Holding Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr7</name>
          <description>Shadow Receive Buffer Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr7</name>
          <description>Shadow Transmit Holding Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr8</name>
          <description>Shadow Receive Buffer Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr8</name>
          <description>Shadow Transmit Holding Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr9</name>
          <description>Shadow Receive Buffer Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr9</name>
          <description>Shadow Transmit Holding Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr10</name>
          <description>Shadow Receive Buffer Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr10</name>
          <description>Shadow Transmit Holding Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr11</name>
          <description>Shadow Receive Buffer Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr11</name>
          <description>Shadow Transmit Holding Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr12</name>
          <description>Shadow Receive Buffer Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr12</name>
          <description>Shadow Transmit Holding Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr13</name>
          <description>Shadow Receive Buffer Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr13</name>
          <description>Shadow Transmit Holding Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr14</name>
          <description>Shadow Receive Buffer Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr14</name>
          <description>Shadow Transmit Holding Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr15</name>
          <description>Shadow Receive Buffer Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr15</name>
          <description>Shadow Transmit Holding Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>far</name>
          <description>FIFO Access Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>far</name>
              <description>Writes have no effect when FIFO_ACCESS == No, always readable. This register is use to enable a FIFO access mode for testing, so that the receive FIFO can be written by the master and the transmit FIFO can be read by the master when FIFOs are implemented and enabled. When FIFOs are not implemented or not enabled it allows the RBR to be written by the master and the THR to be read by the master. 0 = FIFO access mode disabled 1 = FIFO access mode enabled Note, that when the FIFO access mode is enabled/disabled, the control portion of the receive FIFO and transmit FIFO is reset and the FIFOs are treated as empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfr</name>
          <description>Transmit FIFO Read</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfr</name>
              <description>Transmit FIFO Read. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, reading this register gives the data at the top of the transmit FIFO. Each consecutive read pops the transmit FIFO and gives the next data value that is currently at the top of the FIFO. When FIFOs are not implemented or not enabled, reading this register gives the data in the THR.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfw</name>
          <description>Receive FIFO Write</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rffe</name>
              <description>Receive FIFO Framing Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write framing error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write framing error detection information to the RBR.</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfpe</name>
              <description>Receive FIFO Parity Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write parity error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write parity error detection information to the RBR.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfwd</name>
              <description>Receive FIFO Write Data. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, the data that is written to the RFWD is pushed into the receive FIFO. Each consecutive write pushes the new data to the next write location in the receive FIFO. When FIFOs are not implemented or not enabled, the data that is written to the RFWD is pushed into the RBR.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>usr</name>
          <description>UART Status Register</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rff</name>
              <description>Receive FIFO Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO is completely full. 0 = Receive FIFO not full 1 = Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>Receive FIFO Not Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO contains one or more entries. 0 = Receive FIFO is empty 1 = Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO is completely empty. 0 = Transmit FIFO is not empty 1 = Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfnf</name>
              <description>Transmit FIFO Not Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO in not full. 0 = Transmit FIFO is full 1 = Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>busy</name>
              <description>UART Busy. This is indicates that a serial transfer is in progress, when cleared indicates that the DW_apb_uart is idle or inactive. 0 = DW_apb_uart is idle or inactive 1 = DW_apb_uart is busy (actively transferring data) NOTE: It is possible for the UART Busy bit to be cleared even though a new character may have been sent from another device. That is, if the DW_apb_uart has no data in THR and RBR and there is no transmission in progress and a start bit of a new character has just reached the DW_apb_uart. This is due to the fact that a valid start is not seen until the middle of the bit period and this duration is dependent on the baud divisor that has been programmed. If a second system clock has been implemented (CLOCK_MODE == Enabled), the assertion of this bit is also delayed by several cycles of the slower clock.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfl</name>
          <description>Transmit FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfl</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfl</name>
          <description>Receive FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfl</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srr</name>
          <description>Software Reset Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>xfr</name>
              <description>XMIT FIFO Reset. This is a shadow register for the XMIT FIFO Reset bit (FCR[2]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the transmit FIFO. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfr</name>
              <description>RCVR FIFO Reset. This is a shadow register for the RCVR FIFO Reset bit (FCR[1]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the receive FIFO This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>ur</name>
              <description>UART Reset. This asynchronously resets the DW_apb_uart and synchronously removes the reset assertion. For a two clock implementation both pclk and sclk domains are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srts</name>
          <description>Shadow Request to Send: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srts</name>
              <description>Shadow Request to Send. This is a shadow register for the RTS bit (MCR[1]), this can be used to remove the burden of having to performing a read-modify-write on the MCR. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the DW_apb_uart is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] = 0), the rts_n signal is set low by programming MCR[1] (RTS) to a high. In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] = 1) and FIFOs enable (FCR[0] = 1), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). Note that in Loopback mode (MCR[4] = 1), the rts_n output is held inactive-high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sbcr</name>
          <description>Shadow Break Control Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sbcr</name>
              <description>Shadow Break Control Bit. This is a shadow register for the Break bit (LCR[6]), this can be used to remove the burden of having to performing a read modify write on the LCR. This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] = 1) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sdmam</name>
          <description>Shadow DMA Mode: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdmam</name>
              <description>Shadow DMA Mode. This is a shadow register for the DMA mode bit (FCR[3]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the DMA Mode bit gets updated. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == NO). 0 = mode 0 1 = mode 1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sfe</name>
          <description>Shadow FIFO Enable: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sfe</name>
              <description>Shadow FIFO Enable. This is a shadow register for the FIFO enable bit (FCR[0]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the FIFO enable bit gets updated.This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. If this bit is set to zero (disabled) after being enabled then both the XMIT and RCVR controller portion of FIFOs are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srt</name>
          <description>Shadow RCVR Trigger: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srt</name>
              <description>Shadow RCVR Trigger. This is a shadow register for the RCVR trigger bits (FCR[7:6]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the RCVR trigger bit gets updated. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. It also determines when the dma_rx_req_n signal is asserted when DMA Mode (FCR[3]) = 1. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stet</name>
          <description>Shadow TX Empty Trigger: This register is only valid when the DW_apb_uart is configured to have FIFOs implemented (FIFO_MODE != NONE) and THRE interrupt support implemented (THRE_MODE_USER == Enabled) and additional shadow registers implemented (SHADOW == YES). If FIFOs are not implemented or THRE interrupt support is not implemented or shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>stet</name>
              <description>Shadow TX Empty Trigger. This is a shadow register for the TX empty trigger bits (FCR[5:4]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the TX empty trigger bit gets updated. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>htx</name>
          <description>Halt TX</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>htx</name>
              <description>This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 = Halt TX disabled 1 = Halt TX enabled Note, if FIFOs are implemented and not enabled, the setting of the halt TX register has no effect on operation.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dmasa</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dmasa</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition. For example, if the DMA disables the channel, then the DW_apb_uart should clear its request. This causes the TX request, TX single, RX request and RX single signals to de-assert. Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cpr</name>
          <description>Component Parameter Register: This register is only valid when the DW_apb_uart is configured to have the Component Parameter register implemented (UART_ADD_ENCODED_PARAMS == YES). If the Component Parameter register is not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fifo_mode</name>
              <description>0x00 = 0 0x01 = 16 0x02 = 32 to 0x80 = 2048 0x81 - 0xff = reserved</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dma_extra</name>
              <description>0 = false 1 = true</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>uart_add_encoded_params</name>
              <description>0 = false 1 = true</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>shadow</name>
              <description>0 = false 1 = true</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_stat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_access</name>
              <description>0 = false 1 = true</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>additional_feat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_lp_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>afce_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>apb_data_width</name>
              <description>00 = 8 bits 01 = 16 bits 10 = 32 bits 11 = reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ucv</name>
          <description>UART Component Version: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ucv</name>
              <description>ASCII value for each number in the version, followed by *. For example 32_30_31_2A represents the version 2.01*</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ctr</name>
          <description>Component Type Register: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>1146552592</resetValue>
          <fields>
            <field>
              <name>ctr</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>uart1</name>
      <description>From snps,dw-apb-uart, peripheral generator</description>
      <baseAddress>0x10010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>uart1</name>
        <value>28</value>
      </interrupt>
      <registers>
        <register>
          <name>rbr</name>
          <description>Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rbr</name>
              <description>Data byte received on the serial input port (sin) in UART mode, or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an over-run error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an over-run error occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>thr</name>
          <description>Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>thr</name>
              <description>Data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] = 0) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dll</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dll</name>
              <description>Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dlh</name>
          <description>Divisor Latch High</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlh</name>
              <description>Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ier</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ptime</name>
              <description>Programmable THRE Interrupt Mode Enable that can be written to only when THRE_MODE_USER == Enabled, always readable. This is used to enable/disable the generation of THRE Interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>edssi</name>
              <description>Enable Modem Status Interrupt. This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>elsi</name>
              <description>Enable Receiver Line Status Interrupt. This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>etbei</name>
              <description>Enable Transmit Holding Register Empty Interrupt. This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>erbfi</name>
              <description>Enable Received Data Available Interrupt. This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 0 = disabled 1 = enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>iir</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>fifose</name>
              <description>FIFOs Enabled. This is used to indicate whether the FIFOs are enabled or disabled. 00 = disabled 11 = enabled</description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>iid</name>
              <description>Interrupt ID. This indicates the highest priority pending interrupt which can be one of the following types: 0000 = modem status 0001 = no interrupt pending 0010 = THR empty 0100 = received data available 0110 = receiver line status 0111 = busy detect 1100 = character timeout The interrupt priorities are split into four levels that are detailed in Table 8 on page 97. Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fcr</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rt</name>
              <description>RCVR Trigger. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>tet</name>
              <description>TX Empty Trigger. Writes have no effect when THRE_MODE_USER == Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>dmam</name>
              <description>DMA Mode. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == No). For details on DMA support, refer to “DMA Support” on page 58. 0 = mode 0 1 = mode 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>xfifor</name>
              <description>XMIT FIFO Reset. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfifor</name>
              <description>RCVR FIFO Reset. This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>fifoe</name>
              <description>FIFO Enable. This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lcr</name>
          <description>Line Control Register</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlab</name>
              <description>Divisor Latch Access Bit. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bc</name>
              <description>Break Control Bit.This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>eps</name>
              <description>Even Parity Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). If set to one, an even number of logic 1s is transmitted or checked. If set to zero, an odd number of logic 1s is transmitted or checked.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pen</name>
              <description>Parity Enable. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 0 = parity disabled 1 = parity enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Number of stop bits. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 0 = 1 stop bit 1 = 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dls</name>
              <description>Data Length Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 00 = 5 bits 01 = 6 bits 10 = 7 bits 11 = 8 bits</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mcr</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sire</name>
              <description>SIR Mode Enable. Writeable only when SIR_MODE == Enabled, always readable. This is used to enable/disable the IrDA SIR Mode features as described in “IrDA 1.0 SIR Protocol” on page 47. 0 = IrDA SIR Mode disabled 1 = IrDA SIR Mode enabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>afce</name>
              <description>Auto Flow Control Enable. Writeable only when AFCE_MODE == Enabled, always readable. When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled as described in “Auto Flow Control” on page 51. 0 = Auto Flow Control Mode disabled 1 = Auto Flow Control Mode enabled</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>lb</name>
              <description>LoopBack Bit. This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out2</name>
              <description>OUT2. This is used to directly control the user-designated Output2 (out2_n) output. The value written to this location is inverted and driven out on out2_n, that is: 0 = out2_n de-asserted (logic 1) 1 = out2_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out2_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out1</name>
              <description>OUT1. This is used to directly control the user-designated Output1 (out1_n) output. The value written to this location is inverted and driven out on out1_n, that is: 0 = out1_n de-asserted (logic 1) 1 = out1_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out1_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rts</name>
              <description>Request to Send. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dtr</name>
              <description>Data Terminal Ready. This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n, that is: 0 = dtr_n de-asserted (logic 1) 1 = dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lsr</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfe</name>
              <description>Receiver FIFO Error bit. This bit is only relevant when FIFO_MODE != NONE AND FIFOs are enabled (FCR[0] set to one). This is used to indicate if there is at least one parity error, framing error, or break indication in the FIFO. 0 = no error in RX FIFO 1 = error in RX FIFO This bit is cleared when the LSR is read and the character with the error is at the top of the receiver FIFO and there are no subsequent errors in the FIFO.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>temt</name>
              <description>Transmitter Empty bit. If in FIFO mode (FIFO_MODE != NONE) and FIFOs enabled (FCR[0] set to one), this bit is set whenever the Transmitter Shift Register and the FIFO are both empty. If in non-FIFO mode or FIFOs are disabled, this bit is set whenever the Transmitter Holding Register and the Transmitter Shift Register are both empty.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre</name>
              <description>Transmit Holding Register Empty bit. If THRE_MODE_USER == Disabled or THRE mode is disabled (IER[7] set to zero) and regardless of FIFO's being implemented/enabled or not, this bit indicates that the THR or TX FIFO is empty. This bit is set whenever data is transferred from the THR or TX FIFO to the transmitter shift register and no new data has been written to the THR or TX FIFO. This also causes a THRE Interrupt to occur, if the THRE Interrupt is enabled. If THRE_MODE_USER == Enabled AND FIFO_MODE != NONE and both modes are active (IER[7] set to one and FCR[0] set to one respectively), the functionality is switched to indicate the transmitter FIFO is full, and no longer controls THRE interrupts, which are then controlled by the FCR[5:4] threshold setting. For more details, see “Programmable THRE Interrupt” on page 54.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bi</name>
              <description>Break Interrupt bit. This is used to indicate the detection of a break sequence on the serial input data. If in UART mode (SIR_MODE == Disabled), it is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. If in infrared mode (SIR_MODE == Enabled), it is set whenever the serial input, sir_in, is continuously pulsed to logic '0' for longer than the sum of start time + data bits + parity + stop bits. A break condition on serial input causes one and only one character, consisting of all zeros, to be received by the UART. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fe</name>
              <description>Framing Error bit. This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no framing error 1 = framing error Reading the LSR clears the FE bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pe</name>
              <description>Parity Error bit. This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no parity error 1 = parity error Reading the LSR clears the PE bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>oe</name>
              <description>Overrun error bit. This is used to indicate the occurrence of an overrun error. This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 0 = no overrun error 1 = overrun error Reading the LSR clears the OE bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dr</name>
              <description>Data Ready bit. This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 0 = no data ready 1 = data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msr</name>
          <description>Line Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dcd</name>
              <description>Data Carrier Detect. This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 0 = dcd_n input is de-asserted (logic 1) 1 = dcd_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DCD is the same as MCR[3] (Out2).</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ri</name>
              <description>Ring Indicator. This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 0 = ri_n input is de-asserted (logic 1) 1 = ri_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), RI is the same as MCR[2] (Out1).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dsr</name>
              <description>Data Set Ready. This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with the DW_apb_uart. 0 = dsr_n input is de-asserted (logic 1) 1 = dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>cts</name>
              <description>Clear to Send. This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with the DW_apb_uart. 0 = cts_n input is de-asserted (logic 1) 1 = cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS)</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddcd</name>
              <description>Delta Data Carrier Detect. This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 0 = no change on dcd_n since last read of MSR 1 = change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. In Loopback Mode (MCR[4] = 1), DDCD reflects changes on MCR[3] (Out2). Note, if the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>teri</name>
              <description>Trailing Edge of Ring Indicator. This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 0 = no change on ri_n since last read of MSR 1 = change on ri_n since last read of MSR Reading the MSR clears the TERI bit. In Loopback Mode (MCR[4] = 1), TERI reflects when MCR[2] (Out1) has changed state from a high to a low.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddsr</name>
              <description>Delta Data Set Ready. This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 0 = no change on dsr_n since last read of MSR 1 = change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR). Note, if the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dcts</name>
              <description>Delta Clear to Send. This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 0 = no change on ctsdsr_n since last read of MSR 1 = change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note, if the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset is removed if the cts_n signal remains asserted.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>scr</name>
          <description>Scratch Pad Register</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>scr</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose in the DW_apb_uart.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdll</name>
          <description>Low Power Divisor Latch Low Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdll</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLL is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdlh</name>
          <description>Low Power Divisor Latch High Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdlh</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLH is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr0</name>
          <description>Shadow Receive Buffer Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr0</name>
          <description>Shadow Transmit Holding Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr1</name>
          <description>Shadow Receive Buffer Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr1</name>
          <description>Shadow Transmit Holding Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr2</name>
          <description>Shadow Receive Buffer Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr2</name>
          <description>Shadow Transmit Holding Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr3</name>
          <description>Shadow Receive Buffer Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr3</name>
          <description>Shadow Transmit Holding Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr4</name>
          <description>Shadow Receive Buffer Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr4</name>
          <description>Shadow Transmit Holding Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr5</name>
          <description>Shadow Receive Buffer Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr5</name>
          <description>Shadow Transmit Holding Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr6</name>
          <description>Shadow Receive Buffer Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr6</name>
          <description>Shadow Transmit Holding Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr7</name>
          <description>Shadow Receive Buffer Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr7</name>
          <description>Shadow Transmit Holding Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr8</name>
          <description>Shadow Receive Buffer Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr8</name>
          <description>Shadow Transmit Holding Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr9</name>
          <description>Shadow Receive Buffer Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr9</name>
          <description>Shadow Transmit Holding Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr10</name>
          <description>Shadow Receive Buffer Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr10</name>
          <description>Shadow Transmit Holding Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr11</name>
          <description>Shadow Receive Buffer Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr11</name>
          <description>Shadow Transmit Holding Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr12</name>
          <description>Shadow Receive Buffer Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr12</name>
          <description>Shadow Transmit Holding Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr13</name>
          <description>Shadow Receive Buffer Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr13</name>
          <description>Shadow Transmit Holding Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr14</name>
          <description>Shadow Receive Buffer Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr14</name>
          <description>Shadow Transmit Holding Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr15</name>
          <description>Shadow Receive Buffer Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr15</name>
          <description>Shadow Transmit Holding Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>far</name>
          <description>FIFO Access Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>far</name>
              <description>Writes have no effect when FIFO_ACCESS == No, always readable. This register is use to enable a FIFO access mode for testing, so that the receive FIFO can be written by the master and the transmit FIFO can be read by the master when FIFOs are implemented and enabled. When FIFOs are not implemented or not enabled it allows the RBR to be written by the master and the THR to be read by the master. 0 = FIFO access mode disabled 1 = FIFO access mode enabled Note, that when the FIFO access mode is enabled/disabled, the control portion of the receive FIFO and transmit FIFO is reset and the FIFOs are treated as empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfr</name>
          <description>Transmit FIFO Read</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfr</name>
              <description>Transmit FIFO Read. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, reading this register gives the data at the top of the transmit FIFO. Each consecutive read pops the transmit FIFO and gives the next data value that is currently at the top of the FIFO. When FIFOs are not implemented or not enabled, reading this register gives the data in the THR.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfw</name>
          <description>Receive FIFO Write</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rffe</name>
              <description>Receive FIFO Framing Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write framing error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write framing error detection information to the RBR.</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfpe</name>
              <description>Receive FIFO Parity Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write parity error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write parity error detection information to the RBR.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfwd</name>
              <description>Receive FIFO Write Data. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, the data that is written to the RFWD is pushed into the receive FIFO. Each consecutive write pushes the new data to the next write location in the receive FIFO. When FIFOs are not implemented or not enabled, the data that is written to the RFWD is pushed into the RBR.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>usr</name>
          <description>UART Status Register</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rff</name>
              <description>Receive FIFO Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO is completely full. 0 = Receive FIFO not full 1 = Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>Receive FIFO Not Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO contains one or more entries. 0 = Receive FIFO is empty 1 = Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO is completely empty. 0 = Transmit FIFO is not empty 1 = Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfnf</name>
              <description>Transmit FIFO Not Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO in not full. 0 = Transmit FIFO is full 1 = Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>busy</name>
              <description>UART Busy. This is indicates that a serial transfer is in progress, when cleared indicates that the DW_apb_uart is idle or inactive. 0 = DW_apb_uart is idle or inactive 1 = DW_apb_uart is busy (actively transferring data) NOTE: It is possible for the UART Busy bit to be cleared even though a new character may have been sent from another device. That is, if the DW_apb_uart has no data in THR and RBR and there is no transmission in progress and a start bit of a new character has just reached the DW_apb_uart. This is due to the fact that a valid start is not seen until the middle of the bit period and this duration is dependent on the baud divisor that has been programmed. If a second system clock has been implemented (CLOCK_MODE == Enabled), the assertion of this bit is also delayed by several cycles of the slower clock.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfl</name>
          <description>Transmit FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfl</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfl</name>
          <description>Receive FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfl</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srr</name>
          <description>Software Reset Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>xfr</name>
              <description>XMIT FIFO Reset. This is a shadow register for the XMIT FIFO Reset bit (FCR[2]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the transmit FIFO. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfr</name>
              <description>RCVR FIFO Reset. This is a shadow register for the RCVR FIFO Reset bit (FCR[1]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the receive FIFO This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>ur</name>
              <description>UART Reset. This asynchronously resets the DW_apb_uart and synchronously removes the reset assertion. For a two clock implementation both pclk and sclk domains are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srts</name>
          <description>Shadow Request to Send: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srts</name>
              <description>Shadow Request to Send. This is a shadow register for the RTS bit (MCR[1]), this can be used to remove the burden of having to performing a read-modify-write on the MCR. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the DW_apb_uart is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] = 0), the rts_n signal is set low by programming MCR[1] (RTS) to a high. In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] = 1) and FIFOs enable (FCR[0] = 1), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). Note that in Loopback mode (MCR[4] = 1), the rts_n output is held inactive-high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sbcr</name>
          <description>Shadow Break Control Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sbcr</name>
              <description>Shadow Break Control Bit. This is a shadow register for the Break bit (LCR[6]), this can be used to remove the burden of having to performing a read modify write on the LCR. This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] = 1) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sdmam</name>
          <description>Shadow DMA Mode: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdmam</name>
              <description>Shadow DMA Mode. This is a shadow register for the DMA mode bit (FCR[3]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the DMA Mode bit gets updated. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == NO). 0 = mode 0 1 = mode 1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sfe</name>
          <description>Shadow FIFO Enable: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sfe</name>
              <description>Shadow FIFO Enable. This is a shadow register for the FIFO enable bit (FCR[0]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the FIFO enable bit gets updated.This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. If this bit is set to zero (disabled) after being enabled then both the XMIT and RCVR controller portion of FIFOs are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srt</name>
          <description>Shadow RCVR Trigger: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srt</name>
              <description>Shadow RCVR Trigger. This is a shadow register for the RCVR trigger bits (FCR[7:6]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the RCVR trigger bit gets updated. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. It also determines when the dma_rx_req_n signal is asserted when DMA Mode (FCR[3]) = 1. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stet</name>
          <description>Shadow TX Empty Trigger: This register is only valid when the DW_apb_uart is configured to have FIFOs implemented (FIFO_MODE != NONE) and THRE interrupt support implemented (THRE_MODE_USER == Enabled) and additional shadow registers implemented (SHADOW == YES). If FIFOs are not implemented or THRE interrupt support is not implemented or shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>stet</name>
              <description>Shadow TX Empty Trigger. This is a shadow register for the TX empty trigger bits (FCR[5:4]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the TX empty trigger bit gets updated. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>htx</name>
          <description>Halt TX</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>htx</name>
              <description>This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 = Halt TX disabled 1 = Halt TX enabled Note, if FIFOs are implemented and not enabled, the setting of the halt TX register has no effect on operation.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dmasa</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dmasa</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition. For example, if the DMA disables the channel, then the DW_apb_uart should clear its request. This causes the TX request, TX single, RX request and RX single signals to de-assert. Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cpr</name>
          <description>Component Parameter Register: This register is only valid when the DW_apb_uart is configured to have the Component Parameter register implemented (UART_ADD_ENCODED_PARAMS == YES). If the Component Parameter register is not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fifo_mode</name>
              <description>0x00 = 0 0x01 = 16 0x02 = 32 to 0x80 = 2048 0x81 - 0xff = reserved</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dma_extra</name>
              <description>0 = false 1 = true</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>uart_add_encoded_params</name>
              <description>0 = false 1 = true</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>shadow</name>
              <description>0 = false 1 = true</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_stat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_access</name>
              <description>0 = false 1 = true</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>additional_feat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_lp_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>afce_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>apb_data_width</name>
              <description>00 = 8 bits 01 = 16 bits 10 = 32 bits 11 = reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ucv</name>
          <description>UART Component Version: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ucv</name>
              <description>ASCII value for each number in the version, followed by *. For example 32_30_31_2A represents the version 2.01*</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ctr</name>
          <description>Component Type Register: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>1146552592</resetValue>
          <fields>
            <field>
              <name>ctr</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>uart2</name>
      <description>From snps,dw-apb-uart, peripheral generator</description>
      <baseAddress>0x10020000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>uart2</name>
        <value>29</value>
      </interrupt>
      <registers>
        <register>
          <name>rbr</name>
          <description>Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rbr</name>
              <description>Data byte received on the serial input port (sin) in UART mode, or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an over-run error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an over-run error occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>thr</name>
          <description>Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>thr</name>
              <description>Data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] = 0) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dll</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dll</name>
              <description>Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dlh</name>
          <description>Divisor Latch High</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlh</name>
              <description>Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ier</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ptime</name>
              <description>Programmable THRE Interrupt Mode Enable that can be written to only when THRE_MODE_USER == Enabled, always readable. This is used to enable/disable the generation of THRE Interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>edssi</name>
              <description>Enable Modem Status Interrupt. This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>elsi</name>
              <description>Enable Receiver Line Status Interrupt. This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>etbei</name>
              <description>Enable Transmit Holding Register Empty Interrupt. This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>erbfi</name>
              <description>Enable Received Data Available Interrupt. This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 0 = disabled 1 = enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>iir</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>fifose</name>
              <description>FIFOs Enabled. This is used to indicate whether the FIFOs are enabled or disabled. 00 = disabled 11 = enabled</description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>iid</name>
              <description>Interrupt ID. This indicates the highest priority pending interrupt which can be one of the following types: 0000 = modem status 0001 = no interrupt pending 0010 = THR empty 0100 = received data available 0110 = receiver line status 0111 = busy detect 1100 = character timeout The interrupt priorities are split into four levels that are detailed in Table 8 on page 97. Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fcr</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rt</name>
              <description>RCVR Trigger. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>tet</name>
              <description>TX Empty Trigger. Writes have no effect when THRE_MODE_USER == Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>dmam</name>
              <description>DMA Mode. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == No). For details on DMA support, refer to “DMA Support” on page 58. 0 = mode 0 1 = mode 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>xfifor</name>
              <description>XMIT FIFO Reset. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfifor</name>
              <description>RCVR FIFO Reset. This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>fifoe</name>
              <description>FIFO Enable. This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lcr</name>
          <description>Line Control Register</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlab</name>
              <description>Divisor Latch Access Bit. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bc</name>
              <description>Break Control Bit.This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>eps</name>
              <description>Even Parity Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). If set to one, an even number of logic 1s is transmitted or checked. If set to zero, an odd number of logic 1s is transmitted or checked.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pen</name>
              <description>Parity Enable. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 0 = parity disabled 1 = parity enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Number of stop bits. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 0 = 1 stop bit 1 = 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dls</name>
              <description>Data Length Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 00 = 5 bits 01 = 6 bits 10 = 7 bits 11 = 8 bits</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mcr</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sire</name>
              <description>SIR Mode Enable. Writeable only when SIR_MODE == Enabled, always readable. This is used to enable/disable the IrDA SIR Mode features as described in “IrDA 1.0 SIR Protocol” on page 47. 0 = IrDA SIR Mode disabled 1 = IrDA SIR Mode enabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>afce</name>
              <description>Auto Flow Control Enable. Writeable only when AFCE_MODE == Enabled, always readable. When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled as described in “Auto Flow Control” on page 51. 0 = Auto Flow Control Mode disabled 1 = Auto Flow Control Mode enabled</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>lb</name>
              <description>LoopBack Bit. This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out2</name>
              <description>OUT2. This is used to directly control the user-designated Output2 (out2_n) output. The value written to this location is inverted and driven out on out2_n, that is: 0 = out2_n de-asserted (logic 1) 1 = out2_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out2_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out1</name>
              <description>OUT1. This is used to directly control the user-designated Output1 (out1_n) output. The value written to this location is inverted and driven out on out1_n, that is: 0 = out1_n de-asserted (logic 1) 1 = out1_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out1_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rts</name>
              <description>Request to Send. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dtr</name>
              <description>Data Terminal Ready. This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n, that is: 0 = dtr_n de-asserted (logic 1) 1 = dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lsr</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfe</name>
              <description>Receiver FIFO Error bit. This bit is only relevant when FIFO_MODE != NONE AND FIFOs are enabled (FCR[0] set to one). This is used to indicate if there is at least one parity error, framing error, or break indication in the FIFO. 0 = no error in RX FIFO 1 = error in RX FIFO This bit is cleared when the LSR is read and the character with the error is at the top of the receiver FIFO and there are no subsequent errors in the FIFO.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>temt</name>
              <description>Transmitter Empty bit. If in FIFO mode (FIFO_MODE != NONE) and FIFOs enabled (FCR[0] set to one), this bit is set whenever the Transmitter Shift Register and the FIFO are both empty. If in non-FIFO mode or FIFOs are disabled, this bit is set whenever the Transmitter Holding Register and the Transmitter Shift Register are both empty.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre</name>
              <description>Transmit Holding Register Empty bit. If THRE_MODE_USER == Disabled or THRE mode is disabled (IER[7] set to zero) and regardless of FIFO's being implemented/enabled or not, this bit indicates that the THR or TX FIFO is empty. This bit is set whenever data is transferred from the THR or TX FIFO to the transmitter shift register and no new data has been written to the THR or TX FIFO. This also causes a THRE Interrupt to occur, if the THRE Interrupt is enabled. If THRE_MODE_USER == Enabled AND FIFO_MODE != NONE and both modes are active (IER[7] set to one and FCR[0] set to one respectively), the functionality is switched to indicate the transmitter FIFO is full, and no longer controls THRE interrupts, which are then controlled by the FCR[5:4] threshold setting. For more details, see “Programmable THRE Interrupt” on page 54.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bi</name>
              <description>Break Interrupt bit. This is used to indicate the detection of a break sequence on the serial input data. If in UART mode (SIR_MODE == Disabled), it is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. If in infrared mode (SIR_MODE == Enabled), it is set whenever the serial input, sir_in, is continuously pulsed to logic '0' for longer than the sum of start time + data bits + parity + stop bits. A break condition on serial input causes one and only one character, consisting of all zeros, to be received by the UART. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fe</name>
              <description>Framing Error bit. This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no framing error 1 = framing error Reading the LSR clears the FE bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pe</name>
              <description>Parity Error bit. This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no parity error 1 = parity error Reading the LSR clears the PE bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>oe</name>
              <description>Overrun error bit. This is used to indicate the occurrence of an overrun error. This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 0 = no overrun error 1 = overrun error Reading the LSR clears the OE bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dr</name>
              <description>Data Ready bit. This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 0 = no data ready 1 = data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msr</name>
          <description>Line Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dcd</name>
              <description>Data Carrier Detect. This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 0 = dcd_n input is de-asserted (logic 1) 1 = dcd_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DCD is the same as MCR[3] (Out2).</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ri</name>
              <description>Ring Indicator. This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 0 = ri_n input is de-asserted (logic 1) 1 = ri_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), RI is the same as MCR[2] (Out1).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dsr</name>
              <description>Data Set Ready. This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with the DW_apb_uart. 0 = dsr_n input is de-asserted (logic 1) 1 = dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>cts</name>
              <description>Clear to Send. This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with the DW_apb_uart. 0 = cts_n input is de-asserted (logic 1) 1 = cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS)</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddcd</name>
              <description>Delta Data Carrier Detect. This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 0 = no change on dcd_n since last read of MSR 1 = change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. In Loopback Mode (MCR[4] = 1), DDCD reflects changes on MCR[3] (Out2). Note, if the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>teri</name>
              <description>Trailing Edge of Ring Indicator. This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 0 = no change on ri_n since last read of MSR 1 = change on ri_n since last read of MSR Reading the MSR clears the TERI bit. In Loopback Mode (MCR[4] = 1), TERI reflects when MCR[2] (Out1) has changed state from a high to a low.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddsr</name>
              <description>Delta Data Set Ready. This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 0 = no change on dsr_n since last read of MSR 1 = change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR). Note, if the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dcts</name>
              <description>Delta Clear to Send. This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 0 = no change on ctsdsr_n since last read of MSR 1 = change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note, if the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset is removed if the cts_n signal remains asserted.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>scr</name>
          <description>Scratch Pad Register</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>scr</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose in the DW_apb_uart.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdll</name>
          <description>Low Power Divisor Latch Low Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdll</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLL is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdlh</name>
          <description>Low Power Divisor Latch High Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdlh</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLH is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr0</name>
          <description>Shadow Receive Buffer Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr0</name>
          <description>Shadow Transmit Holding Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr1</name>
          <description>Shadow Receive Buffer Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr1</name>
          <description>Shadow Transmit Holding Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr2</name>
          <description>Shadow Receive Buffer Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr2</name>
          <description>Shadow Transmit Holding Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr3</name>
          <description>Shadow Receive Buffer Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr3</name>
          <description>Shadow Transmit Holding Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr4</name>
          <description>Shadow Receive Buffer Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr4</name>
          <description>Shadow Transmit Holding Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr5</name>
          <description>Shadow Receive Buffer Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr5</name>
          <description>Shadow Transmit Holding Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr6</name>
          <description>Shadow Receive Buffer Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr6</name>
          <description>Shadow Transmit Holding Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr7</name>
          <description>Shadow Receive Buffer Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr7</name>
          <description>Shadow Transmit Holding Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr8</name>
          <description>Shadow Receive Buffer Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr8</name>
          <description>Shadow Transmit Holding Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr9</name>
          <description>Shadow Receive Buffer Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr9</name>
          <description>Shadow Transmit Holding Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr10</name>
          <description>Shadow Receive Buffer Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr10</name>
          <description>Shadow Transmit Holding Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr11</name>
          <description>Shadow Receive Buffer Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr11</name>
          <description>Shadow Transmit Holding Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr12</name>
          <description>Shadow Receive Buffer Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr12</name>
          <description>Shadow Transmit Holding Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr13</name>
          <description>Shadow Receive Buffer Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr13</name>
          <description>Shadow Transmit Holding Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr14</name>
          <description>Shadow Receive Buffer Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr14</name>
          <description>Shadow Transmit Holding Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr15</name>
          <description>Shadow Receive Buffer Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr15</name>
          <description>Shadow Transmit Holding Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>far</name>
          <description>FIFO Access Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>far</name>
              <description>Writes have no effect when FIFO_ACCESS == No, always readable. This register is use to enable a FIFO access mode for testing, so that the receive FIFO can be written by the master and the transmit FIFO can be read by the master when FIFOs are implemented and enabled. When FIFOs are not implemented or not enabled it allows the RBR to be written by the master and the THR to be read by the master. 0 = FIFO access mode disabled 1 = FIFO access mode enabled Note, that when the FIFO access mode is enabled/disabled, the control portion of the receive FIFO and transmit FIFO is reset and the FIFOs are treated as empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfr</name>
          <description>Transmit FIFO Read</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfr</name>
              <description>Transmit FIFO Read. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, reading this register gives the data at the top of the transmit FIFO. Each consecutive read pops the transmit FIFO and gives the next data value that is currently at the top of the FIFO. When FIFOs are not implemented or not enabled, reading this register gives the data in the THR.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfw</name>
          <description>Receive FIFO Write</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rffe</name>
              <description>Receive FIFO Framing Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write framing error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write framing error detection information to the RBR.</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfpe</name>
              <description>Receive FIFO Parity Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write parity error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write parity error detection information to the RBR.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfwd</name>
              <description>Receive FIFO Write Data. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, the data that is written to the RFWD is pushed into the receive FIFO. Each consecutive write pushes the new data to the next write location in the receive FIFO. When FIFOs are not implemented or not enabled, the data that is written to the RFWD is pushed into the RBR.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>usr</name>
          <description>UART Status Register</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rff</name>
              <description>Receive FIFO Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO is completely full. 0 = Receive FIFO not full 1 = Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>Receive FIFO Not Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO contains one or more entries. 0 = Receive FIFO is empty 1 = Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO is completely empty. 0 = Transmit FIFO is not empty 1 = Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfnf</name>
              <description>Transmit FIFO Not Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO in not full. 0 = Transmit FIFO is full 1 = Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>busy</name>
              <description>UART Busy. This is indicates that a serial transfer is in progress, when cleared indicates that the DW_apb_uart is idle or inactive. 0 = DW_apb_uart is idle or inactive 1 = DW_apb_uart is busy (actively transferring data) NOTE: It is possible for the UART Busy bit to be cleared even though a new character may have been sent from another device. That is, if the DW_apb_uart has no data in THR and RBR and there is no transmission in progress and a start bit of a new character has just reached the DW_apb_uart. This is due to the fact that a valid start is not seen until the middle of the bit period and this duration is dependent on the baud divisor that has been programmed. If a second system clock has been implemented (CLOCK_MODE == Enabled), the assertion of this bit is also delayed by several cycles of the slower clock.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfl</name>
          <description>Transmit FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfl</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfl</name>
          <description>Receive FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfl</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srr</name>
          <description>Software Reset Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>xfr</name>
              <description>XMIT FIFO Reset. This is a shadow register for the XMIT FIFO Reset bit (FCR[2]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the transmit FIFO. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfr</name>
              <description>RCVR FIFO Reset. This is a shadow register for the RCVR FIFO Reset bit (FCR[1]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the receive FIFO This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>ur</name>
              <description>UART Reset. This asynchronously resets the DW_apb_uart and synchronously removes the reset assertion. For a two clock implementation both pclk and sclk domains are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srts</name>
          <description>Shadow Request to Send: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srts</name>
              <description>Shadow Request to Send. This is a shadow register for the RTS bit (MCR[1]), this can be used to remove the burden of having to performing a read-modify-write on the MCR. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the DW_apb_uart is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] = 0), the rts_n signal is set low by programming MCR[1] (RTS) to a high. In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] = 1) and FIFOs enable (FCR[0] = 1), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). Note that in Loopback mode (MCR[4] = 1), the rts_n output is held inactive-high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sbcr</name>
          <description>Shadow Break Control Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sbcr</name>
              <description>Shadow Break Control Bit. This is a shadow register for the Break bit (LCR[6]), this can be used to remove the burden of having to performing a read modify write on the LCR. This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] = 1) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sdmam</name>
          <description>Shadow DMA Mode: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdmam</name>
              <description>Shadow DMA Mode. This is a shadow register for the DMA mode bit (FCR[3]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the DMA Mode bit gets updated. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == NO). 0 = mode 0 1 = mode 1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sfe</name>
          <description>Shadow FIFO Enable: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sfe</name>
              <description>Shadow FIFO Enable. This is a shadow register for the FIFO enable bit (FCR[0]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the FIFO enable bit gets updated.This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. If this bit is set to zero (disabled) after being enabled then both the XMIT and RCVR controller portion of FIFOs are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srt</name>
          <description>Shadow RCVR Trigger: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srt</name>
              <description>Shadow RCVR Trigger. This is a shadow register for the RCVR trigger bits (FCR[7:6]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the RCVR trigger bit gets updated. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. It also determines when the dma_rx_req_n signal is asserted when DMA Mode (FCR[3]) = 1. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stet</name>
          <description>Shadow TX Empty Trigger: This register is only valid when the DW_apb_uart is configured to have FIFOs implemented (FIFO_MODE != NONE) and THRE interrupt support implemented (THRE_MODE_USER == Enabled) and additional shadow registers implemented (SHADOW == YES). If FIFOs are not implemented or THRE interrupt support is not implemented or shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>stet</name>
              <description>Shadow TX Empty Trigger. This is a shadow register for the TX empty trigger bits (FCR[5:4]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the TX empty trigger bit gets updated. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>htx</name>
          <description>Halt TX</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>htx</name>
              <description>This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 = Halt TX disabled 1 = Halt TX enabled Note, if FIFOs are implemented and not enabled, the setting of the halt TX register has no effect on operation.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dmasa</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dmasa</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition. For example, if the DMA disables the channel, then the DW_apb_uart should clear its request. This causes the TX request, TX single, RX request and RX single signals to de-assert. Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cpr</name>
          <description>Component Parameter Register: This register is only valid when the DW_apb_uart is configured to have the Component Parameter register implemented (UART_ADD_ENCODED_PARAMS == YES). If the Component Parameter register is not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fifo_mode</name>
              <description>0x00 = 0 0x01 = 16 0x02 = 32 to 0x80 = 2048 0x81 - 0xff = reserved</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dma_extra</name>
              <description>0 = false 1 = true</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>uart_add_encoded_params</name>
              <description>0 = false 1 = true</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>shadow</name>
              <description>0 = false 1 = true</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_stat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_access</name>
              <description>0 = false 1 = true</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>additional_feat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_lp_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>afce_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>apb_data_width</name>
              <description>00 = 8 bits 01 = 16 bits 10 = 32 bits 11 = reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ucv</name>
          <description>UART Component Version: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ucv</name>
              <description>ASCII value for each number in the version, followed by *. For example 32_30_31_2A represents the version 2.01*</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ctr</name>
          <description>Component Type Register: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>1146552592</resetValue>
          <fields>
            <field>
              <name>ctr</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>i2c0</name>
      <description>From snps,designware-i2c, peripheral generator</description>
      <baseAddress>0x10030000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>i2c0</name>
        <value>30</value>
      </interrupt>
      <registers>
        <register>
          <name>con</name>
          <description>DesignWare I2C CON</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>master</name>
              <description>I2C Master Connection - 0: Slave, 1: Master</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>speed</name>
              <description>I2C Speed - 01: Standard, 10: Fast, 11: High</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_10bitaddr</name>
              <description>I2C Slave 10-bit Address - 0: False, 1: True</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_10bitaddr</name>
              <description>I2C Master 10-bit Address - 0: False, 1: True</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_en</name>
              <description>I2C Restart Enable - 0: False, 1: True</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_disable</name>
              <description>I2C Slave Disable - 0: False, 1: True</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det_ifaddressed</name>
              <description>I2C Stop DET If Addressed - 0: False, 1: True</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty_ctrl</name>
              <description>I2C TX Empty Control - 0: False, 1: True</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_fifo_full_hld_ctrl</name>
              <description>I2C RX FIFO Full Hold Control - 0: False, 1: True</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bus_clear_ctrl</name>
              <description>I2C Bus Clear Control - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tar</name>
          <description>DesignWare I2C TAR</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Target address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Target address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mode</name>
              <description>Target addressing mode - 0: 7-bit, 1: 10-bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sar</name>
          <description>DesignWare I2C SAR</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Slave address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Slave address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data_cmd</name>
          <description>DesignWare I2C Data Command</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dat</name>
              <description>Data Command Data Byte</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>read</name>
              <description>Data Command READ Bit - 0: Write, 1: Read</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Data Command STOP Bit - 0: Non-terminal DATA command byte, 1: Terminal DATA command byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart</name>
              <description>Data Command RESTART Bit - 0: Do not restart the transfer, 1: Restart the transfer</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>first_data_byte</name>
              <description>Data Command First Data Byte - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_hcnt</name>
          <description>DesignWare I2C SS SCL HCNT</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_hcnt</name>
              <description>ss_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_lcnt</name>
          <description>DesignWare I2C SS SCL LCNT</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_lcnt</name>
              <description>ss_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_hcnt</name>
          <description>DesignWare I2C FS SCL HCNT</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_hcnt</name>
              <description>fs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_lcnt</name>
          <description>DesignWare I2C FS SCL LCNT</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_lcnt</name>
              <description>fs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_hcnt</name>
          <description>DesignWare I2C HS SCL HCNT</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_hcnt</name>
              <description>hs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_lcnt</name>
          <description>DesignWare I2C HS SCL LCNT</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_lcnt</name>
              <description>hs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_stat</name>
          <description>DesignWare I2C Interrupt Status</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_mask</name>
          <description>DesignWare I2C Interrupt Mask</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>raw_intr_stat</name>
          <description>DesignWare I2C Raw Interrupt Status</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_tl</name>
          <description>DesignWare I2C RX TL</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_tl</name>
              <description>rx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_tl</name>
          <description>DesignWare I2C TX TL</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tx_tl</name>
              <description>tx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_intr</name>
          <description>DesignWare I2C Clear Interrrupt</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_under</name>
          <description>DesignWare I2C Clear RX Underrun</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_under</name>
              <description>clr_rx_under</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_over</name>
          <description>DesignWare I2C Clear RX Overrun</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_over</name>
              <description>clr_rx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_over</name>
          <description>DesignWare I2C Clear TX Overrun</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_over</name>
              <description>clr_tx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rd_req</name>
          <description>DesignWare I2C Clear Read Request</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rd_req</name>
              <description>clr_rd_req</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_abrt</name>
          <description>DesignWare I2C Clear TX Abort</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_abrt</name>
              <description>clr_tx_abrt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_done</name>
          <description>DesignWare I2C Clear RX Done</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_done</name>
              <description>clr_rx_done</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_activity</name>
          <description>DesignWare I2C Clear Activity</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_activity</name>
              <description>clr_activity</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_stop_det</name>
          <description>DesignWare I2C Clear Stop DET</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_stop_det</name>
              <description>clr_stop_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_start_det</name>
          <description>DesignWare I2C Clear Start DET</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_start_det</name>
              <description>clr_start_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_gen_call</name>
          <description>DesignWare I2C Clear General Call</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_gen_call</name>
              <description>clr_gen_call</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>DesignWare I2C Enable</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>abort</name>
              <description>abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>DesignWare I2C Status</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>txflr</name>
          <description>DesignWare I2C TX Failure</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>txflr</name>
              <description>txflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rxflr</name>
          <description>DesignWare I2C RX Failure</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxflr</name>
              <description>rxflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sda_hold</name>
          <description>DesignWare I2C SDA Hold</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sda_hold</name>
              <description>sda_hold</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_abrt_source</name>
          <description>DesignWare I2C TX Abort Source</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>b7_addr_noack</name>
              <description>b7_addr_noack</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr1_noack</name>
              <description>b10_addr1_noack</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr2_noack</name>
              <description>b10_addr2_noack</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txdata_noack</name>
              <description>txdata_noack</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_noack</name>
              <description>gcall_noack</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_read</name>
              <description>gcall_read</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_ackdet</name>
              <description>sbyte_ackdet</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_norstrt</name>
              <description>sbyte_norstrt</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_rd_norstrt</name>
              <description>b10_rd_norstrt</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_dis</name>
              <description>master_dis</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>arb_lost</name>
              <description>arb_lost</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_flush_txfifo</name>
              <description>slave_flush_txfifo</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_arblost</name>
              <description>slave_arblost</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_rd_intx</name>
              <description>slave_rd_intx</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_status</name>
          <description>DesignWare I2C Enable Status</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_restart_det</name>
          <description>DesignWare I2C Clear Restart DET</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_restart_det</name>
              <description>clr_restart_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_param_1</name>
          <description>DesignWare I2C Compatibility Parameter 1</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>speed</name>
              <description>Speed mask - 01: Standard, 10: Full, 11: High</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_version</name>
          <description>DesignWare I2C Compatibility Version</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_version</name>
              <description>comp_version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_type</name>
          <description>DesignWare I2C Compatibility Type</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_type</name>
              <description>comp_type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>i2c1</name>
      <description>From snps,designware-i2c, peripheral generator</description>
      <baseAddress>0x10040000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>i2c1</name>
        <value>31</value>
      </interrupt>
      <registers>
        <register>
          <name>con</name>
          <description>DesignWare I2C CON</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>master</name>
              <description>I2C Master Connection - 0: Slave, 1: Master</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>speed</name>
              <description>I2C Speed - 01: Standard, 10: Fast, 11: High</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_10bitaddr</name>
              <description>I2C Slave 10-bit Address - 0: False, 1: True</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_10bitaddr</name>
              <description>I2C Master 10-bit Address - 0: False, 1: True</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_en</name>
              <description>I2C Restart Enable - 0: False, 1: True</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_disable</name>
              <description>I2C Slave Disable - 0: False, 1: True</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det_ifaddressed</name>
              <description>I2C Stop DET If Addressed - 0: False, 1: True</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty_ctrl</name>
              <description>I2C TX Empty Control - 0: False, 1: True</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_fifo_full_hld_ctrl</name>
              <description>I2C RX FIFO Full Hold Control - 0: False, 1: True</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bus_clear_ctrl</name>
              <description>I2C Bus Clear Control - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tar</name>
          <description>DesignWare I2C TAR</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Target address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Target address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mode</name>
              <description>Target addressing mode - 0: 7-bit, 1: 10-bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sar</name>
          <description>DesignWare I2C SAR</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Slave address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Slave address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data_cmd</name>
          <description>DesignWare I2C Data Command</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dat</name>
              <description>Data Command Data Byte</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>read</name>
              <description>Data Command READ Bit - 0: Write, 1: Read</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Data Command STOP Bit - 0: Non-terminal DATA command byte, 1: Terminal DATA command byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart</name>
              <description>Data Command RESTART Bit - 0: Do not restart the transfer, 1: Restart the transfer</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>first_data_byte</name>
              <description>Data Command First Data Byte - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_hcnt</name>
          <description>DesignWare I2C SS SCL HCNT</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_hcnt</name>
              <description>ss_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_lcnt</name>
          <description>DesignWare I2C SS SCL LCNT</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_lcnt</name>
              <description>ss_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_hcnt</name>
          <description>DesignWare I2C FS SCL HCNT</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_hcnt</name>
              <description>fs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_lcnt</name>
          <description>DesignWare I2C FS SCL LCNT</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_lcnt</name>
              <description>fs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_hcnt</name>
          <description>DesignWare I2C HS SCL HCNT</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_hcnt</name>
              <description>hs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_lcnt</name>
          <description>DesignWare I2C HS SCL LCNT</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_lcnt</name>
              <description>hs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_stat</name>
          <description>DesignWare I2C Interrupt Status</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_mask</name>
          <description>DesignWare I2C Interrupt Mask</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>raw_intr_stat</name>
          <description>DesignWare I2C Raw Interrupt Status</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_tl</name>
          <description>DesignWare I2C RX TL</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_tl</name>
              <description>rx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_tl</name>
          <description>DesignWare I2C TX TL</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tx_tl</name>
              <description>tx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_intr</name>
          <description>DesignWare I2C Clear Interrrupt</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_under</name>
          <description>DesignWare I2C Clear RX Underrun</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_under</name>
              <description>clr_rx_under</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_over</name>
          <description>DesignWare I2C Clear RX Overrun</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_over</name>
              <description>clr_rx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_over</name>
          <description>DesignWare I2C Clear TX Overrun</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_over</name>
              <description>clr_tx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rd_req</name>
          <description>DesignWare I2C Clear Read Request</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rd_req</name>
              <description>clr_rd_req</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_abrt</name>
          <description>DesignWare I2C Clear TX Abort</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_abrt</name>
              <description>clr_tx_abrt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_done</name>
          <description>DesignWare I2C Clear RX Done</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_done</name>
              <description>clr_rx_done</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_activity</name>
          <description>DesignWare I2C Clear Activity</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_activity</name>
              <description>clr_activity</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_stop_det</name>
          <description>DesignWare I2C Clear Stop DET</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_stop_det</name>
              <description>clr_stop_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_start_det</name>
          <description>DesignWare I2C Clear Start DET</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_start_det</name>
              <description>clr_start_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_gen_call</name>
          <description>DesignWare I2C Clear General Call</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_gen_call</name>
              <description>clr_gen_call</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>DesignWare I2C Enable</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>abort</name>
              <description>abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>DesignWare I2C Status</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>txflr</name>
          <description>DesignWare I2C TX Failure</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>txflr</name>
              <description>txflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rxflr</name>
          <description>DesignWare I2C RX Failure</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxflr</name>
              <description>rxflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sda_hold</name>
          <description>DesignWare I2C SDA Hold</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sda_hold</name>
              <description>sda_hold</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_abrt_source</name>
          <description>DesignWare I2C TX Abort Source</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>b7_addr_noack</name>
              <description>b7_addr_noack</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr1_noack</name>
              <description>b10_addr1_noack</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr2_noack</name>
              <description>b10_addr2_noack</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txdata_noack</name>
              <description>txdata_noack</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_noack</name>
              <description>gcall_noack</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_read</name>
              <description>gcall_read</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_ackdet</name>
              <description>sbyte_ackdet</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_norstrt</name>
              <description>sbyte_norstrt</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_rd_norstrt</name>
              <description>b10_rd_norstrt</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_dis</name>
              <description>master_dis</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>arb_lost</name>
              <description>arb_lost</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_flush_txfifo</name>
              <description>slave_flush_txfifo</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_arblost</name>
              <description>slave_arblost</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_rd_intx</name>
              <description>slave_rd_intx</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_status</name>
          <description>DesignWare I2C Enable Status</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_restart_det</name>
          <description>DesignWare I2C Clear Restart DET</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_restart_det</name>
              <description>clr_restart_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_param_1</name>
          <description>DesignWare I2C Compatibility Parameter 1</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>speed</name>
              <description>Speed mask - 01: Standard, 10: Full, 11: High</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_version</name>
          <description>DesignWare I2C Compatibility Version</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_version</name>
              <description>comp_version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_type</name>
          <description>DesignWare I2C Compatibility Type</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_type</name>
              <description>comp_type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>i2c2</name>
      <description>From snps,designware-i2c, peripheral generator</description>
      <baseAddress>0x10050000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>i2c2</name>
        <value>32</value>
      </interrupt>
      <registers>
        <register>
          <name>con</name>
          <description>DesignWare I2C CON</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>master</name>
              <description>I2C Master Connection - 0: Slave, 1: Master</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>speed</name>
              <description>I2C Speed - 01: Standard, 10: Fast, 11: High</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_10bitaddr</name>
              <description>I2C Slave 10-bit Address - 0: False, 1: True</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_10bitaddr</name>
              <description>I2C Master 10-bit Address - 0: False, 1: True</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_en</name>
              <description>I2C Restart Enable - 0: False, 1: True</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_disable</name>
              <description>I2C Slave Disable - 0: False, 1: True</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det_ifaddressed</name>
              <description>I2C Stop DET If Addressed - 0: False, 1: True</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty_ctrl</name>
              <description>I2C TX Empty Control - 0: False, 1: True</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_fifo_full_hld_ctrl</name>
              <description>I2C RX FIFO Full Hold Control - 0: False, 1: True</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bus_clear_ctrl</name>
              <description>I2C Bus Clear Control - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tar</name>
          <description>DesignWare I2C TAR</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Target address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Target address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mode</name>
              <description>Target addressing mode - 0: 7-bit, 1: 10-bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sar</name>
          <description>DesignWare I2C SAR</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Slave address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Slave address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data_cmd</name>
          <description>DesignWare I2C Data Command</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dat</name>
              <description>Data Command Data Byte</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>read</name>
              <description>Data Command READ Bit - 0: Write, 1: Read</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Data Command STOP Bit - 0: Non-terminal DATA command byte, 1: Terminal DATA command byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart</name>
              <description>Data Command RESTART Bit - 0: Do not restart the transfer, 1: Restart the transfer</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>first_data_byte</name>
              <description>Data Command First Data Byte - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_hcnt</name>
          <description>DesignWare I2C SS SCL HCNT</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_hcnt</name>
              <description>ss_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_lcnt</name>
          <description>DesignWare I2C SS SCL LCNT</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_lcnt</name>
              <description>ss_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_hcnt</name>
          <description>DesignWare I2C FS SCL HCNT</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_hcnt</name>
              <description>fs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_lcnt</name>
          <description>DesignWare I2C FS SCL LCNT</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_lcnt</name>
              <description>fs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_hcnt</name>
          <description>DesignWare I2C HS SCL HCNT</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_hcnt</name>
              <description>hs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_lcnt</name>
          <description>DesignWare I2C HS SCL LCNT</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_lcnt</name>
              <description>hs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_stat</name>
          <description>DesignWare I2C Interrupt Status</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_mask</name>
          <description>DesignWare I2C Interrupt Mask</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>raw_intr_stat</name>
          <description>DesignWare I2C Raw Interrupt Status</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_tl</name>
          <description>DesignWare I2C RX TL</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_tl</name>
              <description>rx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_tl</name>
          <description>DesignWare I2C TX TL</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tx_tl</name>
              <description>tx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_intr</name>
          <description>DesignWare I2C Clear Interrrupt</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_under</name>
          <description>DesignWare I2C Clear RX Underrun</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_under</name>
              <description>clr_rx_under</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_over</name>
          <description>DesignWare I2C Clear RX Overrun</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_over</name>
              <description>clr_rx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_over</name>
          <description>DesignWare I2C Clear TX Overrun</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_over</name>
              <description>clr_tx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rd_req</name>
          <description>DesignWare I2C Clear Read Request</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rd_req</name>
              <description>clr_rd_req</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_abrt</name>
          <description>DesignWare I2C Clear TX Abort</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_abrt</name>
              <description>clr_tx_abrt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_done</name>
          <description>DesignWare I2C Clear RX Done</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_done</name>
              <description>clr_rx_done</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_activity</name>
          <description>DesignWare I2C Clear Activity</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_activity</name>
              <description>clr_activity</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_stop_det</name>
          <description>DesignWare I2C Clear Stop DET</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_stop_det</name>
              <description>clr_stop_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_start_det</name>
          <description>DesignWare I2C Clear Start DET</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_start_det</name>
              <description>clr_start_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_gen_call</name>
          <description>DesignWare I2C Clear General Call</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_gen_call</name>
              <description>clr_gen_call</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>DesignWare I2C Enable</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>abort</name>
              <description>abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>DesignWare I2C Status</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>txflr</name>
          <description>DesignWare I2C TX Failure</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>txflr</name>
              <description>txflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rxflr</name>
          <description>DesignWare I2C RX Failure</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxflr</name>
              <description>rxflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sda_hold</name>
          <description>DesignWare I2C SDA Hold</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sda_hold</name>
              <description>sda_hold</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_abrt_source</name>
          <description>DesignWare I2C TX Abort Source</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>b7_addr_noack</name>
              <description>b7_addr_noack</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr1_noack</name>
              <description>b10_addr1_noack</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr2_noack</name>
              <description>b10_addr2_noack</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txdata_noack</name>
              <description>txdata_noack</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_noack</name>
              <description>gcall_noack</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_read</name>
              <description>gcall_read</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_ackdet</name>
              <description>sbyte_ackdet</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_norstrt</name>
              <description>sbyte_norstrt</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_rd_norstrt</name>
              <description>b10_rd_norstrt</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_dis</name>
              <description>master_dis</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>arb_lost</name>
              <description>arb_lost</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_flush_txfifo</name>
              <description>slave_flush_txfifo</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_arblost</name>
              <description>slave_arblost</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_rd_intx</name>
              <description>slave_rd_intx</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_status</name>
          <description>DesignWare I2C Enable Status</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_restart_det</name>
          <description>DesignWare I2C Clear Restart DET</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_restart_det</name>
              <description>clr_restart_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_param_1</name>
          <description>DesignWare I2C Compatibility Parameter 1</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>speed</name>
              <description>Speed mask - 01: Standard, 10: Full, 11: High</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_version</name>
          <description>DesignWare I2C Compatibility Version</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_version</name>
              <description>comp_version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_type</name>
          <description>DesignWare I2C Compatibility Type</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_type</name>
              <description>comp_type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>spi0</name>
      <description>From arm,pl022, peripheral generator</description>
      <baseAddress>0x10060000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>spi0</name>
        <value>33</value>
      </interrupt>
      <registers>
        <register>
          <name>ssp_cr0</name>
          <description>SSPCR0 is control register 0 and contains five bit fields that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dss</name>
              <description>Data Size Select - 0000, 0001, 0010: Reserved, 0011: 4-bit data, 0100: 5-bit data, 6-bit data, 0110: 7-bit data, 0111: 8-bit data, 1000: 9-bit data, 1001: 10-bit data, 1010: 11-bit data, 1011: 12-bit data, 1100: 13-bit data, 1101: 14-bit data, 1110: 15-bit data, 1111: 16-bit data</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>frf</name>
              <description>Frame format - 00: Motorola SPI frame format, 01: TI synchronous serial frame format, 10: National Microwire frame format, 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spo</name>
              <description>SSPCLKOUT polarity, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sph</name>
              <description>SSPCLKOUT phase, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scr</name>
              <description>Serial clock rate. The value SCR is used to generate the transmit and receive bit rate of the PrimeCell SSP. The bit rate is: (F[sspclk] / (CPSDVR * (1 + SCR))), where CPSDVSR is an even value from [2:254], programmed through the SSPCPSR register and SCR is a value from [0:255]</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cr1</name>
          <description>SSPCR1 is the control register 1 and contains four different bit fields, that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lbm</name>
              <description>Loop back mode - 0: Normal serial port operation enabled, 1: Output of transmit serial shifter is connected to input of receive serial shifter internally</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sse</name>
              <description>Synchronous serial port enable - 0: SSP operation disabled, 1: SSP operation enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ms</name>
              <description>Master or slave mode select. This bit can be modified only when the PrimeCell SSP is disabled, SSE=0 - 0: Device configured as master (default), 1: Device configured as slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sod</name>
              <description>Slave-mode output disable. This bit is relevant only in the slave mode, MS=1. In multiple-slave systems, it is possible for an PrimeCell SSP master to broadcast a message to all slaves in the system while ensuring that only one slave drives data onto its serial output line. In such systems the RXD lines from multiple slaves could be tied together. To operate in such systems, the SOD bit can be set if the PrimeCell SSP slave is not supposed to drive the SSPTXD line - 0: SSP can drive the SSPTXD output in slave mode, 1: SSP must not drive the SSPTXD output in slave mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dr</name>
          <description>SSPDR is the data register and is 16-bits wide. When SSPDR is read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the PrimeCell SSP receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When SSPDR is written to, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the SSPTXD pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.</description>
          <addressOffset>0x8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>data</name>
              <description>Transmit/Receive FIFO - Read: Receive FIFO, Write: Transmit FIFO. You must right-justify data when the PrimeCell SSP is programmed for a data size that is less than 16 bits. Unused bits at the top are ignored by transmit logic. The receive logic automatically right-justifies.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_sr</name>
          <description>SSPSR is a RO status register that contains bits that indicate the FIFO fill status and the PrimeCell SSP busy status.</description>
          <addressOffset>0xc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO empty, RO - 0: Transmit FIFO is not empty, 1: Transmit FIFO is empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tnf</name>
              <description>Transmit FIFO not full, RO - 0: Transmit FIFO is full, 1: Transmit FIFO is not full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rne</name>
              <description>Receive FIFO not empty, RO - 0: Receive FIFO is empty, 1: Receive FIFO is not empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rff</name>
              <description>Receive FIFO full, RO - 0: Receive FIFO is not full, 1: Receive FIFO is full.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bsy</name>
              <description>PrimeCell SSP busy flag, RO - 0: SSP is idle, 1: SSP is currently transmitting and/or receiving a frame or the transmit FIFO is not empty.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cpsr</name>
          <description>SSPCPSR is the clock prescale register and specifies the division factor by which the input SSPCLK must be internally divided before further use. The value programmed into this register must be an even number between [2:254]. The least significant bit of the programmed number is hard-coded to zero. If an odd number is written to this register, data read back from this register has the least significant bit as zero.</description>
          <addressOffset>0x10</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cpsdvsr</name>
              <description>Clock prescale divisor. Must be an even number from 2-254, depending on the frequency of SSPCLK. The least significant bit always returns zero on reads.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_imsc</name>
          <description>The SSPIMSC register is the interrupt mask set or clear register. It is a RW register. On a read this register gives the current value of the mask on the relevant interrupt. A write of 1 to the particular bit sets the mask, enabling the interrupt to be read. A write of 0 clears the corresponding mask. All the bits are cleared to 0 when reset.</description>
          <addressOffset>0x14</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorim</name>
              <description>Receive overrun interrupt mask - 0: Receive FIFO written to while full condition interrupt is masked, 1: Receive FIFO written to while full condition interrupt is not masked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtim</name>
              <description>Receive timeout interrupt mask - 0: Receive FIFO not empty and no read prior to timeout period interrupt is masked, 1: Receive FIFO not empty and no read prior to timeout period interrupt is not masked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxim</name>
              <description>Receive FIFO interrupt mask - 0: Receive FIFO half full or less condition interrupt is masked, 1: Receive FIFO half full or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txim</name>
              <description>Transmit FIFO interrupt mask - 0: Transmit FIFO half empty or less condition interrupt is masked, 1: Transmit FIFO half empty or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_ris</name>
          <description>The SSPRIS register is the raw interrupt status register. It is a RO register. On a read this register gives the current raw status value of the corresponding interrupt prior to masking. A write has no effect.</description>
          <addressOffset>0x18</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_mis</name>
          <description>The SSPMIS register is the masked interrupt status register. It is a RO register. On a read this register gives the current masked status value of the corresponding interrupt. A write has no effect.</description>
          <addressOffset>0x1c</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rormis</name>
              <description>Gives the receive over run masked interrupt status, after masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtmis</name>
              <description>Gives the receive timeout masked interrupt state, after masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxmis</name>
              <description>Gives the receive FIFO masked interrupt state, after masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txmis</name>
              <description>Gives the transmit FIFO masked interrupt state, after masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_icr</name>
          <description>The SSPICR register is the interrupt clear register and is write-only. On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.</description>
          <addressOffset>0x20</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>roric</name>
              <description>Clears the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtic</name>
              <description>Clears the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dmacr</name>
          <description>The SSPDMACR register is the DMA control register. It is a RW register. All the bits are cleared to 0 on reset.</description>
          <addressOffset>0x24</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxdmae</name>
              <description>Receive DMA Enable. If this bit is set to 1, DMA for the receive FIFO is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txdmae</name>
              <description>Transmit DMA Enable. If this bit is set to 1, DMA for the transmit FIFO is enabled.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id0</name>
          <description>The SSPPeriphID0 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number0</name>
              <description>These bits read back as 0x22</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id1</name>
          <description>The SSPPeriphID1 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number1</name>
              <description>These bits read back as 0x0</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>designer0</name>
              <description>These bits read back as 0x1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id2</name>
          <description>The SSPPeriphID2 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>designer1</name>
              <description>These bits read back as 0x4</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>revision</name>
              <description>These bits return the peripheral revision</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id3</name>
          <description>The SSPPeriphID3 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfec</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>configuration</name>
              <description>These bits read back as 0x80</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id0</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id0</name>
              <description>The bits are read as 0xD</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id1</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id1</name>
              <description>The bits are read as 0xF0</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id2</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id2</name>
              <description>The bits are read as 0x5</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id3</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xffc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id3</name>
              <description>The bits are read as 0xB1</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>arm_primecell_0</name>
      <description>From arm,primecell, peripheral generator</description>
      <baseAddress>0x10060000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>rohm_dh2228fv_0</name>
      <description>From rohm,dh2228fv, peripheral generator</description>
      <baseAddress>0x0</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x0</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>spi1</name>
      <description>From arm,pl022, peripheral generator</description>
      <baseAddress>0x10070000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>spi1</name>
        <value>34</value>
      </interrupt>
      <registers>
        <register>
          <name>ssp_cr0</name>
          <description>SSPCR0 is control register 0 and contains five bit fields that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dss</name>
              <description>Data Size Select - 0000, 0001, 0010: Reserved, 0011: 4-bit data, 0100: 5-bit data, 6-bit data, 0110: 7-bit data, 0111: 8-bit data, 1000: 9-bit data, 1001: 10-bit data, 1010: 11-bit data, 1011: 12-bit data, 1100: 13-bit data, 1101: 14-bit data, 1110: 15-bit data, 1111: 16-bit data</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>frf</name>
              <description>Frame format - 00: Motorola SPI frame format, 01: TI synchronous serial frame format, 10: National Microwire frame format, 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spo</name>
              <description>SSPCLKOUT polarity, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sph</name>
              <description>SSPCLKOUT phase, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scr</name>
              <description>Serial clock rate. The value SCR is used to generate the transmit and receive bit rate of the PrimeCell SSP. The bit rate is: (F[sspclk] / (CPSDVR * (1 + SCR))), where CPSDVSR is an even value from [2:254], programmed through the SSPCPSR register and SCR is a value from [0:255]</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cr1</name>
          <description>SSPCR1 is the control register 1 and contains four different bit fields, that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lbm</name>
              <description>Loop back mode - 0: Normal serial port operation enabled, 1: Output of transmit serial shifter is connected to input of receive serial shifter internally</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sse</name>
              <description>Synchronous serial port enable - 0: SSP operation disabled, 1: SSP operation enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ms</name>
              <description>Master or slave mode select. This bit can be modified only when the PrimeCell SSP is disabled, SSE=0 - 0: Device configured as master (default), 1: Device configured as slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sod</name>
              <description>Slave-mode output disable. This bit is relevant only in the slave mode, MS=1. In multiple-slave systems, it is possible for an PrimeCell SSP master to broadcast a message to all slaves in the system while ensuring that only one slave drives data onto its serial output line. In such systems the RXD lines from multiple slaves could be tied together. To operate in such systems, the SOD bit can be set if the PrimeCell SSP slave is not supposed to drive the SSPTXD line - 0: SSP can drive the SSPTXD output in slave mode, 1: SSP must not drive the SSPTXD output in slave mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dr</name>
          <description>SSPDR is the data register and is 16-bits wide. When SSPDR is read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the PrimeCell SSP receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When SSPDR is written to, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the SSPTXD pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.</description>
          <addressOffset>0x8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>data</name>
              <description>Transmit/Receive FIFO - Read: Receive FIFO, Write: Transmit FIFO. You must right-justify data when the PrimeCell SSP is programmed for a data size that is less than 16 bits. Unused bits at the top are ignored by transmit logic. The receive logic automatically right-justifies.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_sr</name>
          <description>SSPSR is a RO status register that contains bits that indicate the FIFO fill status and the PrimeCell SSP busy status.</description>
          <addressOffset>0xc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO empty, RO - 0: Transmit FIFO is not empty, 1: Transmit FIFO is empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tnf</name>
              <description>Transmit FIFO not full, RO - 0: Transmit FIFO is full, 1: Transmit FIFO is not full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rne</name>
              <description>Receive FIFO not empty, RO - 0: Receive FIFO is empty, 1: Receive FIFO is not empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rff</name>
              <description>Receive FIFO full, RO - 0: Receive FIFO is not full, 1: Receive FIFO is full.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bsy</name>
              <description>PrimeCell SSP busy flag, RO - 0: SSP is idle, 1: SSP is currently transmitting and/or receiving a frame or the transmit FIFO is not empty.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cpsr</name>
          <description>SSPCPSR is the clock prescale register and specifies the division factor by which the input SSPCLK must be internally divided before further use. The value programmed into this register must be an even number between [2:254]. The least significant bit of the programmed number is hard-coded to zero. If an odd number is written to this register, data read back from this register has the least significant bit as zero.</description>
          <addressOffset>0x10</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cpsdvsr</name>
              <description>Clock prescale divisor. Must be an even number from 2-254, depending on the frequency of SSPCLK. The least significant bit always returns zero on reads.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_imsc</name>
          <description>The SSPIMSC register is the interrupt mask set or clear register. It is a RW register. On a read this register gives the current value of the mask on the relevant interrupt. A write of 1 to the particular bit sets the mask, enabling the interrupt to be read. A write of 0 clears the corresponding mask. All the bits are cleared to 0 when reset.</description>
          <addressOffset>0x14</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorim</name>
              <description>Receive overrun interrupt mask - 0: Receive FIFO written to while full condition interrupt is masked, 1: Receive FIFO written to while full condition interrupt is not masked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtim</name>
              <description>Receive timeout interrupt mask - 0: Receive FIFO not empty and no read prior to timeout period interrupt is masked, 1: Receive FIFO not empty and no read prior to timeout period interrupt is not masked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxim</name>
              <description>Receive FIFO interrupt mask - 0: Receive FIFO half full or less condition interrupt is masked, 1: Receive FIFO half full or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txim</name>
              <description>Transmit FIFO interrupt mask - 0: Transmit FIFO half empty or less condition interrupt is masked, 1: Transmit FIFO half empty or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_ris</name>
          <description>The SSPRIS register is the raw interrupt status register. It is a RO register. On a read this register gives the current raw status value of the corresponding interrupt prior to masking. A write has no effect.</description>
          <addressOffset>0x18</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_mis</name>
          <description>The SSPMIS register is the masked interrupt status register. It is a RO register. On a read this register gives the current masked status value of the corresponding interrupt. A write has no effect.</description>
          <addressOffset>0x1c</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rormis</name>
              <description>Gives the receive over run masked interrupt status, after masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtmis</name>
              <description>Gives the receive timeout masked interrupt state, after masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxmis</name>
              <description>Gives the receive FIFO masked interrupt state, after masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txmis</name>
              <description>Gives the transmit FIFO masked interrupt state, after masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_icr</name>
          <description>The SSPICR register is the interrupt clear register and is write-only. On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.</description>
          <addressOffset>0x20</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>roric</name>
              <description>Clears the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtic</name>
              <description>Clears the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dmacr</name>
          <description>The SSPDMACR register is the DMA control register. It is a RW register. All the bits are cleared to 0 on reset.</description>
          <addressOffset>0x24</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxdmae</name>
              <description>Receive DMA Enable. If this bit is set to 1, DMA for the receive FIFO is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txdmae</name>
              <description>Transmit DMA Enable. If this bit is set to 1, DMA for the transmit FIFO is enabled.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id0</name>
          <description>The SSPPeriphID0 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number0</name>
              <description>These bits read back as 0x22</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id1</name>
          <description>The SSPPeriphID1 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number1</name>
              <description>These bits read back as 0x0</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>designer0</name>
              <description>These bits read back as 0x1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id2</name>
          <description>The SSPPeriphID2 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>designer1</name>
              <description>These bits read back as 0x4</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>revision</name>
              <description>These bits return the peripheral revision</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id3</name>
          <description>The SSPPeriphID3 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfec</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>configuration</name>
              <description>These bits read back as 0x80</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id0</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id0</name>
              <description>The bits are read as 0xD</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id1</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id1</name>
              <description>The bits are read as 0xF0</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id2</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id2</name>
              <description>The bits are read as 0x5</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id3</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xffc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id3</name>
              <description>The bits are read as 0xB1</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>arm_primecell_1</name>
      <description>From arm,primecell, peripheral generator</description>
      <baseAddress>0x10070000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>spi2</name>
      <description>From arm,pl022, peripheral generator</description>
      <baseAddress>0x10080000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>spi2</name>
        <value>35</value>
      </interrupt>
      <registers>
        <register>
          <name>ssp_cr0</name>
          <description>SSPCR0 is control register 0 and contains five bit fields that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dss</name>
              <description>Data Size Select - 0000, 0001, 0010: Reserved, 0011: 4-bit data, 0100: 5-bit data, 6-bit data, 0110: 7-bit data, 0111: 8-bit data, 1000: 9-bit data, 1001: 10-bit data, 1010: 11-bit data, 1011: 12-bit data, 1100: 13-bit data, 1101: 14-bit data, 1110: 15-bit data, 1111: 16-bit data</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>frf</name>
              <description>Frame format - 00: Motorola SPI frame format, 01: TI synchronous serial frame format, 10: National Microwire frame format, 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spo</name>
              <description>SSPCLKOUT polarity, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sph</name>
              <description>SSPCLKOUT phase, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scr</name>
              <description>Serial clock rate. The value SCR is used to generate the transmit and receive bit rate of the PrimeCell SSP. The bit rate is: (F[sspclk] / (CPSDVR * (1 + SCR))), where CPSDVSR is an even value from [2:254], programmed through the SSPCPSR register and SCR is a value from [0:255]</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cr1</name>
          <description>SSPCR1 is the control register 1 and contains four different bit fields, that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lbm</name>
              <description>Loop back mode - 0: Normal serial port operation enabled, 1: Output of transmit serial shifter is connected to input of receive serial shifter internally</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sse</name>
              <description>Synchronous serial port enable - 0: SSP operation disabled, 1: SSP operation enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ms</name>
              <description>Master or slave mode select. This bit can be modified only when the PrimeCell SSP is disabled, SSE=0 - 0: Device configured as master (default), 1: Device configured as slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sod</name>
              <description>Slave-mode output disable. This bit is relevant only in the slave mode, MS=1. In multiple-slave systems, it is possible for an PrimeCell SSP master to broadcast a message to all slaves in the system while ensuring that only one slave drives data onto its serial output line. In such systems the RXD lines from multiple slaves could be tied together. To operate in such systems, the SOD bit can be set if the PrimeCell SSP slave is not supposed to drive the SSPTXD line - 0: SSP can drive the SSPTXD output in slave mode, 1: SSP must not drive the SSPTXD output in slave mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dr</name>
          <description>SSPDR is the data register and is 16-bits wide. When SSPDR is read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the PrimeCell SSP receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When SSPDR is written to, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the SSPTXD pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.</description>
          <addressOffset>0x8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>data</name>
              <description>Transmit/Receive FIFO - Read: Receive FIFO, Write: Transmit FIFO. You must right-justify data when the PrimeCell SSP is programmed for a data size that is less than 16 bits. Unused bits at the top are ignored by transmit logic. The receive logic automatically right-justifies.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_sr</name>
          <description>SSPSR is a RO status register that contains bits that indicate the FIFO fill status and the PrimeCell SSP busy status.</description>
          <addressOffset>0xc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO empty, RO - 0: Transmit FIFO is not empty, 1: Transmit FIFO is empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tnf</name>
              <description>Transmit FIFO not full, RO - 0: Transmit FIFO is full, 1: Transmit FIFO is not full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rne</name>
              <description>Receive FIFO not empty, RO - 0: Receive FIFO is empty, 1: Receive FIFO is not empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rff</name>
              <description>Receive FIFO full, RO - 0: Receive FIFO is not full, 1: Receive FIFO is full.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bsy</name>
              <description>PrimeCell SSP busy flag, RO - 0: SSP is idle, 1: SSP is currently transmitting and/or receiving a frame or the transmit FIFO is not empty.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cpsr</name>
          <description>SSPCPSR is the clock prescale register and specifies the division factor by which the input SSPCLK must be internally divided before further use. The value programmed into this register must be an even number between [2:254]. The least significant bit of the programmed number is hard-coded to zero. If an odd number is written to this register, data read back from this register has the least significant bit as zero.</description>
          <addressOffset>0x10</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cpsdvsr</name>
              <description>Clock prescale divisor. Must be an even number from 2-254, depending on the frequency of SSPCLK. The least significant bit always returns zero on reads.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_imsc</name>
          <description>The SSPIMSC register is the interrupt mask set or clear register. It is a RW register. On a read this register gives the current value of the mask on the relevant interrupt. A write of 1 to the particular bit sets the mask, enabling the interrupt to be read. A write of 0 clears the corresponding mask. All the bits are cleared to 0 when reset.</description>
          <addressOffset>0x14</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorim</name>
              <description>Receive overrun interrupt mask - 0: Receive FIFO written to while full condition interrupt is masked, 1: Receive FIFO written to while full condition interrupt is not masked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtim</name>
              <description>Receive timeout interrupt mask - 0: Receive FIFO not empty and no read prior to timeout period interrupt is masked, 1: Receive FIFO not empty and no read prior to timeout period interrupt is not masked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxim</name>
              <description>Receive FIFO interrupt mask - 0: Receive FIFO half full or less condition interrupt is masked, 1: Receive FIFO half full or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txim</name>
              <description>Transmit FIFO interrupt mask - 0: Transmit FIFO half empty or less condition interrupt is masked, 1: Transmit FIFO half empty or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_ris</name>
          <description>The SSPRIS register is the raw interrupt status register. It is a RO register. On a read this register gives the current raw status value of the corresponding interrupt prior to masking. A write has no effect.</description>
          <addressOffset>0x18</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_mis</name>
          <description>The SSPMIS register is the masked interrupt status register. It is a RO register. On a read this register gives the current masked status value of the corresponding interrupt. A write has no effect.</description>
          <addressOffset>0x1c</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rormis</name>
              <description>Gives the receive over run masked interrupt status, after masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtmis</name>
              <description>Gives the receive timeout masked interrupt state, after masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxmis</name>
              <description>Gives the receive FIFO masked interrupt state, after masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txmis</name>
              <description>Gives the transmit FIFO masked interrupt state, after masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_icr</name>
          <description>The SSPICR register is the interrupt clear register and is write-only. On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.</description>
          <addressOffset>0x20</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>roric</name>
              <description>Clears the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtic</name>
              <description>Clears the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dmacr</name>
          <description>The SSPDMACR register is the DMA control register. It is a RW register. All the bits are cleared to 0 on reset.</description>
          <addressOffset>0x24</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxdmae</name>
              <description>Receive DMA Enable. If this bit is set to 1, DMA for the receive FIFO is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txdmae</name>
              <description>Transmit DMA Enable. If this bit is set to 1, DMA for the transmit FIFO is enabled.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id0</name>
          <description>The SSPPeriphID0 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number0</name>
              <description>These bits read back as 0x22</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id1</name>
          <description>The SSPPeriphID1 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number1</name>
              <description>These bits read back as 0x0</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>designer0</name>
              <description>These bits read back as 0x1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id2</name>
          <description>The SSPPeriphID2 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>designer1</name>
              <description>These bits read back as 0x4</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>revision</name>
              <description>These bits return the peripheral revision</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id3</name>
          <description>The SSPPeriphID3 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfec</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>configuration</name>
              <description>These bits read back as 0x80</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id0</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id0</name>
              <description>The bits are read as 0xD</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id1</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id1</name>
              <description>The bits are read as 0xF0</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id2</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id2</name>
              <description>The bits are read as 0x5</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id3</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xffc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id3</name>
              <description>The bits are read as 0xB1</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>arm_primecell_2</name>
      <description>From arm,primecell, peripheral generator</description>
      <baseAddress>0x10080000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_tdm_0</name>
      <description>From starfive,jh7110-tdm, peripheral generator</description>
      <baseAddress>0x10090000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_usb_phy_0</name>
      <description>From starfive,jh7110-usb-phy, peripheral generator</description>
      <baseAddress>0x10200000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_pcie_phy_0</name>
      <description>From starfive,jh7110-pcie-phy, peripheral generator</description>
      <baseAddress>0x10210000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_pcie_phy_1</name>
      <description>From starfive,jh7110-pcie-phy, peripheral generator</description>
      <baseAddress>0x10220000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>stgcrg</name>
      <description>From starfive,jh7110-stgcrg, peripheral generator</description>
      <baseAddress>0x10230000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>clk_hifi4_core</name>
          <description>Clock HIFI4 Core</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_usb_apb</name>
          <description>Clock USB APB</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_usb_utmi_apb</name>
          <description>Clock USB UTMI APB</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_usb_axi</name>
          <description>Clock USB AXI</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_usb_ipm</name>
          <description>Clock USB AXI</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_usb_stb</name>
          <description>Clock USB STB</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=4, Default=4, Min=4, Typical=4</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_usb_app125</name>
          <description>Clock USB APP 125</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_usb_refclk</name>
          <description>Clock USB Reference Clock</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_pcie_axi_mst0</name>
          <description>U0 Clock PCIe AXI MST 0</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_pcie_apb</name>
          <description>U0 Clock PCIe APB</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_pcie_tl</name>
          <description>U0 Clock PCIe TL</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_pcie_axi_mst0</name>
          <description>U1 Clock PCIe AXI MST 0</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_pcie_apb</name>
          <description>U1 Clock PCIe APB</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_pcie_tl</name>
          <description>U1 Clock PCIe TL</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pcie01_slv_dec_main</name>
          <description>Clock PCIe 01 SLV DEC Main</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_sec_hclk</name>
          <description>Clock Security HCLK</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_sec_misc_ahb</name>
          <description>Clock Security Miscellaneous AHB</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_stg_mtrx_group0_main</name>
          <description>Clock STG MTRX Group 0 Main</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_stg_mtrx_group0_bus</name>
          <description>Clock STG MTRX Group 0 Bus</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_stg_mtrx_group0_stg</name>
          <description>Clock STG MTRX Group 0 STG</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_stg_mtrx_group1_main</name>
          <description>Clock STG MTRX Group 1 Main</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_stg_mtrx_group1_bus</name>
          <description>Clock STG MTRX Group 1 Bus</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_stg_mtrx_group1_stg</name>
          <description>Clock STG MTRX Group 1 STG</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_stg_mtrx_group1_hifi</name>
          <description>Clock STG MTRX Group 1 HIFI</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_e2_rtc</name>
          <description>Clock E2 RTC</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=24, Default=24, Min=24, Typical=24</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_e2_core</name>
          <description>Clock E2 Core</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_e2_dbg</name>
          <description>Clock E2 DBG</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_dma_axi</name>
          <description>Clock DMA AXI</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_dma_ahb</name>
          <description>Clock DMA AHB</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>soft_rst_addr_sel</name>
          <description>Software RESET Address Selector</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_stg_syscon_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_hreesetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_e2_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_dma_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_dma_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_pwrup</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi_mst0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi_slv0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi_slv</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pci_brg</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pcie</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi_mst0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi_slv0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi_slv</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_brg</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pcie</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stgcrg_rst_stat</name>
          <description>STGCRG RESET Status</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_stg_syscon_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_hreesetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_e2_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_dma_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_dma_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_pwrup</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi_mst0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi_slv0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi_slv</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pci_brg</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pcie</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi_mst0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi_slv0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi_slv</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_brg</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pcie</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>stg_syscon</name>
      <description>From starfive,jh7110-stg-syscon, peripheral generator</description>
      <baseAddress>0x10240000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>stg_syscfg_0</name>
          <description>STG SYCONSAIF SYSCFG 0</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>scfg_hprot_sd_0</name>
              <description>scfg_hprot_sd_0</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scfg_hprot_sd_1</name>
              <description>scfg_hprot_sd_1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_adp_en</name>
              <description>u0_usb_adp_en</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_adp_probe_ana</name>
              <description>u0_usb_adp_probe_ana</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_adp_probe_en</name>
              <description>u0_usb_adp_probe_en</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_adp_sense_ana</name>
              <description>u0_usb_adp_sense_ana</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_adp_sense_en</name>
              <description>u0_usb_adp_sense_en</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_adp_sink_current_en</name>
              <description>u0_usb_adp_sink_current_en</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_adp_source_current_en</name>
              <description>u0_usb_adp_source_current_en</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_bc_en</name>
              <description>u0_usb_bc_en</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_chrg_vbus</name>
              <description>u0_usb_chrg_vbus</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_dcd_comp_sts</name>
              <description>u0_usb_dcd_comp_sts</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_dischrg_vbus</name>
              <description>u0_usb_dischrg_vbus</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_dm_vdat_ref_comp_en</name>
              <description>u0_usb_dm_vdat_ref_comp_en</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_dm_vdat_ref_comp_sts</name>
              <description>u0_usb_dm_vdat_ref_comp_sts</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_dm_vlgc_comp_en</name>
              <description>u0_usb_dm_vlgc_comp_en</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_dm_vlgc_comp_sts</name>
              <description>u0_usb_dm_vlgc_comp_sts</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_dp_vdat_ref_comp_en</name>
              <description>u0_usb_dp_vdat_ref_comp_en</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_dp_vdat_ref_comp_sts</name>
              <description>u0_usb_dp_vdat_ref_comp_sts</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_host_system_err</name>
              <description>u0_usb_host_system_err</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_hsystem_err_ext</name>
              <description>u0_usb_hsystem_err_ext</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_idm_sink_en</name>
              <description>u0_usb_idm_sink_en</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_idp_sink_en</name>
              <description>u0_usb_idp_sink_en</description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_idp_src_en</name>
              <description>u0_usb_idp_src_en</description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_1</name>
          <description>STG SYSCONSAIF SYSCFG 4</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_usb_lowest_belt</name>
              <description>LTM interface to software</description>
              <bitRange>[11:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_ltm_host_req</name>
              <description>LTM interface to software</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_ltm_host_req_halt</name>
              <description>LTM interface to software</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_mdctrl_clk_sel</name>
              <description>u0_usb_mdctrl_clk_sel</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_mdctrl_clk_status</name>
              <description>u0_usb_mdctrl_clk_status</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_mode_strap</name>
              <description>Can onlly be changed when pwrup_rst_n is low</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_otg_suspendm</name>
              <description>u0_usb_otg_suspendm</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_otg_suspendm_byps</name>
              <description>u0_usb_otg_suspendm_byps</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_phy_bvalid</name>
              <description>u0_usb_phy_bvalid</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_pll_en</name>
              <description>u0_usb_pll_en</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_refclk_mode</name>
              <description>u0_usb_refclk_mode</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdn_usb_rid_comp_sts_0</name>
              <description>u0_cdn_usb_rid_comp_sts_0</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdn_usb_rid_comp_sts_1</name>
              <description>u0_cdn_usb_rid_comp_sts_1</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdn_usb_rid_comp_sts_2</name>
              <description>u0_cdn_usb_rid_comp_sts_2</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_rid_float_comp_en</name>
              <description>u0_usb_rid_float_comp_en</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_rid_float_comp_sts</name>
              <description>u0_usb_rid_float_comp_sts</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_rid_gnd_comp_sts</name>
              <description>u0_usb_rid_gnd_comp_sts</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_rid_nonfloat_comp_en</name>
              <description>u0_usb_rid_nonfloat_comp_en</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_rx_dm</name>
              <description>u0_usb_rx_dm</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_2</name>
          <description>STG SYSCONSAIF SYSCFG 8</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_usb_rx_dp</name>
              <description>u0_usb_rx_dp</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_rx_rcv</name>
              <description>u0_usb_rx_rcv</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_self_test</name>
              <description>For software bist_test</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_sessend</name>
              <description>u0_usb_sessend</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_sessvalid</name>
              <description>u0_usb_sessvalid</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_sof</name>
              <description>u0_usb_sof</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_test_bist</name>
              <description>For software bist_test</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_main_power_off_ack</name>
              <description>u0_usb_usbdev_main_power_off_ack</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_main_power_off_ready</name>
              <description>u0_usb_usbdev_main_power_off_ready</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_main_power_off_req</name>
              <description>u0_usb_usbdev_main_power_off_req</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_usbdev_main_power_on_ready</name>
              <description>u0_usb_usbdev_main_power_on_ready</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_main_power_on_req</name>
              <description>u0_usb_usbdev_main_power_on_req</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_main_power_on_valid</name>
              <description>u0_usb_usbdev_main_power_on_valid</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_usbdev_power_off_ack</name>
              <description>u0_usb_usbdev_power_off_ack</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_power_off_ready</name>
              <description>u0_usb_usbdev_power_off_ready</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_power_off_req</name>
              <description>u0_usb_usbdev_power_off_req</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_usbdev_power_on_ready</name>
              <description>u0_usb_usbdev_power_on_ready</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_power_on_req</name>
              <description>u0_usb_usbdev_power_on_req</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_usbdev_power_on_valid</name>
              <description>u0_usb_usbdev_power_on_valid</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_dmpulldown_sit</name>
              <description>u0_usb_utmi_dmpulldown_sit</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_dppulldown_sit</name>
              <description>u0_usb_utmi_dppulldown_sit</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_fslsserialmode_sit</name>
              <description>u0_usb_utmi_fslsserialmode_sit</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_hostdisconnect_sit</name>
              <description>u0_usb_utmi_hostdisconnect_sit</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_iddig_sit</name>
              <description>u0_usb_utmi_iddig_sit</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_idpullup_sit</name>
              <description>u0_usb_utmi_idpullup_sit</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_linestate_sit</name>
              <description>u0_usb_utmi_linestate_sit</description>
              <bitRange>[26:25]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_opmode_sit</name>
              <description>u0_usb_utmi_opmode_sit</description>
              <bitRange>[28:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_rxactive_sit</name>
              <description>u0_usb_utmi_rxactive_sit</description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_rxerror_sit</name>
              <description>u0_usb_utmi_rxerror_sit</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_rxvalid_sit</name>
              <description>u0_usb_utmi_rxvalid_sit</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_3</name>
          <description>STG SYSCONSAIF SYSCFG 12</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_usb_utmi_rxvalidh_sit</name>
              <description>u0_usb_utmi_rxvalidh_sit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_sessvld</name>
              <description>u0_usb_utmi_sessvld</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_termselect_sit</name>
              <description>u0_usb_utmi_termselect_sit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_tx_dat_sit</name>
              <description>u0_usb_utmi_tx_dat_sit</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_tx_enable_n_sit</name>
              <description>u0_usb_utmi_tx_enable_n_sit</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_tx_se0_sit</name>
              <description>u0_usb_utmi_tx_se0_sit</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_txbitstuffenable_sit</name>
              <description>u0_usb_utmi_txbitstuffenable_sit</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_txready_sit</name>
              <description>u0_usb_utmi_txready_sit</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_txvalid_sit</name>
              <description>u0_usb_utmi_txvalid_sit</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_txvalidh_sit</name>
              <description>u0_usb_utmi_txvalidh_sit</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_vbusvalid_sit</name>
              <description>u0_usb_utmi_vbusvalid_sit</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_xcvrselect_sit</name>
              <description>u0_usb_utmi_xcvrselect_sit</description>
              <bitRange>[12:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_utmi_vdm_src_en</name>
              <description>u0_usb_utmi_vdm_src_en</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_utmi_vdp_src_en</name>
              <description>u0_usb_utmi_vdp_src_en</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_wakeup</name>
              <description>u0_usb_wakeup</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_xhc_d0_ack</name>
              <description>u0_usb_xhc_d0_ack</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_xhc_d0_req</name>
              <description>u0_usb_xhc_d0_req</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_4</name>
          <description>STG SYSCONSAIF SYSCFG 16</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_usb_xhci_debug_bus</name>
              <description>u0_usb_xhci_debug_bus</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_5</name>
          <description>STG SYSCONSAIF SYSCFG 20</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_usb_xhci_debug_link_state</name>
              <description>u0_usb_xhci_debug_link_state</description>
              <bitRange>[30:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_6</name>
          <description>STG SYSCONSAIF SYSCFG 24</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_usb_xhci_debug_sel</name>
              <description>u0_usb_xhci_debug_sel</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_xhci_main_power_off_ack</name>
              <description>u0_usb_xhci_main_power_off_ack</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_xhci_main_power_off_req</name>
              <description>u0_usb_xhci_main_power_off_req</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_xhci_main_power_on_ready</name>
              <description>u0_usb_xhci_main_power_on_ready</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_xhci_main_power_on_req</name>
              <description>u0_usb_xhci_main_power_on_req</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_xhci_main_power_on_valid</name>
              <description>u0_usb_xhci_main_power_on_valid</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_xhci_power_off_ack</name>
              <description>u0_usb_xhci_power_off_ack</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_xhci_power_off_ready</name>
              <description>u0_usb_xhci_power_off_ready</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_xhci_power_off_req</name>
              <description>u0_usb_xhci_power_off_req</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_usb_xhci_power_on_ready</name>
              <description>u0_usb_xhci_power_on_ready</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_xhci_power_on_req</name>
              <description>u0_usb_xhci_power_on_req</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_usb_xhci_power_on_valid</name>
              <description>u0_usb_xhci_power_on_valid</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_e2_cease_from_tile_0</name>
              <description>u0_e2_cease_from_tile_0</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_e2_debug_from_tile_0</name>
              <description>u0_e2_debug_from_tile_0</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_e2_halt_from_tile_0</name>
              <description>u0_e2_halt_from_tile_0</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_7</name>
          <description>STG SYSCONSAIF SYSCFG 28</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_e2_nmi_exception_vector</name>
              <description>u0_e2_nmi_exception_vector</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_8</name>
          <description>STG SYSCONSAIF SYSCFG 32</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_e2_nmi_interrupt_vector</name>
              <description>u0_e2_nmi_interrupt_vector</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_9</name>
          <description>STG SYSCONSAIF SYSCFG 36</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_e2_reset_vector_0</name>
              <description>u0_e2_reset_vector_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_10</name>
          <description>STG SYSCONSAIF SYSCFG 40</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_e2_wfi_from_tile_0</name>
              <description>u0_e2_wfi_from_tile_0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_11</name>
          <description>STG SYSCONSAIF SYSCFG 44</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_hifi4_altresetvec</name>
              <description>Reset Vector Address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_12</name>
          <description>STG SYSCONSAIF SYSCFG 48</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_hifi4_breakin</name>
              <description>Debug signal</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_breakinack</name>
              <description>Debug signal</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_breakout</name>
              <description>Debug signal</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_breakoutack</name>
              <description>Debug signal</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_debugmode</name>
              <description>Debug signal</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_doubleexceptionerror</name>
              <description>Fault Handling Signals</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_iram0loadstore</name>
              <description>Indicates that iram0 works</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_iram1loadstore</name>
              <description>Indicates that iram1 works</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_ocdhaltonreset</name>
              <description>Debug signal</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_pfatalerror</name>
              <description>Fault Handling Signals</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_13</name>
          <description>STG SYSCONSAIF SYSCFG 52</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_hifi4_pfaultinfo</name>
              <description>Fault Handling Signals</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_14</name>
          <description>STG SYSCONSAIF SYSCFG 56</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_hifi4_pfaultinfovalid</name>
              <description>Fault Handling Signals</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_prid</name>
              <description>Module ID</description>
              <bitRange>[16:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_pwaitmode</name>
              <description>Wait Mode</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_runstall</name>
              <description>Run Stall</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_15</name>
          <description>STG SYSCONSAIF SYSCFG 60</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_hifi4_scfg_dsp_mst_offset_master</name>
              <description>Indicates that master port remap address</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_scfg_dsp_mst_offset_dma</name>
              <description>Indicates the DMA port remap address</description>
              <bitRange>[27:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_16</name>
          <description>STG SYSCONSAIF SYSCFG 64</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_hifi4_scfg_dsp_slv_offset</name>
              <description>The value indicates the slave port remap address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_17</name>
          <description>STG SYSCONSAIF SYSCFG 68</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_hifi4_scfg_sram_config_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_scfg_sram_config_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_scfg_sram_config_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_scfg_sram_config_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_scfg_sram_config_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_scfg_sram_config_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_scfg_sram_config_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_scfg_sram_config_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_statvectorsel</name>
              <description>When the value is 1, it indicates that the AltResetVec is valid</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_trigin_idma</name>
              <description>DMA port trigger</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_hifi4_trigout_idma</name>
              <description>DMA port trigger</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_hifi4_xocdmode</name>
              <description>Debug signal</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_align_detect</name>
              <description>u0_pcie_align_detect</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_18</name>
          <description>STG SYSCONSAIF SYSCFG 72</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_31_0</name>
              <description>u0_pcie_axi4_mst0_aratomop_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_19</name>
          <description>STG SYSCONSAIF SYSCFG 76</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_63_32</name>
              <description>u0_pcie_axi4_mst0_aratomop_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_20</name>
          <description>STG SYSCONSAIF SYSCFG 80</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_95_64</name>
              <description>u0_pcie_axi4_mst0_aratomop_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_21</name>
          <description>STG SYSCONSAIF SYSCFG 84</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_127_96</name>
              <description>u0_pcie_axi4_mst0_aratomop_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_22</name>
          <description>STG SYSCONSAIF SYSCFG 88</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_159_128</name>
              <description>u0_pcie_axi4_mst0_aratomop_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_23</name>
          <description>STG SYSCONSAIF SYSCFG 92</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_191_160</name>
              <description>u0_pcie_axi4_mst0_aratomop_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_24</name>
          <description>STG SYSCONSAIF SYSCFG 96</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_223_192</name>
              <description>u0_pcie_axi4_mst0_aratomop_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_25</name>
          <description>STG SYSCONSAIF SYSCFG 100</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_255_224</name>
              <description>u0_pcie_axi4_mst0_aratomop_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_26</name>
          <description>STG SYSCONSAIF SYSCFG 104</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_257_256</name>
              <description>u0_pcie_axi4_mst0_aratomop_257_256</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_axi4_mst0_arfunc</name>
              <description>u0_pcie_axi4_mst0_arfunc</description>
              <bitRange>[16:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_axi4_mst0_arregion</name>
              <description>u0_pcie_axi4_mst0_arregion</description>
              <bitRange>[20:17]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_27</name>
          <description>STG SYSCONSAIF SYSCFG 108</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aruser_31_0</name>
              <description>u0_pcie_axi4_mst0_aruser_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_28</name>
          <description>STG SYSCONSAIF SYSCFG 112</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aruser_63_32</name>
              <description>u0_pcie_axi4_mst0_aruser_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_29</name>
          <description>STG SYSCONSAIF SYSCFG 116</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_awfunc</name>
              <description>u0_pcie_axi4_mst0_awfunc</description>
              <bitRange>[14:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_axi4_mst0_awregion</name>
              <description>u0_pcie_axi4_mst0_awregion</description>
              <bitRange>[18:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_30</name>
          <description>STG SYSCONSAIF SYSCFG 120</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_a2user_31_0</name>
              <description>u0_pcie_axi4_mst0_a2user_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_31</name>
          <description>STG SYSCONSAIF SYSCFG 124</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_awuser_42_32</name>
              <description>u0_pcie_axi4_mst0_awuser_42_32</description>
              <bitRange>[10:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_axi4_mst0_rderr</name>
              <description>u0_pcie_axi4_mst0_rderr</description>
              <bitRange>[18:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_32</name>
          <description>STG SYSCONSAIF SYSCFG 128</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_ruser</name>
              <description>u0_pcie_axi4_mst0_ruser</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_33</name>
          <description>STG SYSCONSAIF SYSCFG 132</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_wderr</name>
              <description>u0_pcie_axi4_mst0_wderr</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_34</name>
          <description>STG SYSCONSAIF SYSCFG 136</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_31_0</name>
              <description>u0_pcie_axi4_slv0_aratomop_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_35</name>
          <description>STG SYSCONSAIF SYSCFG 140</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_63_32</name>
              <description>u0_pcie_axi4_slv0_aratomop_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_36</name>
          <description>STG SYSCONSAIF SYSCFG 144</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_95_64</name>
              <description>u0_pcie_axi4_slv0_aratomop_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_37</name>
          <description>STG SYSCONSAIF SYSCFG 148</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_127_96</name>
              <description>u0_pcie_axi4_slv0_aratomop_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_38</name>
          <description>STG SYSCONSAIF SYSCFG 152</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_159_128</name>
              <description>u0_pcie_axi4_slv0_aratomop_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_39</name>
          <description>STG SYSCONSAIF SYSCFG 156</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_191_160</name>
              <description>u0_pcie_axi4_slv0_aratomop_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_40</name>
          <description>STG SYSCONSAIF SYSCFG 160</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_223_192</name>
              <description>u0_pcie_axi4_slv0_aratomop_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_41</name>
          <description>STG SYSCONSAIF SYSCFG 164</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_255_224</name>
              <description>u0_pcie_axi4_slv0_aratomop_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_42</name>
          <description>STG SYSCONSAIF SYSCFG 168</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aratomop_257_256</name>
              <description>u0_pcie_axi4_slv0_aratomop_257_256</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi4_slv0_arfunc</name>
              <description>u0_pcie_axi4_slv0_arfunc</description>
              <bitRange>[16:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi4_slv0_arregion</name>
              <description>u0_pcie_axi4_slv0_arregion</description>
              <bitRange>[20:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_43</name>
          <description>STG SYSCONSAIF SYSCFG 172</description>
          <addressOffset>0xac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aruser_31_0</name>
              <description>u0_pcie_axi4_slv0_aruser_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_44</name>
          <description>STG SYSCONSAIF SYSCFG 176</description>
          <addressOffset>0xb0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_aruser_40_32</name>
              <description>u0_pcie_axi4_slv0_aruser_40_32</description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi4_slv0_awfunc</name>
              <description>u0_pcie_axi4_slv0_awfunc</description>
              <bitRange>[23:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi4_slv0_awregion</name>
              <description>u0_pcie_axi4_slv0_awregion</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_45</name>
          <description>STG SYSCONSAIF SYSCFG 180</description>
          <addressOffset>0xb4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_awuser_31_0</name>
              <description>u0_pcie_axi4_slv0_awuser_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_46</name>
          <description>STG SYSCONSAIF SYSCFG 184</description>
          <addressOffset>0xb8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_awuser_40_32</name>
              <description>u0_pcie_axi4_slv0_awuser_40_32</description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi4_slv0_rderr</name>
              <description>u0_pcie_axi4_slv0_rderr</description>
              <bitRange>[16:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_47</name>
          <description>STG SYSCONSAIF SYSCFG 188</description>
          <addressOffset>0xbc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_ruser</name>
              <description>u0_pcie_axi4_slv0_ruser</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_48</name>
          <description>STG SYSCONSAIF SYSCFG 192</description>
          <addressOffset>0xc0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slv0_wderr</name>
              <description>u0_pcie_axi4_slv0_wderr</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_axi4_slvl_arfunc</name>
              <description>u0_pcie_axi4_slvl_arfunc</description>
              <bitRange>[22:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_49</name>
          <description>STG SYSCONSAIF SYSCFG 196</description>
          <addressOffset>0xc4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_slvl_awfunc</name>
              <description>u0_pcie_axi4_slvl_awfunc</description>
              <bitRange>[14:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_bus_width_o</name>
              <description>u0_pcie_bus_width_o</description>
              <bitRange>[16:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_bypass_codec</name>
              <description>u0_pcie_bypass_codec</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_ckref_src</name>
              <description>u0_pcie_ckref_src</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_clk_sel</name>
              <description>u0_pcie_clk_sel</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_clkreq</name>
              <description>u0_pcie_clkreq</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_50</name>
          <description>STG SYSCONSAIF SYSCFG 200</description>
          <addressOffset>0xc8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_31_0</name>
              <description>u0_pcie_k_phyparam_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_51</name>
          <description>STG SYSCONSAIF SYSCFG 204</description>
          <addressOffset>0xcc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_63_32</name>
              <description>u0_pcie_k_phyparam_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_52</name>
          <description>STG SYSCONSAIF SYSCFG 208</description>
          <addressOffset>0xd0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_95_64</name>
              <description>u0_pcie_k_phyparam_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_53</name>
          <description>STG SYSCONSAIF SYSCFG 212</description>
          <addressOffset>0xd4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_127_96</name>
              <description>u0_pcie_k_phyparam_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_54</name>
          <description>STG SYSCONSAIF SYSCFG 216</description>
          <addressOffset>0xd8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_159_128</name>
              <description>u0_pcie_k_phyparam_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_55</name>
          <description>STG SYSCONSAIF SYSCFG 220</description>
          <addressOffset>0xdc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_191_160</name>
              <description>u0_pcie_k_phyparam_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_56</name>
          <description>STG SYSCONSAIF SYSCFG 224</description>
          <addressOffset>0xe0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_223_192</name>
              <description>u0_pcie_k_phyparam_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_57</name>
          <description>STG SYSCONSAIF SYSCFG 228</description>
          <addressOffset>0xe4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_255_224</name>
              <description>u0_pcie_k_phyparam_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_58</name>
          <description>STG SYSCONSAIF SYSCFG 232</description>
          <addressOffset>0xe8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_287_256</name>
              <description>u0_pcie_k_phyparam_287_256</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_59</name>
          <description>STG SYSCONSAIF SYSCFG 236</description>
          <addressOffset>0xec</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_319_288</name>
              <description>u0_pcie_k_phyparam_319_288</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_60</name>
          <description>STG SYSCONSAIF SYSCFG 240</description>
          <addressOffset>0xf0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_351_320</name>
              <description>u0_pcie_k_phyparam_351_320</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_61</name>
          <description>STG SYSCONSAIF SYSCFG 244</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_383_352</name>
              <description>u0_pcie_k_phyparam_383_352</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_62</name>
          <description>STG SYSCONSAIF SYSCFG 248</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_415_384</name>
              <description>u0_pcie_k_phyparam_415_384</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_63</name>
          <description>STG SYSCONSAIF SYSCFG 252</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_447_416</name>
              <description>u0_pcie_k_phyparam_447_416</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_64</name>
          <description>STG SYSCONSAIF SYSCFG 256</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_479_448</name>
              <description>u0_pcie_k_phyparam_479_448</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_65</name>
          <description>STG SYSCONSAIF SYSCFG 260</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_511_480</name>
              <description>u0_pcie_k_phyparam_511_480</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_66</name>
          <description>STG SYSCONSAIF SYSCFG 264</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_543_512</name>
              <description>u0_pcie_k_phyparam_543_512</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_67</name>
          <description>STG SYSCONSAIF SYSCFG 268</description>
          <addressOffset>0x10c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_575_544</name>
              <description>u0_pcie_k_phyparam_575_544</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_68</name>
          <description>STG SYSCONSAIF SYSCFG 272</description>
          <addressOffset>0x110</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_607_576</name>
              <description>u0_pcie_k_phyparam_607_576</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_69</name>
          <description>STG SYSCONSAIF SYSCFG 276</description>
          <addressOffset>0x114</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_639_608</name>
              <description>u0_pcie_k_phyparam_639_608</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_70</name>
          <description>STG SYSCONSAIF SYSCFG 280</description>
          <addressOffset>0x118</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_671_640</name>
              <description>u0_pcie_k_phyparam_671_640</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_71</name>
          <description>STG SYSCONSAIF SYSCFG 284</description>
          <addressOffset>0x11c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_703_672</name>
              <description>u0_pcie_k_phyparam_703_672</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_72</name>
          <description>STG SYSCONSAIF SYSCFG 288</description>
          <addressOffset>0x120</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_735_704</name>
              <description>u0_pcie_k_phyparam_735_704</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_73</name>
          <description>STG SYSCONSAIF SYSCFG 292</description>
          <addressOffset>0x124</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_767_736</name>
              <description>u0_pcie_k_phyparam_767_736</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_74</name>
          <description>STG SYSCONSAIF SYSCFG 296</description>
          <addressOffset>0x128</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_799_768</name>
              <description>u0_pcie_k_phyparam_799_768</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_75</name>
          <description>STG SYSCONSAIF SYSCFG 300</description>
          <addressOffset>0x12c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_831_800</name>
              <description>u0_pcie_k_phyparam_831_800</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_76</name>
          <description>STG SYSCONSAIF SYSCFG 304</description>
          <addressOffset>0x130</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_k_phyparam_839_832</name>
              <description>u0_pcie_k_phyparam_839_832</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_k_rp_nep</name>
              <description>u0_pcie_k_rp_nep</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_l1sub_entack</name>
              <description>u0_pcie_l1sub_entack</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_l1sub_entreq</name>
              <description>u0_pcie_l1sub_entreq</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_77</name>
          <description>STG SYSCONSAIF SYSCFG 308</description>
          <addressOffset>0x134</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_local_interrupt_in</name>
              <description>u0_pcie_local_interrupt_in</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_78</name>
          <description>STG SYSCONSAIF SYSCFG 312</description>
          <addressOffset>0x138</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_mperstn</name>
              <description>u0_pcie_mperstn</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pcie_ebuf_mode</name>
              <description>u0_pcie_pcie_ebuf_mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pcie_phy_test_cfg</name>
              <description>u0_pcie_pcie_phy_test_cfg</description>
              <bitRange>[24:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pcie_rx_eq_training</name>
              <description>u0_pcie_pcie_rx_eq_training</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pcie_rxterm_en</name>
              <description>u0_pcie_pcie_rxterm_en</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pcie_tx_onezeros</name>
              <description>u0_pcie_pcie_tx_onezeros</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_79</name>
          <description>STG SYSCONSAIF SYSCFG 316</description>
          <addressOffset>0x13c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pf0_offset</name>
              <description>u0_pcie_pf0_offset</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_80</name>
          <description>STG SYSCONSAIF SYSCFG 320</description>
          <addressOffset>0x140</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pf1_offset</name>
              <description>u0_pcie_pf1_offset</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_81</name>
          <description>STG SYSCONSAIF SYSCFG 324</description>
          <addressOffset>0x144</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pf2_offset</name>
              <description>u0_pcie_pf2_offset</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_82</name>
          <description>STG SYSCONSAIF SYSCFG 328</description>
          <addressOffset>0x148</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pf3_offset</name>
              <description>u0_pcie_pf3_offset</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_phy_mode</name>
              <description>u0_pcie_phy_mode</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pl_clkrem_allow</name>
              <description>u0_pcie_pl_clkrem_allow</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pl_clkreq_oen</name>
              <description>u0_pcie_pl_clkreq_oen</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_pl_equ_phase</name>
              <description>u0_pcie_pl_equ_phase</description>
              <bitRange>[25:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_pl_ltssm</name>
              <description>u0_pcie_pl_ltssm</description>
              <bitRange>[30:26]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_83</name>
          <description>STG SYSCONSAIF SYSCFG 332</description>
          <addressOffset>0x14c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pl_pclk_rate</name>
              <description>u0_pcie_pl_pclk_rate</description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_84</name>
          <description>STG SYSCONSAIF SYSCFG 336</description>
          <addressOffset>0x150</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pl_sideband_in_31_0</name>
              <description>u0_pcie_pl_sideband_in_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_85</name>
          <description>STG SYSCONSAIF SYSCFG 340</description>
          <addressOffset>0x154</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pl_sideband_in_63_32</name>
              <description>u0_pcie_pl_sideband_in_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_86</name>
          <description>STG SYSCONSAIF SYSCFG 344</description>
          <addressOffset>0x158</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pl_sideband_out_31_0</name>
              <description>u0_pcie_pl_sideband_out_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_87</name>
          <description>STG SYSCONSAIF SYSCFG 348</description>
          <addressOffset>0x15c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pl_sideband_out_63_32</name>
              <description>u0_pcie_pl_sideband_out_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_88</name>
          <description>STG SYSCONSAIF SYSCFG 352</description>
          <addressOffset>0x160</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_pl_wake_in</name>
              <description>u0_pcie_pl_wake_in</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_pl_wake_oen</name>
              <description>u0_pcie_pl_wake_oen</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_rx_standby_0</name>
              <description>u0_pcie_rx_standby_0</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_89</name>
          <description>STG SYSCONSAIF SYSCFG 356</description>
          <addressOffset>0x164</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_in_31_0</name>
              <description>u0_pcie_test_in_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_90</name>
          <description>STG SYSCONSAIF SYSCFG 360</description>
          <addressOffset>0x168</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_in_63_32</name>
              <description>u0_pcie_test_in_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_91</name>
          <description>STG SYSCONSAIF SYSCFG 364</description>
          <addressOffset>0x16c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_31_0</name>
              <description>u0_pcie_test_out_bridge_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_92</name>
          <description>STG SYSCONSAIF SYSCFG 368</description>
          <addressOffset>0x170</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_63_32</name>
              <description>u0_pcie_test_out_bridge_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_93</name>
          <description>STG SYSCONSAIF SYSCFG 372</description>
          <addressOffset>0x174</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_95_64</name>
              <description>u0_pcie_test_out_bridge_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_94</name>
          <description>STG SYSCONSAIF SYSCFG 376</description>
          <addressOffset>0x178</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_127_96</name>
              <description>u0_pcie_test_out_bridge_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_95</name>
          <description>STG SYSCONSAIF SYSCFG 380</description>
          <addressOffset>0x17c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_159_128</name>
              <description>u0_pcie_test_out_bridge_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_96</name>
          <description>STG SYSCONSAIF SYSCFG 384</description>
          <addressOffset>0x180</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_191_160</name>
              <description>u0_pcie_test_out_bridge_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_97</name>
          <description>STG SYSCONSAIF SYSCFG 388</description>
          <addressOffset>0x184</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_223_192</name>
              <description>u0_pcie_test_out_bridge_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_98</name>
          <description>STG SYSCONSAIF SYSCFG 392</description>
          <addressOffset>0x188</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_255_224</name>
              <description>u0_pcie_test_out_bridge_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_99</name>
          <description>STG SYSCONSAIF SYSCFG 396</description>
          <addressOffset>0x18c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_287_256</name>
              <description>u0_pcie_test_out_bridge_287_256</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_100</name>
          <description>STG SYSCONSAIF SYSCFG 400</description>
          <addressOffset>0x190</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_319_288</name>
              <description>u0_pcie_test_out_bridge_319_288</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_101</name>
          <description>STG SYSCONSAIF SYSCFG 404</description>
          <addressOffset>0x194</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_351_320</name>
              <description>u0_pcie_test_out_bridge_351_320</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_102</name>
          <description>STG SYSCONSAIF SYSCFG 408</description>
          <addressOffset>0x198</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_383_352</name>
              <description>u0_pcie_test_out_bridge_383_352</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_103</name>
          <description>STG SYSCONSAIF SYSCFG 412</description>
          <addressOffset>0x19c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_415_384</name>
              <description>u0_pcie_test_out_bridge_415_384</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_104</name>
          <description>STG SYSCONSAIF SYSCFG 416</description>
          <addressOffset>0x1a0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_447_416</name>
              <description>u0_pcie_test_out_bridge_447_416</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_105</name>
          <description>STG SYSCONSAIF SYSCFG 420</description>
          <addressOffset>0x1a4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_479_448</name>
              <description>u0_pcie_test_out_bridge_479_448</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_106</name>
          <description>STG SYSCONSAIF SYSCFG 424</description>
          <addressOffset>0x1a8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_bridge_511_480</name>
              <description>u0_pcie_test_out_bridge_511_480</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_107</name>
          <description>STG SYSCONSAIF SYSCFG 428</description>
          <addressOffset>0x1ac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_31_0</name>
              <description>u0_pcie_test_out_pcie_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_108</name>
          <description>STG SYSCONSAIF SYSCFG 432</description>
          <addressOffset>0x1b0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_63_32</name>
              <description>u0_pcie_test_out_pcie_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_109</name>
          <description>STG SYSCONSAIF SYSCFG 436</description>
          <addressOffset>0x1b4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_95_64</name>
              <description>u0_pcie_test_out_pcie_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_110</name>
          <description>STG SYSCONSAIF SYSCFG 440</description>
          <addressOffset>0x1b8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_127_96</name>
              <description>u0_pcie_test_out_pcie_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_111</name>
          <description>STG SYSCONSAIF SYSCFG 444</description>
          <addressOffset>0x1bc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_159_128</name>
              <description>u0_pcie_test_out_pcie_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_112</name>
          <description>STG SYSCONSAIF SYSCFG 448</description>
          <addressOffset>0x1c0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_191_160</name>
              <description>u0_pcie_test_out_pcie_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_113</name>
          <description>STG SYSCONSAIF SYSCFG 452</description>
          <addressOffset>0x1c4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_223_192</name>
              <description>u0_pcie_test_out_pcie_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_114</name>
          <description>STG SYSCONSAIF SYSCFG 456</description>
          <addressOffset>0x1c8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_255_224</name>
              <description>u0_pcie_test_out_pcie_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_115</name>
          <description>STG SYSCONSAIF SYSCFG 460</description>
          <addressOffset>0x1cc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_287_256</name>
              <description>u0_pcie_test_out_pcie_287_256</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_116</name>
          <description>STG SYSCONSAIF SYSCFG 464</description>
          <addressOffset>0x1d0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_319_288</name>
              <description>u0_pcie_test_out_pcie_319_288</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_117</name>
          <description>STG SYSCONSAIF SYSCFG 468</description>
          <addressOffset>0x1d4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_351_320</name>
              <description>u0_pcie_test_out_pcie_351_320</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_118</name>
          <description>STG SYSCONSAIF SYSCFG 472</description>
          <addressOffset>0x1d8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_383_352</name>
              <description>u0_pcie_test_out_pcie_383_352</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_119</name>
          <description>STG SYSCONSAIF SYSCFG 476</description>
          <addressOffset>0x1dc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_415_384</name>
              <description>u0_pcie_test_out_pcie_415_384</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_120</name>
          <description>STG SYSCONSAIF SYSCFG 480</description>
          <addressOffset>0x1e0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_447_416</name>
              <description>u0_pcie_test_out_pcie_447_416</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_121</name>
          <description>STG SYSCONSAIF SYSCFG 484</description>
          <addressOffset>0x1e4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_479_448</name>
              <description>u0_pcie_test_out_pcie_479_448</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_122</name>
          <description>STG SYSCONSAIF SYSCFG 488</description>
          <addressOffset>0x1e8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_out_pcie_511_480</name>
              <description>u0_pcie_test_out_pcie_511_480</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_123</name>
          <description>STG SYSCONSAIF SYSCFG 492</description>
          <addressOffset>0x1ec</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_test_sel</name>
              <description>u0_pcie_test_sel</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_tl_clock_freq</name>
              <description>u0_pcie_tl_clock_freq</description>
              <bitRange>[25:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_124</name>
          <description>STG SYSCONSAIF SYSCFG 496</description>
          <addressOffset>0x1f0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_tl_ctrl_hotplug</name>
              <description>u0_pcie_tl_ctrl_hotplug</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_tl_report_hotplug</name>
              <description>u0_pcie_tl_report_hotplug</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_125</name>
          <description>STG SYSCONSAIF SYSCFG 500</description>
          <addressOffset>0x1f4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_tx_pattern</name>
              <description>u0_pcie_tx_pattern</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_usb3_bus_width</name>
              <description>u0_pcie_usb3_bus_width</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_usb3_phy_enable</name>
              <description>u0_pcie_usb3_phy_enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_usb3_rate</name>
              <description>u0_pcie_usb3_rate</description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_usb3_rx_standby</name>
              <description>u0_pcie_usb3_rx_standby</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_xwdecerr</name>
              <description>u0_pcie_xwdecerr</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_xwerrclr</name>
              <description>u0_pcie_xwerrclr</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pcie_xwslverr</name>
              <description>u0_pcie_xwslverr</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_sec_top_sramcfg_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_sramcfg_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_sramcfg_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[14:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_sramcfg_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[16:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_sramcfg_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_sramcfg_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[20:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_sramcfg_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sec_top_sramcfg_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_plda_pcie_align_detect</name>
              <description>u0_plda_pcie_align_detect</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_126</name>
          <description>STG SYSCONSAIF SYSCFG 504</description>
          <addressOffset>0x1f8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_31_0</name>
              <description>u0_pcie_axi4_mst0_aratomop_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_127</name>
          <description>STG SYSCONSAIF SYSCFG 508</description>
          <addressOffset>0x1fc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_63_32</name>
              <description>u0_pcie_axi4_mst0_aratomop_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_128</name>
          <description>STG SYSCONSAIF SYSCFG 512</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_95_64</name>
              <description>u0_pcie_axi4_mst0_aratomop_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_129</name>
          <description>STG SYSCONSAIF SYSCFG 516</description>
          <addressOffset>0x204</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_127_96</name>
              <description>u0_pcie_axi4_mst0_aratomop_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_130</name>
          <description>STG SYSCONSAIF SYSCFG 520</description>
          <addressOffset>0x208</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_159_128</name>
              <description>u0_pcie_axi4_mst0_aratomop_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_131</name>
          <description>STG SYSCONSAIF SYSCFG 524</description>
          <addressOffset>0x20c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_191_160</name>
              <description>u0_pcie_axi4_mst0_aratomop_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_132</name>
          <description>STG SYSCONSAIF SYSCFG 528</description>
          <addressOffset>0x210</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_223_192</name>
              <description>u0_pcie_axi4_mst0_aratomop_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_133</name>
          <description>STG SYSCONSAIF SYSCFG 532</description>
          <addressOffset>0x214</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_255_224</name>
              <description>u0_pcie_axi4_mst0_aratomop_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_134</name>
          <description>STG SYSCONSAIF SYSCFG 536</description>
          <addressOffset>0x218</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pcie_axi4_mst0_aratomop_257_256</name>
              <description>u0_pcie_axi4_mst0_aratomop_257_256</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_axi4_mst0_arfunc</name>
              <description>u0_pcie_axi4_mst0_arfunc</description>
              <bitRange>[16:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_pcie_axi4_mst0_arregion</name>
              <description>u0_pcie_axi4_mst0_arregion</description>
              <bitRange>[20:17]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_135</name>
          <description>STG SYSCONSAIF SYSCFG 540</description>
          <addressOffset>0x21c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_mst0_aruser_31_0</name>
              <description>u1_pcie_axi4_mst0_aruser_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_136</name>
          <description>STG SYSCONSAIF SYSCFG 544</description>
          <addressOffset>0x220</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_mst0_aruser_52_32</name>
              <description>u1_pcie_axi4_mst0_aruser_52_32</description>
              <bitRange>[20:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_137</name>
          <description>STG SYSCONSAIF SYSCFG 548</description>
          <addressOffset>0x224</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_mst0_awfunc</name>
              <description>u1_pcie_axi4_mst0_awfunc</description>
              <bitRange>[14:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_axi4_mst0_awregion</name>
              <description>u1_pcie_axi4_mst0_awregion</description>
              <bitRange>[18:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_138</name>
          <description>STG SYSCONSAIF SYSCFG 552</description>
          <addressOffset>0x228</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_mst0_awuser_31_0</name>
              <description>u1_pcie_axi4_mst0_awuser_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_139</name>
          <description>STG SYSCONSAIF SYSCFG 556</description>
          <addressOffset>0x22c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_mst0_awuser_42_32</name>
              <description>u1_pcie_axi4_mst0_awuser_42_32</description>
              <bitRange>[10:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_axi4_mst0_rderr</name>
              <description>u1_pcie_axi4_mst0_rderr</description>
              <bitRange>[18:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_140</name>
          <description>STG SYSCONSAIF SYSCFG 560</description>
          <addressOffset>0x230</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_mst0_ruser</name>
              <description>u1_pcie_axi4_mst0_ruser</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_141</name>
          <description>STG SYSCONSAIF SYSCFG 564</description>
          <addressOffset>0x234</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_mst0_wderr</name>
              <description>u1_pcie_axi4_mst0_wderr</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_142</name>
          <description>STG SYSCONSAIF SYSCFG 568</description>
          <addressOffset>0x238</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aratomop_31_0</name>
              <description>u1_pcie_axi4_slv0_aratomop_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_143</name>
          <description>STG SYSCONSAIF SYSCFG 572</description>
          <addressOffset>0x23c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aratomop_63_32</name>
              <description>u1_pcie_axi4_slv0_aratomop_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_144</name>
          <description>STG SYSCONSAIF SYSCFG 576</description>
          <addressOffset>0x240</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aratomop_95_64</name>
              <description>u1_pcie_axi4_slv0_aratomop_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_145</name>
          <description>STG SYSCONSAIF SYSCFG 580</description>
          <addressOffset>0x244</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aratomop_127_96</name>
              <description>u1_pcie_axi4_slv0_aratomop_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_146</name>
          <description>STG SYSCONSAIF SYSCFG 584</description>
          <addressOffset>0x248</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aratomop_159_128</name>
              <description>u1_pcie_axi4_slv0_aratomop_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_147</name>
          <description>STG SYSCONSAIF SYSCFG 588</description>
          <addressOffset>0x24c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aratomop_191_160</name>
              <description>u1_pcie_axi4_slv0_aratomop_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_148</name>
          <description>STG SYSCONSAIF SYSCFG 592</description>
          <addressOffset>0x250</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aratomop_223_192</name>
              <description>u1_pcie_axi4_slv0_aratomop_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_149</name>
          <description>STG SYSCONSAIF SYSCFG 596</description>
          <addressOffset>0x254</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aratomop_255_224</name>
              <description>u1_pcie_axi4_slv0_aratomop_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_150</name>
          <description>STG SYSCONSAIF SYSCFG 600</description>
          <addressOffset>0x258</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_mst0_aratomop_257_256</name>
              <description>u1_pcie_axi4_mst0_aratomop_257_256</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi4_slv0_arfunc</name>
              <description>u1_pcie_axi4_slv0_arfunc</description>
              <bitRange>[16:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi4_slv0_arregion</name>
              <description>u1_pcie_axi4_slv0_arregion</description>
              <bitRange>[20:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_151</name>
          <description>STG SYSCONSAIF SYSCFG 604</description>
          <addressOffset>0x25c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aruser_31_0</name>
              <description>u1_pcie_axi4_slv0_aruser_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_152</name>
          <description>STG SYSCONSAIF SYSCFG 608</description>
          <addressOffset>0x260</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_aruser_40_32</name>
              <description>u1_pcie_axi4_slv0_aruser_40_32</description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi4_slv0_awfunc</name>
              <description>u1_pcie_axi4_slv0_awfunc</description>
              <bitRange>[23:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi4_slv0_awregion</name>
              <description>u1_pcie_axi4_slv0_awregion</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_153</name>
          <description>STG SYSCONSAIF SYSCFG 612</description>
          <addressOffset>0x264</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_awuser_31_0</name>
              <description>u1_pcie_axi4_slv0_awuser_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_154</name>
          <description>STG SYSCONSAIF SYSCFG 616</description>
          <addressOffset>0x268</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_awuser_40_32</name>
              <description>u1_pcie_axi4_slv0_awuser_40_32</description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi4_slv0_rderr</name>
              <description>u1_pcie_axi4_slv0_rderr</description>
              <bitRange>[16:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_155</name>
          <description>STG SYSCONSAIF SYSCFG 620</description>
          <addressOffset>0x26c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_ruser</name>
              <description>u1_pcie_axi4_slv0_ruser</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_156</name>
          <description>STG SYSCONSAIF SYSCFG 624</description>
          <addressOffset>0x270</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slv0_wderr</name>
              <description>u1_pcie_axi4_slv0_wderr</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_axi4_slvl_arfunc</name>
              <description>u1_pcie_axi4_slvl_arfunc</description>
              <bitRange>[22:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_157</name>
          <description>STG SYSCONSAIF SYSCFG 628</description>
          <addressOffset>0x274</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_axi4_slvl_awfunc</name>
              <description>u1_pcie_axi4_slvl_awfunc</description>
              <bitRange>[14:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_bus_width_o</name>
              <description>u1_pcie_bus_width_o</description>
              <bitRange>[16:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_bypass_codec</name>
              <description>u1_pcie_bypass_codec</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_ckref_src</name>
              <description>u1_pcie_ckref_src</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_clk_sel</name>
              <description>u1_pcie_clk_sel</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_clkreq</name>
              <description>u1_pcie_clkreq</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_158</name>
          <description>STG SYSCONSAIF SYSCFG 632</description>
          <addressOffset>0x278</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_31_0</name>
              <description>u1_plda_pcie_k_phyparam_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_159</name>
          <description>STG SYSCONSAIF SYSCFG 636</description>
          <addressOffset>0x27c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_63_32</name>
              <description>u1_plda_pcie_k_phyparam_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_160</name>
          <description>STG SYSCONSAIF SYSCFG 640</description>
          <addressOffset>0x280</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_95_64</name>
              <description>u1_plda_pcie_k_phyparam_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_161</name>
          <description>STG SYSCONSAIF SYSCFG 644</description>
          <addressOffset>0x284</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_127_96</name>
              <description>u1_plda_pcie_k_phyparam_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_162</name>
          <description>STG SYSCONSAIF SYSCFG 648</description>
          <addressOffset>0x288</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_159_128</name>
              <description>u1_plda_pcie_k_phyparam_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_163</name>
          <description>STG SYSCONSAIF SYSCFG 652</description>
          <addressOffset>0x28c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_191_160</name>
              <description>u1_plda_pcie_k_phyparam_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_164</name>
          <description>STG SYSCONSAIF SYSCFG 656</description>
          <addressOffset>0x290</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_223_192</name>
              <description>u1_plda_pcie_k_phyparam_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_165</name>
          <description>STG SYSCONSAIF SYSCFG 660</description>
          <addressOffset>0x294</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_255_224</name>
              <description>u1_plda_pcie_k_phyparam_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_166</name>
          <description>STG SYSCONSAIF SYSCFG 664</description>
          <addressOffset>0x298</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_287_256</name>
              <description>u1_plda_pcie_k_phyparam_287_256</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_167</name>
          <description>STG SYSCONSAIF SYSCFG 668</description>
          <addressOffset>0x29c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_319_288</name>
              <description>u1_plda_pcie_k_phyparam_319_288</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_168</name>
          <description>STG SYSCONSAIF SYSCFG 672</description>
          <addressOffset>0x2a0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_351_320</name>
              <description>u1_plda_pcie_k_phyparam_351_320</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_169</name>
          <description>STG SYSCONSAIF SYSCFG 676</description>
          <addressOffset>0x2a4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_383_352</name>
              <description>u1_plda_pcie_k_phyparam_383_352</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_170</name>
          <description>STG SYSCONSAIF SYSCFG 680</description>
          <addressOffset>0x2a8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_415_384</name>
              <description>u1_plda_pcie_k_phyparam_415_384</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_171</name>
          <description>STG SYSCONSAIF SYSCFG 684</description>
          <addressOffset>0x2ac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_447_416</name>
              <description>u1_plda_pcie_k_phyparam_447_416</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_172</name>
          <description>STG SYSCONSAIF SYSCFG 688</description>
          <addressOffset>0x2b0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_479_448</name>
              <description>u1_plda_pcie_k_phyparam_479_448</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_173</name>
          <description>STG SYSCONSAIF SYSCFG 692</description>
          <addressOffset>0x2b4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_511_480</name>
              <description>u1_plda_pcie_k_phyparam_511_480</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_174</name>
          <description>STG SYSCONSAIF SYSCFG 696</description>
          <addressOffset>0x2b8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_543_512</name>
              <description>u1_plda_pcie_k_phyparam_543_512</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_175</name>
          <description>STG SYSCONSAIF SYSCFG 700</description>
          <addressOffset>0x2bc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_575_544</name>
              <description>u1_plda_pcie_k_phyparam_575_544</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_176</name>
          <description>STG SYSCONSAIF SYSCFG 704</description>
          <addressOffset>0x2c0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_607_576</name>
              <description>u1_plda_pcie_k_phyparam_607_576</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_177</name>
          <description>STG SYSCONSAIF SYSCFG 708</description>
          <addressOffset>0x2c4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_639_608</name>
              <description>u1_plda_pcie_k_phyparam_639_608</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_178</name>
          <description>STG SYSCONSAIF SYSCFG 712</description>
          <addressOffset>0x2c8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_671_640</name>
              <description>u1_plda_pcie_k_phyparam_671_640</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_179</name>
          <description>STG SYSCONSAIF SYSCFG 716</description>
          <addressOffset>0x2cc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_703_672</name>
              <description>u1_plda_pcie_k_phyparam_703_672</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_180</name>
          <description>STG SYSCONSAIF SYSCFG 720</description>
          <addressOffset>0x2d0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_735_704</name>
              <description>u1_plda_pcie_k_phyparam_735_704</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_181</name>
          <description>STG SYSCONSAIF SYSCFG 724</description>
          <addressOffset>0x2d4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_767_736</name>
              <description>u1_plda_pcie_k_phyparam_767_736</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_182</name>
          <description>STG SYSCONSAIF SYSCFG 728</description>
          <addressOffset>0x2d8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_799_768</name>
              <description>u1_plda_pcie_k_phyparam_799_768</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_183</name>
          <description>STG SYSCONSAIF SYSCFG 732</description>
          <addressOffset>0x2dc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_plda_pcie_k_phyparam_831_800</name>
              <description>u1_plda_pcie_k_phyparam_831_800</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_184</name>
          <description>STG SYSCONSAIF SYSCFG 736</description>
          <addressOffset>0x2e0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_k_phyparam_839_832</name>
              <description>u1_pcie_k_phyparam_839_832</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_k_rp_nep</name>
              <description>u1_pcie_k_rp_nep</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_l1sub_entack</name>
              <description>u1_pcie_l1sub_entack</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_l1sub_entreq</name>
              <description>u1_pcie_l1sub_entreq</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_185</name>
          <description>STG SYSCONSAIF SYSCFG 740</description>
          <addressOffset>0x2e4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_local_interrupt_in</name>
              <description>u1_pcie_local_interrupt_in</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_186</name>
          <description>STG SYSCONSAIF SYSCFG 744</description>
          <addressOffset>0x2e8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_mperstn</name>
              <description>u1_pcie_mperstn</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pcie_ebuf_mode</name>
              <description>u1_pcie_pcie_ebuf_mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pcie_phy_test_cfg</name>
              <description>u1_pcie_pcie_phy_test_cfg</description>
              <bitRange>[24:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pcie_rx_eq_training</name>
              <description>u1_pcie_pcie_rx_eq_training</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pcie_rxterm_en</name>
              <description>u1_pcie_pcie_rxterm_en</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pcie_tx_oneszeros</name>
              <description>u1_pcie_pcie_tx_oneszeros</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_187</name>
          <description>STG SYSCONSAIF SYSCFG 748</description>
          <addressOffset>0x2ec</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pf0_offset</name>
              <description>u1_pcie_pf0_offset</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_188</name>
          <description>STG SYSCONSAIF SYSCFG 752</description>
          <addressOffset>0x2f0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pf1_offset</name>
              <description>u1_pcie_pf1_offset</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_189</name>
          <description>STG SYSCONSAIF SYSCFG 756</description>
          <addressOffset>0x2f4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pf2_offset</name>
              <description>u1_pcie_pf2_offset</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_190</name>
          <description>STG SYSCONSAIF SYSCFG 760</description>
          <addressOffset>0x2f8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pf3_offset</name>
              <description>u1_pcie_pf3_offset</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_phy_mode</name>
              <description>u1_pcie_phy_mode</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pl_clkrem_allow</name>
              <description>u1_pcie_pl_clkrem_allow</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pl_clkreq_oen</name>
              <description>u1_pcie_pl_clkreq_oen</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_pl_equ_phase</name>
              <description>u1_pcie_pl_equ_phase</description>
              <bitRange>[25:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_pl_ltssm</name>
              <description>u1_pcie_pl_ltssm</description>
              <bitRange>[30:26]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_191</name>
          <description>STG SYSCONSAIF SYSCFG 764</description>
          <addressOffset>0x2fc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pl_pclk_rate</name>
              <description>u1_pcie_pl_pclk_rate</description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_192</name>
          <description>STG SYSCONSAIF SYSCFG 768</description>
          <addressOffset>0x300</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pl_sideband_in_31_0</name>
              <description>u1_pcie_pl_sideband_in_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_193</name>
          <description>STG SYSCONSAIF SYSCFG 772</description>
          <addressOffset>0x304</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pl_sideband_in_63_32</name>
              <description>u1_pcie_pl_sideband_in_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_194</name>
          <description>STG SYSCONSAIF SYSCFG 776</description>
          <addressOffset>0x308</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pl_sideband_out_31_0</name>
              <description>u1_pcie_pl_sideband_out_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_195</name>
          <description>STG SYSCONSAIF SYSCFG 780</description>
          <addressOffset>0x30c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pl_sideband_out_63_32</name>
              <description>u1_pcie_pl_sideband_out_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_196</name>
          <description>STG SYSCONSAIF SYSCFG 784</description>
          <addressOffset>0x310</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_pl_wake_in</name>
              <description>u1_pcie_pl_wake_in</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_pl_wake_oen</name>
              <description>u1_pcie_pl_wake_oen</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_rx_standby_o</name>
              <description>u1_pcie_rx_standby_o</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_197</name>
          <description>STG SYSCONSAIF SYSCFG 788</description>
          <addressOffset>0x314</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_in_31_0</name>
              <description>u1_pcie_test_in_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_198</name>
          <description>STG SYSCONSAIF SYSCFG 792</description>
          <addressOffset>0x318</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_in_63_32</name>
              <description>u1_pcie_test_in_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_199</name>
          <description>STG SYSCONSAIF SYSCFG 796</description>
          <addressOffset>0x31c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_31_0</name>
              <description>u1_pcie_test_out_bridge_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_200</name>
          <description>STG SYSCONSAIF SYSCFG 800</description>
          <addressOffset>0x320</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_63_32</name>
              <description>u1_pcie_test_out_bridge_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_201</name>
          <description>STG SYSCONSAIF SYSCFG 804</description>
          <addressOffset>0x324</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_95_64</name>
              <description>u1_pcie_test_out_bridge_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_202</name>
          <description>STG SYSCONSAIF SYSCFG 808</description>
          <addressOffset>0x328</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_127_96</name>
              <description>u1_pcie_test_out_bridge_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_203</name>
          <description>STG SYSCONSAIF SYSCFG 812</description>
          <addressOffset>0x32c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_159_128</name>
              <description>u1_pcie_test_out_bridge_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_204</name>
          <description>STG SYSCONSAIF SYSCFG 816</description>
          <addressOffset>0x330</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_191_160</name>
              <description>u1_pcie_test_out_bridge_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_205</name>
          <description>STG SYSCONSAIF SYSCFG 820</description>
          <addressOffset>0x334</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_223_192</name>
              <description>u1_pcie_test_out_bridge_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_206</name>
          <description>STG SYSCONSAIF SYSCFG 824</description>
          <addressOffset>0x338</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_255_224</name>
              <description>u1_pcie_test_out_bridge_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_207</name>
          <description>STG SYSCONSAIF SYSCFG 828</description>
          <addressOffset>0x33c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_287_256</name>
              <description>u1_pcie_test_out_bridge_287_256</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_208</name>
          <description>STG SYSCONSAIF SYSCFG 832</description>
          <addressOffset>0x340</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_319_288</name>
              <description>u1_pcie_test_out_bridge_319_288</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_209</name>
          <description>STG SYSCONSAIF SYSCFG 836</description>
          <addressOffset>0x344</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_351_320</name>
              <description>u1_pcie_test_out_bridge_351_320</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_210</name>
          <description>STG SYSCONSAIF SYSCFG 840</description>
          <addressOffset>0x348</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_383_352</name>
              <description>u1_pcie_test_out_bridge_383_352</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_211</name>
          <description>STG SYSCONSAIF SYSCFG 844</description>
          <addressOffset>0x34c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_415_384</name>
              <description>u1_pcie_test_out_bridge_415_384</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_212</name>
          <description>STG SYSCONSAIF SYSCFG 848</description>
          <addressOffset>0x350</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_447_416</name>
              <description>u1_pcie_test_out_bridge_447_416</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_213</name>
          <description>STG SYSCONSAIF SYSCFG 852</description>
          <addressOffset>0x354</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_479_448</name>
              <description>u1_pcie_test_out_bridge_479_448</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_214</name>
          <description>STG SYSCONSAIF SYSCFG 856</description>
          <addressOffset>0x358</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_bridge_511_480</name>
              <description>u1_pcie_test_out_bridge_511_480</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_215</name>
          <description>STG SYSCONSAIF SYSCFG 860</description>
          <addressOffset>0x35c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_31_0</name>
              <description>u1_pcie_test_out_pcie_31_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_216</name>
          <description>STG SYSCONSAIF SYSCFG 864</description>
          <addressOffset>0x360</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_63_32</name>
              <description>u1_pcie_test_out_pcie_63_32</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_217</name>
          <description>STG SYSCONSAIF SYSCFG 868</description>
          <addressOffset>0x364</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_95_64</name>
              <description>u1_pcie_test_out_pcie_95_64</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_218</name>
          <description>STG SYSCONSAIF SYSCFG 872</description>
          <addressOffset>0x368</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_127_96</name>
              <description>u1_pcie_test_out_pcie_127_96</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_219</name>
          <description>STG SYSCONSAIF SYSCFG 876</description>
          <addressOffset>0x36c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_159_128</name>
              <description>u1_pcie_test_out_pcie_159_128</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_220</name>
          <description>STG SYSCONSAIF SYSCFG 880</description>
          <addressOffset>0x370</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_191_160</name>
              <description>u1_pcie_test_out_pcie_191_160</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_221</name>
          <description>STG SYSCONSAIF SYSCFG 884</description>
          <addressOffset>0x374</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_223_192</name>
              <description>u1_pcie_test_out_pcie_223_192</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_222</name>
          <description>STG SYSCONSAIF SYSCFG 888</description>
          <addressOffset>0x378</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_255_224</name>
              <description>u1_pcie_test_out_pcie_255_224</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_223</name>
          <description>STG SYSCONSAIF SYSCFG 892</description>
          <addressOffset>0x37c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_287_256</name>
              <description>u1_pcie_test_out_pcie_287_256</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_224</name>
          <description>STG SYSCONSAIF SYSCFG 896</description>
          <addressOffset>0x380</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_319_288</name>
              <description>u1_pcie_test_out_pcie_319_288</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_225</name>
          <description>STG SYSCONSAIF SYSCFG 900</description>
          <addressOffset>0x384</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_351_320</name>
              <description>u1_pcie_test_out_pcie_351_320</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_226</name>
          <description>STG SYSCONSAIF SYSCFG 904</description>
          <addressOffset>0x388</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_383_352</name>
              <description>u1_pcie_test_out_pcie_383_352</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_227</name>
          <description>STG SYSCONSAIF SYSCFG 908</description>
          <addressOffset>0x38c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_415_384</name>
              <description>u1_pcie_test_out_pcie_415_384</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_228</name>
          <description>STG SYSCONSAIF SYSCFG 912</description>
          <addressOffset>0x390</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_447_416</name>
              <description>u1_pcie_test_out_pcie_447_416</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_229</name>
          <description>STG SYSCONSAIF SYSCFG 916</description>
          <addressOffset>0x394</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_479_448</name>
              <description>u1_pcie_test_out_pcie_479_448</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_230</name>
          <description>STG SYSCONSAIF SYSCFG 920</description>
          <addressOffset>0x398</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_out_pcie_511_480</name>
              <description>u1_pcie_test_out_pcie_511_480</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_231</name>
          <description>STG SYSCONSAIF SYSCFG 924</description>
          <addressOffset>0x39c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_test_sel</name>
              <description>u1_pcie_test_sel</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_tl_clock_freq</name>
              <description>u1_pcie_tl_clock_freq</description>
              <bitRange>[25:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_232</name>
          <description>STG SYSCONSAIF SYSCFG 928</description>
          <addressOffset>0x3a0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_tl_ctrl_hotplug</name>
              <description>u1_pcie_tl_ctrl_hotplug</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_tl_report_hotplug</name>
              <description>u1_pcie_tl_report_hotplug</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stg_syscfg_233</name>
          <description>STG SYSCONSAIF SYSCFG 932</description>
          <addressOffset>0x3a4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u1_pcie_tx_pattern</name>
              <description>u1_pcie_tx_pattern</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_usb3_bus_width</name>
              <description>u1_pcie_usb3_bus_width</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_usb3_phy_enable</name>
              <description>u1_pcie_usb3_phy_enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_usb3_rate</name>
              <description>u1_pcie_usb3_rate</description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_usb3_rx_standby</name>
              <description>u1_pcie_usb3_rx_standby</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_xwdecerr</name>
              <description>u1_pcie_xwdecerr</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_pcie_xwerrclr</name>
              <description>u1_pcie_xwerrclr</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_pcie_xwslverr</name>
              <description>u1_pcie_xwslverr</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>syscon_0</name>
      <description>From syscon, peripheral generator</description>
      <baseAddress>0x10240000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>uart3</name>
      <description>From snps,dw-apb-uart, peripheral generator</description>
      <baseAddress>0x12000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>uart3</name>
        <value>40</value>
      </interrupt>
      <registers>
        <register>
          <name>rbr</name>
          <description>Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rbr</name>
              <description>Data byte received on the serial input port (sin) in UART mode, or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an over-run error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an over-run error occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>thr</name>
          <description>Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>thr</name>
              <description>Data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] = 0) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dll</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dll</name>
              <description>Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dlh</name>
          <description>Divisor Latch High</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlh</name>
              <description>Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ier</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ptime</name>
              <description>Programmable THRE Interrupt Mode Enable that can be written to only when THRE_MODE_USER == Enabled, always readable. This is used to enable/disable the generation of THRE Interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>edssi</name>
              <description>Enable Modem Status Interrupt. This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>elsi</name>
              <description>Enable Receiver Line Status Interrupt. This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>etbei</name>
              <description>Enable Transmit Holding Register Empty Interrupt. This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>erbfi</name>
              <description>Enable Received Data Available Interrupt. This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 0 = disabled 1 = enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>iir</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>fifose</name>
              <description>FIFOs Enabled. This is used to indicate whether the FIFOs are enabled or disabled. 00 = disabled 11 = enabled</description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>iid</name>
              <description>Interrupt ID. This indicates the highest priority pending interrupt which can be one of the following types: 0000 = modem status 0001 = no interrupt pending 0010 = THR empty 0100 = received data available 0110 = receiver line status 0111 = busy detect 1100 = character timeout The interrupt priorities are split into four levels that are detailed in Table 8 on page 97. Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fcr</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rt</name>
              <description>RCVR Trigger. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>tet</name>
              <description>TX Empty Trigger. Writes have no effect when THRE_MODE_USER == Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>dmam</name>
              <description>DMA Mode. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == No). For details on DMA support, refer to “DMA Support” on page 58. 0 = mode 0 1 = mode 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>xfifor</name>
              <description>XMIT FIFO Reset. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfifor</name>
              <description>RCVR FIFO Reset. This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>fifoe</name>
              <description>FIFO Enable. This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lcr</name>
          <description>Line Control Register</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlab</name>
              <description>Divisor Latch Access Bit. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bc</name>
              <description>Break Control Bit.This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>eps</name>
              <description>Even Parity Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). If set to one, an even number of logic 1s is transmitted or checked. If set to zero, an odd number of logic 1s is transmitted or checked.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pen</name>
              <description>Parity Enable. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 0 = parity disabled 1 = parity enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Number of stop bits. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 0 = 1 stop bit 1 = 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dls</name>
              <description>Data Length Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 00 = 5 bits 01 = 6 bits 10 = 7 bits 11 = 8 bits</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mcr</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sire</name>
              <description>SIR Mode Enable. Writeable only when SIR_MODE == Enabled, always readable. This is used to enable/disable the IrDA SIR Mode features as described in “IrDA 1.0 SIR Protocol” on page 47. 0 = IrDA SIR Mode disabled 1 = IrDA SIR Mode enabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>afce</name>
              <description>Auto Flow Control Enable. Writeable only when AFCE_MODE == Enabled, always readable. When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled as described in “Auto Flow Control” on page 51. 0 = Auto Flow Control Mode disabled 1 = Auto Flow Control Mode enabled</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>lb</name>
              <description>LoopBack Bit. This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out2</name>
              <description>OUT2. This is used to directly control the user-designated Output2 (out2_n) output. The value written to this location is inverted and driven out on out2_n, that is: 0 = out2_n de-asserted (logic 1) 1 = out2_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out2_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out1</name>
              <description>OUT1. This is used to directly control the user-designated Output1 (out1_n) output. The value written to this location is inverted and driven out on out1_n, that is: 0 = out1_n de-asserted (logic 1) 1 = out1_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out1_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rts</name>
              <description>Request to Send. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dtr</name>
              <description>Data Terminal Ready. This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n, that is: 0 = dtr_n de-asserted (logic 1) 1 = dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lsr</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfe</name>
              <description>Receiver FIFO Error bit. This bit is only relevant when FIFO_MODE != NONE AND FIFOs are enabled (FCR[0] set to one). This is used to indicate if there is at least one parity error, framing error, or break indication in the FIFO. 0 = no error in RX FIFO 1 = error in RX FIFO This bit is cleared when the LSR is read and the character with the error is at the top of the receiver FIFO and there are no subsequent errors in the FIFO.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>temt</name>
              <description>Transmitter Empty bit. If in FIFO mode (FIFO_MODE != NONE) and FIFOs enabled (FCR[0] set to one), this bit is set whenever the Transmitter Shift Register and the FIFO are both empty. If in non-FIFO mode or FIFOs are disabled, this bit is set whenever the Transmitter Holding Register and the Transmitter Shift Register are both empty.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre</name>
              <description>Transmit Holding Register Empty bit. If THRE_MODE_USER == Disabled or THRE mode is disabled (IER[7] set to zero) and regardless of FIFO's being implemented/enabled or not, this bit indicates that the THR or TX FIFO is empty. This bit is set whenever data is transferred from the THR or TX FIFO to the transmitter shift register and no new data has been written to the THR or TX FIFO. This also causes a THRE Interrupt to occur, if the THRE Interrupt is enabled. If THRE_MODE_USER == Enabled AND FIFO_MODE != NONE and both modes are active (IER[7] set to one and FCR[0] set to one respectively), the functionality is switched to indicate the transmitter FIFO is full, and no longer controls THRE interrupts, which are then controlled by the FCR[5:4] threshold setting. For more details, see “Programmable THRE Interrupt” on page 54.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bi</name>
              <description>Break Interrupt bit. This is used to indicate the detection of a break sequence on the serial input data. If in UART mode (SIR_MODE == Disabled), it is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. If in infrared mode (SIR_MODE == Enabled), it is set whenever the serial input, sir_in, is continuously pulsed to logic '0' for longer than the sum of start time + data bits + parity + stop bits. A break condition on serial input causes one and only one character, consisting of all zeros, to be received by the UART. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fe</name>
              <description>Framing Error bit. This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no framing error 1 = framing error Reading the LSR clears the FE bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pe</name>
              <description>Parity Error bit. This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no parity error 1 = parity error Reading the LSR clears the PE bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>oe</name>
              <description>Overrun error bit. This is used to indicate the occurrence of an overrun error. This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 0 = no overrun error 1 = overrun error Reading the LSR clears the OE bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dr</name>
              <description>Data Ready bit. This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 0 = no data ready 1 = data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msr</name>
          <description>Line Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dcd</name>
              <description>Data Carrier Detect. This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 0 = dcd_n input is de-asserted (logic 1) 1 = dcd_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DCD is the same as MCR[3] (Out2).</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ri</name>
              <description>Ring Indicator. This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 0 = ri_n input is de-asserted (logic 1) 1 = ri_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), RI is the same as MCR[2] (Out1).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dsr</name>
              <description>Data Set Ready. This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with the DW_apb_uart. 0 = dsr_n input is de-asserted (logic 1) 1 = dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>cts</name>
              <description>Clear to Send. This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with the DW_apb_uart. 0 = cts_n input is de-asserted (logic 1) 1 = cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS)</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddcd</name>
              <description>Delta Data Carrier Detect. This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 0 = no change on dcd_n since last read of MSR 1 = change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. In Loopback Mode (MCR[4] = 1), DDCD reflects changes on MCR[3] (Out2). Note, if the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>teri</name>
              <description>Trailing Edge of Ring Indicator. This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 0 = no change on ri_n since last read of MSR 1 = change on ri_n since last read of MSR Reading the MSR clears the TERI bit. In Loopback Mode (MCR[4] = 1), TERI reflects when MCR[2] (Out1) has changed state from a high to a low.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddsr</name>
              <description>Delta Data Set Ready. This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 0 = no change on dsr_n since last read of MSR 1 = change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR). Note, if the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dcts</name>
              <description>Delta Clear to Send. This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 0 = no change on ctsdsr_n since last read of MSR 1 = change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note, if the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset is removed if the cts_n signal remains asserted.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>scr</name>
          <description>Scratch Pad Register</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>scr</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose in the DW_apb_uart.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdll</name>
          <description>Low Power Divisor Latch Low Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdll</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLL is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdlh</name>
          <description>Low Power Divisor Latch High Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdlh</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLH is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr0</name>
          <description>Shadow Receive Buffer Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr0</name>
          <description>Shadow Transmit Holding Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr1</name>
          <description>Shadow Receive Buffer Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr1</name>
          <description>Shadow Transmit Holding Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr2</name>
          <description>Shadow Receive Buffer Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr2</name>
          <description>Shadow Transmit Holding Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr3</name>
          <description>Shadow Receive Buffer Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr3</name>
          <description>Shadow Transmit Holding Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr4</name>
          <description>Shadow Receive Buffer Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr4</name>
          <description>Shadow Transmit Holding Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr5</name>
          <description>Shadow Receive Buffer Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr5</name>
          <description>Shadow Transmit Holding Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr6</name>
          <description>Shadow Receive Buffer Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr6</name>
          <description>Shadow Transmit Holding Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr7</name>
          <description>Shadow Receive Buffer Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr7</name>
          <description>Shadow Transmit Holding Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr8</name>
          <description>Shadow Receive Buffer Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr8</name>
          <description>Shadow Transmit Holding Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr9</name>
          <description>Shadow Receive Buffer Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr9</name>
          <description>Shadow Transmit Holding Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr10</name>
          <description>Shadow Receive Buffer Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr10</name>
          <description>Shadow Transmit Holding Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr11</name>
          <description>Shadow Receive Buffer Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr11</name>
          <description>Shadow Transmit Holding Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr12</name>
          <description>Shadow Receive Buffer Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr12</name>
          <description>Shadow Transmit Holding Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr13</name>
          <description>Shadow Receive Buffer Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr13</name>
          <description>Shadow Transmit Holding Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr14</name>
          <description>Shadow Receive Buffer Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr14</name>
          <description>Shadow Transmit Holding Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr15</name>
          <description>Shadow Receive Buffer Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr15</name>
          <description>Shadow Transmit Holding Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>far</name>
          <description>FIFO Access Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>far</name>
              <description>Writes have no effect when FIFO_ACCESS == No, always readable. This register is use to enable a FIFO access mode for testing, so that the receive FIFO can be written by the master and the transmit FIFO can be read by the master when FIFOs are implemented and enabled. When FIFOs are not implemented or not enabled it allows the RBR to be written by the master and the THR to be read by the master. 0 = FIFO access mode disabled 1 = FIFO access mode enabled Note, that when the FIFO access mode is enabled/disabled, the control portion of the receive FIFO and transmit FIFO is reset and the FIFOs are treated as empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfr</name>
          <description>Transmit FIFO Read</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfr</name>
              <description>Transmit FIFO Read. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, reading this register gives the data at the top of the transmit FIFO. Each consecutive read pops the transmit FIFO and gives the next data value that is currently at the top of the FIFO. When FIFOs are not implemented or not enabled, reading this register gives the data in the THR.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfw</name>
          <description>Receive FIFO Write</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rffe</name>
              <description>Receive FIFO Framing Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write framing error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write framing error detection information to the RBR.</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfpe</name>
              <description>Receive FIFO Parity Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write parity error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write parity error detection information to the RBR.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfwd</name>
              <description>Receive FIFO Write Data. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, the data that is written to the RFWD is pushed into the receive FIFO. Each consecutive write pushes the new data to the next write location in the receive FIFO. When FIFOs are not implemented or not enabled, the data that is written to the RFWD is pushed into the RBR.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>usr</name>
          <description>UART Status Register</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rff</name>
              <description>Receive FIFO Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO is completely full. 0 = Receive FIFO not full 1 = Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>Receive FIFO Not Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO contains one or more entries. 0 = Receive FIFO is empty 1 = Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO is completely empty. 0 = Transmit FIFO is not empty 1 = Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfnf</name>
              <description>Transmit FIFO Not Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO in not full. 0 = Transmit FIFO is full 1 = Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>busy</name>
              <description>UART Busy. This is indicates that a serial transfer is in progress, when cleared indicates that the DW_apb_uart is idle or inactive. 0 = DW_apb_uart is idle or inactive 1 = DW_apb_uart is busy (actively transferring data) NOTE: It is possible for the UART Busy bit to be cleared even though a new character may have been sent from another device. That is, if the DW_apb_uart has no data in THR and RBR and there is no transmission in progress and a start bit of a new character has just reached the DW_apb_uart. This is due to the fact that a valid start is not seen until the middle of the bit period and this duration is dependent on the baud divisor that has been programmed. If a second system clock has been implemented (CLOCK_MODE == Enabled), the assertion of this bit is also delayed by several cycles of the slower clock.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfl</name>
          <description>Transmit FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfl</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfl</name>
          <description>Receive FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfl</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srr</name>
          <description>Software Reset Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>xfr</name>
              <description>XMIT FIFO Reset. This is a shadow register for the XMIT FIFO Reset bit (FCR[2]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the transmit FIFO. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfr</name>
              <description>RCVR FIFO Reset. This is a shadow register for the RCVR FIFO Reset bit (FCR[1]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the receive FIFO This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>ur</name>
              <description>UART Reset. This asynchronously resets the DW_apb_uart and synchronously removes the reset assertion. For a two clock implementation both pclk and sclk domains are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srts</name>
          <description>Shadow Request to Send: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srts</name>
              <description>Shadow Request to Send. This is a shadow register for the RTS bit (MCR[1]), this can be used to remove the burden of having to performing a read-modify-write on the MCR. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the DW_apb_uart is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] = 0), the rts_n signal is set low by programming MCR[1] (RTS) to a high. In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] = 1) and FIFOs enable (FCR[0] = 1), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). Note that in Loopback mode (MCR[4] = 1), the rts_n output is held inactive-high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sbcr</name>
          <description>Shadow Break Control Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sbcr</name>
              <description>Shadow Break Control Bit. This is a shadow register for the Break bit (LCR[6]), this can be used to remove the burden of having to performing a read modify write on the LCR. This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] = 1) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sdmam</name>
          <description>Shadow DMA Mode: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdmam</name>
              <description>Shadow DMA Mode. This is a shadow register for the DMA mode bit (FCR[3]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the DMA Mode bit gets updated. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == NO). 0 = mode 0 1 = mode 1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sfe</name>
          <description>Shadow FIFO Enable: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sfe</name>
              <description>Shadow FIFO Enable. This is a shadow register for the FIFO enable bit (FCR[0]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the FIFO enable bit gets updated.This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. If this bit is set to zero (disabled) after being enabled then both the XMIT and RCVR controller portion of FIFOs are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srt</name>
          <description>Shadow RCVR Trigger: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srt</name>
              <description>Shadow RCVR Trigger. This is a shadow register for the RCVR trigger bits (FCR[7:6]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the RCVR trigger bit gets updated. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. It also determines when the dma_rx_req_n signal is asserted when DMA Mode (FCR[3]) = 1. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stet</name>
          <description>Shadow TX Empty Trigger: This register is only valid when the DW_apb_uart is configured to have FIFOs implemented (FIFO_MODE != NONE) and THRE interrupt support implemented (THRE_MODE_USER == Enabled) and additional shadow registers implemented (SHADOW == YES). If FIFOs are not implemented or THRE interrupt support is not implemented or shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>stet</name>
              <description>Shadow TX Empty Trigger. This is a shadow register for the TX empty trigger bits (FCR[5:4]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the TX empty trigger bit gets updated. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>htx</name>
          <description>Halt TX</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>htx</name>
              <description>This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 = Halt TX disabled 1 = Halt TX enabled Note, if FIFOs are implemented and not enabled, the setting of the halt TX register has no effect on operation.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dmasa</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dmasa</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition. For example, if the DMA disables the channel, then the DW_apb_uart should clear its request. This causes the TX request, TX single, RX request and RX single signals to de-assert. Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cpr</name>
          <description>Component Parameter Register: This register is only valid when the DW_apb_uart is configured to have the Component Parameter register implemented (UART_ADD_ENCODED_PARAMS == YES). If the Component Parameter register is not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fifo_mode</name>
              <description>0x00 = 0 0x01 = 16 0x02 = 32 to 0x80 = 2048 0x81 - 0xff = reserved</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dma_extra</name>
              <description>0 = false 1 = true</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>uart_add_encoded_params</name>
              <description>0 = false 1 = true</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>shadow</name>
              <description>0 = false 1 = true</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_stat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_access</name>
              <description>0 = false 1 = true</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>additional_feat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_lp_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>afce_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>apb_data_width</name>
              <description>00 = 8 bits 01 = 16 bits 10 = 32 bits 11 = reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ucv</name>
          <description>UART Component Version: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ucv</name>
              <description>ASCII value for each number in the version, followed by *. For example 32_30_31_2A represents the version 2.01*</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ctr</name>
          <description>Component Type Register: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>1146552592</resetValue>
          <fields>
            <field>
              <name>ctr</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>uart4</name>
      <description>From snps,dw-apb-uart, peripheral generator</description>
      <baseAddress>0x12010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>uart4</name>
        <value>41</value>
      </interrupt>
      <registers>
        <register>
          <name>rbr</name>
          <description>Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rbr</name>
              <description>Data byte received on the serial input port (sin) in UART mode, or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an over-run error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an over-run error occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>thr</name>
          <description>Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>thr</name>
              <description>Data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] = 0) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dll</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dll</name>
              <description>Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dlh</name>
          <description>Divisor Latch High</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlh</name>
              <description>Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ier</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ptime</name>
              <description>Programmable THRE Interrupt Mode Enable that can be written to only when THRE_MODE_USER == Enabled, always readable. This is used to enable/disable the generation of THRE Interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>edssi</name>
              <description>Enable Modem Status Interrupt. This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>elsi</name>
              <description>Enable Receiver Line Status Interrupt. This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>etbei</name>
              <description>Enable Transmit Holding Register Empty Interrupt. This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>erbfi</name>
              <description>Enable Received Data Available Interrupt. This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 0 = disabled 1 = enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>iir</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>fifose</name>
              <description>FIFOs Enabled. This is used to indicate whether the FIFOs are enabled or disabled. 00 = disabled 11 = enabled</description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>iid</name>
              <description>Interrupt ID. This indicates the highest priority pending interrupt which can be one of the following types: 0000 = modem status 0001 = no interrupt pending 0010 = THR empty 0100 = received data available 0110 = receiver line status 0111 = busy detect 1100 = character timeout The interrupt priorities are split into four levels that are detailed in Table 8 on page 97. Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fcr</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rt</name>
              <description>RCVR Trigger. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>tet</name>
              <description>TX Empty Trigger. Writes have no effect when THRE_MODE_USER == Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>dmam</name>
              <description>DMA Mode. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == No). For details on DMA support, refer to “DMA Support” on page 58. 0 = mode 0 1 = mode 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>xfifor</name>
              <description>XMIT FIFO Reset. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfifor</name>
              <description>RCVR FIFO Reset. This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>fifoe</name>
              <description>FIFO Enable. This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lcr</name>
          <description>Line Control Register</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlab</name>
              <description>Divisor Latch Access Bit. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bc</name>
              <description>Break Control Bit.This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>eps</name>
              <description>Even Parity Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). If set to one, an even number of logic 1s is transmitted or checked. If set to zero, an odd number of logic 1s is transmitted or checked.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pen</name>
              <description>Parity Enable. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 0 = parity disabled 1 = parity enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Number of stop bits. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 0 = 1 stop bit 1 = 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dls</name>
              <description>Data Length Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 00 = 5 bits 01 = 6 bits 10 = 7 bits 11 = 8 bits</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mcr</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sire</name>
              <description>SIR Mode Enable. Writeable only when SIR_MODE == Enabled, always readable. This is used to enable/disable the IrDA SIR Mode features as described in “IrDA 1.0 SIR Protocol” on page 47. 0 = IrDA SIR Mode disabled 1 = IrDA SIR Mode enabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>afce</name>
              <description>Auto Flow Control Enable. Writeable only when AFCE_MODE == Enabled, always readable. When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled as described in “Auto Flow Control” on page 51. 0 = Auto Flow Control Mode disabled 1 = Auto Flow Control Mode enabled</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>lb</name>
              <description>LoopBack Bit. This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out2</name>
              <description>OUT2. This is used to directly control the user-designated Output2 (out2_n) output. The value written to this location is inverted and driven out on out2_n, that is: 0 = out2_n de-asserted (logic 1) 1 = out2_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out2_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out1</name>
              <description>OUT1. This is used to directly control the user-designated Output1 (out1_n) output. The value written to this location is inverted and driven out on out1_n, that is: 0 = out1_n de-asserted (logic 1) 1 = out1_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out1_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rts</name>
              <description>Request to Send. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dtr</name>
              <description>Data Terminal Ready. This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n, that is: 0 = dtr_n de-asserted (logic 1) 1 = dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lsr</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfe</name>
              <description>Receiver FIFO Error bit. This bit is only relevant when FIFO_MODE != NONE AND FIFOs are enabled (FCR[0] set to one). This is used to indicate if there is at least one parity error, framing error, or break indication in the FIFO. 0 = no error in RX FIFO 1 = error in RX FIFO This bit is cleared when the LSR is read and the character with the error is at the top of the receiver FIFO and there are no subsequent errors in the FIFO.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>temt</name>
              <description>Transmitter Empty bit. If in FIFO mode (FIFO_MODE != NONE) and FIFOs enabled (FCR[0] set to one), this bit is set whenever the Transmitter Shift Register and the FIFO are both empty. If in non-FIFO mode or FIFOs are disabled, this bit is set whenever the Transmitter Holding Register and the Transmitter Shift Register are both empty.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre</name>
              <description>Transmit Holding Register Empty bit. If THRE_MODE_USER == Disabled or THRE mode is disabled (IER[7] set to zero) and regardless of FIFO's being implemented/enabled or not, this bit indicates that the THR or TX FIFO is empty. This bit is set whenever data is transferred from the THR or TX FIFO to the transmitter shift register and no new data has been written to the THR or TX FIFO. This also causes a THRE Interrupt to occur, if the THRE Interrupt is enabled. If THRE_MODE_USER == Enabled AND FIFO_MODE != NONE and both modes are active (IER[7] set to one and FCR[0] set to one respectively), the functionality is switched to indicate the transmitter FIFO is full, and no longer controls THRE interrupts, which are then controlled by the FCR[5:4] threshold setting. For more details, see “Programmable THRE Interrupt” on page 54.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bi</name>
              <description>Break Interrupt bit. This is used to indicate the detection of a break sequence on the serial input data. If in UART mode (SIR_MODE == Disabled), it is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. If in infrared mode (SIR_MODE == Enabled), it is set whenever the serial input, sir_in, is continuously pulsed to logic '0' for longer than the sum of start time + data bits + parity + stop bits. A break condition on serial input causes one and only one character, consisting of all zeros, to be received by the UART. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fe</name>
              <description>Framing Error bit. This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no framing error 1 = framing error Reading the LSR clears the FE bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pe</name>
              <description>Parity Error bit. This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no parity error 1 = parity error Reading the LSR clears the PE bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>oe</name>
              <description>Overrun error bit. This is used to indicate the occurrence of an overrun error. This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 0 = no overrun error 1 = overrun error Reading the LSR clears the OE bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dr</name>
              <description>Data Ready bit. This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 0 = no data ready 1 = data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msr</name>
          <description>Line Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dcd</name>
              <description>Data Carrier Detect. This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 0 = dcd_n input is de-asserted (logic 1) 1 = dcd_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DCD is the same as MCR[3] (Out2).</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ri</name>
              <description>Ring Indicator. This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 0 = ri_n input is de-asserted (logic 1) 1 = ri_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), RI is the same as MCR[2] (Out1).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dsr</name>
              <description>Data Set Ready. This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with the DW_apb_uart. 0 = dsr_n input is de-asserted (logic 1) 1 = dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>cts</name>
              <description>Clear to Send. This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with the DW_apb_uart. 0 = cts_n input is de-asserted (logic 1) 1 = cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS)</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddcd</name>
              <description>Delta Data Carrier Detect. This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 0 = no change on dcd_n since last read of MSR 1 = change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. In Loopback Mode (MCR[4] = 1), DDCD reflects changes on MCR[3] (Out2). Note, if the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>teri</name>
              <description>Trailing Edge of Ring Indicator. This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 0 = no change on ri_n since last read of MSR 1 = change on ri_n since last read of MSR Reading the MSR clears the TERI bit. In Loopback Mode (MCR[4] = 1), TERI reflects when MCR[2] (Out1) has changed state from a high to a low.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddsr</name>
              <description>Delta Data Set Ready. This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 0 = no change on dsr_n since last read of MSR 1 = change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR). Note, if the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dcts</name>
              <description>Delta Clear to Send. This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 0 = no change on ctsdsr_n since last read of MSR 1 = change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note, if the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset is removed if the cts_n signal remains asserted.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>scr</name>
          <description>Scratch Pad Register</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>scr</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose in the DW_apb_uart.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdll</name>
          <description>Low Power Divisor Latch Low Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdll</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLL is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdlh</name>
          <description>Low Power Divisor Latch High Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdlh</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLH is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr0</name>
          <description>Shadow Receive Buffer Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr0</name>
          <description>Shadow Transmit Holding Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr1</name>
          <description>Shadow Receive Buffer Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr1</name>
          <description>Shadow Transmit Holding Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr2</name>
          <description>Shadow Receive Buffer Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr2</name>
          <description>Shadow Transmit Holding Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr3</name>
          <description>Shadow Receive Buffer Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr3</name>
          <description>Shadow Transmit Holding Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr4</name>
          <description>Shadow Receive Buffer Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr4</name>
          <description>Shadow Transmit Holding Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr5</name>
          <description>Shadow Receive Buffer Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr5</name>
          <description>Shadow Transmit Holding Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr6</name>
          <description>Shadow Receive Buffer Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr6</name>
          <description>Shadow Transmit Holding Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr7</name>
          <description>Shadow Receive Buffer Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr7</name>
          <description>Shadow Transmit Holding Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr8</name>
          <description>Shadow Receive Buffer Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr8</name>
          <description>Shadow Transmit Holding Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr9</name>
          <description>Shadow Receive Buffer Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr9</name>
          <description>Shadow Transmit Holding Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr10</name>
          <description>Shadow Receive Buffer Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr10</name>
          <description>Shadow Transmit Holding Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr11</name>
          <description>Shadow Receive Buffer Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr11</name>
          <description>Shadow Transmit Holding Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr12</name>
          <description>Shadow Receive Buffer Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr12</name>
          <description>Shadow Transmit Holding Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr13</name>
          <description>Shadow Receive Buffer Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr13</name>
          <description>Shadow Transmit Holding Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr14</name>
          <description>Shadow Receive Buffer Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr14</name>
          <description>Shadow Transmit Holding Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr15</name>
          <description>Shadow Receive Buffer Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr15</name>
          <description>Shadow Transmit Holding Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>far</name>
          <description>FIFO Access Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>far</name>
              <description>Writes have no effect when FIFO_ACCESS == No, always readable. This register is use to enable a FIFO access mode for testing, so that the receive FIFO can be written by the master and the transmit FIFO can be read by the master when FIFOs are implemented and enabled. When FIFOs are not implemented or not enabled it allows the RBR to be written by the master and the THR to be read by the master. 0 = FIFO access mode disabled 1 = FIFO access mode enabled Note, that when the FIFO access mode is enabled/disabled, the control portion of the receive FIFO and transmit FIFO is reset and the FIFOs are treated as empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfr</name>
          <description>Transmit FIFO Read</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfr</name>
              <description>Transmit FIFO Read. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, reading this register gives the data at the top of the transmit FIFO. Each consecutive read pops the transmit FIFO and gives the next data value that is currently at the top of the FIFO. When FIFOs are not implemented or not enabled, reading this register gives the data in the THR.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfw</name>
          <description>Receive FIFO Write</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rffe</name>
              <description>Receive FIFO Framing Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write framing error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write framing error detection information to the RBR.</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfpe</name>
              <description>Receive FIFO Parity Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write parity error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write parity error detection information to the RBR.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfwd</name>
              <description>Receive FIFO Write Data. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, the data that is written to the RFWD is pushed into the receive FIFO. Each consecutive write pushes the new data to the next write location in the receive FIFO. When FIFOs are not implemented or not enabled, the data that is written to the RFWD is pushed into the RBR.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>usr</name>
          <description>UART Status Register</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rff</name>
              <description>Receive FIFO Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO is completely full. 0 = Receive FIFO not full 1 = Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>Receive FIFO Not Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO contains one or more entries. 0 = Receive FIFO is empty 1 = Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO is completely empty. 0 = Transmit FIFO is not empty 1 = Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfnf</name>
              <description>Transmit FIFO Not Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO in not full. 0 = Transmit FIFO is full 1 = Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>busy</name>
              <description>UART Busy. This is indicates that a serial transfer is in progress, when cleared indicates that the DW_apb_uart is idle or inactive. 0 = DW_apb_uart is idle or inactive 1 = DW_apb_uart is busy (actively transferring data) NOTE: It is possible for the UART Busy bit to be cleared even though a new character may have been sent from another device. That is, if the DW_apb_uart has no data in THR and RBR and there is no transmission in progress and a start bit of a new character has just reached the DW_apb_uart. This is due to the fact that a valid start is not seen until the middle of the bit period and this duration is dependent on the baud divisor that has been programmed. If a second system clock has been implemented (CLOCK_MODE == Enabled), the assertion of this bit is also delayed by several cycles of the slower clock.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfl</name>
          <description>Transmit FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfl</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfl</name>
          <description>Receive FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfl</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srr</name>
          <description>Software Reset Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>xfr</name>
              <description>XMIT FIFO Reset. This is a shadow register for the XMIT FIFO Reset bit (FCR[2]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the transmit FIFO. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfr</name>
              <description>RCVR FIFO Reset. This is a shadow register for the RCVR FIFO Reset bit (FCR[1]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the receive FIFO This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>ur</name>
              <description>UART Reset. This asynchronously resets the DW_apb_uart and synchronously removes the reset assertion. For a two clock implementation both pclk and sclk domains are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srts</name>
          <description>Shadow Request to Send: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srts</name>
              <description>Shadow Request to Send. This is a shadow register for the RTS bit (MCR[1]), this can be used to remove the burden of having to performing a read-modify-write on the MCR. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the DW_apb_uart is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] = 0), the rts_n signal is set low by programming MCR[1] (RTS) to a high. In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] = 1) and FIFOs enable (FCR[0] = 1), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). Note that in Loopback mode (MCR[4] = 1), the rts_n output is held inactive-high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sbcr</name>
          <description>Shadow Break Control Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sbcr</name>
              <description>Shadow Break Control Bit. This is a shadow register for the Break bit (LCR[6]), this can be used to remove the burden of having to performing a read modify write on the LCR. This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] = 1) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sdmam</name>
          <description>Shadow DMA Mode: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdmam</name>
              <description>Shadow DMA Mode. This is a shadow register for the DMA mode bit (FCR[3]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the DMA Mode bit gets updated. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == NO). 0 = mode 0 1 = mode 1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sfe</name>
          <description>Shadow FIFO Enable: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sfe</name>
              <description>Shadow FIFO Enable. This is a shadow register for the FIFO enable bit (FCR[0]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the FIFO enable bit gets updated.This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. If this bit is set to zero (disabled) after being enabled then both the XMIT and RCVR controller portion of FIFOs are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srt</name>
          <description>Shadow RCVR Trigger: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srt</name>
              <description>Shadow RCVR Trigger. This is a shadow register for the RCVR trigger bits (FCR[7:6]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the RCVR trigger bit gets updated. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. It also determines when the dma_rx_req_n signal is asserted when DMA Mode (FCR[3]) = 1. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stet</name>
          <description>Shadow TX Empty Trigger: This register is only valid when the DW_apb_uart is configured to have FIFOs implemented (FIFO_MODE != NONE) and THRE interrupt support implemented (THRE_MODE_USER == Enabled) and additional shadow registers implemented (SHADOW == YES). If FIFOs are not implemented or THRE interrupt support is not implemented or shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>stet</name>
              <description>Shadow TX Empty Trigger. This is a shadow register for the TX empty trigger bits (FCR[5:4]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the TX empty trigger bit gets updated. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>htx</name>
          <description>Halt TX</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>htx</name>
              <description>This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 = Halt TX disabled 1 = Halt TX enabled Note, if FIFOs are implemented and not enabled, the setting of the halt TX register has no effect on operation.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dmasa</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dmasa</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition. For example, if the DMA disables the channel, then the DW_apb_uart should clear its request. This causes the TX request, TX single, RX request and RX single signals to de-assert. Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cpr</name>
          <description>Component Parameter Register: This register is only valid when the DW_apb_uart is configured to have the Component Parameter register implemented (UART_ADD_ENCODED_PARAMS == YES). If the Component Parameter register is not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fifo_mode</name>
              <description>0x00 = 0 0x01 = 16 0x02 = 32 to 0x80 = 2048 0x81 - 0xff = reserved</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dma_extra</name>
              <description>0 = false 1 = true</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>uart_add_encoded_params</name>
              <description>0 = false 1 = true</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>shadow</name>
              <description>0 = false 1 = true</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_stat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_access</name>
              <description>0 = false 1 = true</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>additional_feat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_lp_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>afce_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>apb_data_width</name>
              <description>00 = 8 bits 01 = 16 bits 10 = 32 bits 11 = reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ucv</name>
          <description>UART Component Version: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ucv</name>
              <description>ASCII value for each number in the version, followed by *. For example 32_30_31_2A represents the version 2.01*</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ctr</name>
          <description>Component Type Register: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>1146552592</resetValue>
          <fields>
            <field>
              <name>ctr</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>uart5</name>
      <description>From snps,dw-apb-uart, peripheral generator</description>
      <baseAddress>0x12020000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>uart5</name>
        <value>42</value>
      </interrupt>
      <registers>
        <register>
          <name>rbr</name>
          <description>Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rbr</name>
              <description>Data byte received on the serial input port (sin) in UART mode, or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an over-run error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an over-run error occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>thr</name>
          <description>Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>thr</name>
              <description>Data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] = 0) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dll</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dll</name>
              <description>Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dlh</name>
          <description>Divisor Latch High</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlh</name>
              <description>Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ier</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ptime</name>
              <description>Programmable THRE Interrupt Mode Enable that can be written to only when THRE_MODE_USER == Enabled, always readable. This is used to enable/disable the generation of THRE Interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>edssi</name>
              <description>Enable Modem Status Interrupt. This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>elsi</name>
              <description>Enable Receiver Line Status Interrupt. This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>etbei</name>
              <description>Enable Transmit Holding Register Empty Interrupt. This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 0 = disabled 1 = enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>erbfi</name>
              <description>Enable Received Data Available Interrupt. This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 0 = disabled 1 = enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>iir</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>fifose</name>
              <description>FIFOs Enabled. This is used to indicate whether the FIFOs are enabled or disabled. 00 = disabled 11 = enabled</description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>iid</name>
              <description>Interrupt ID. This indicates the highest priority pending interrupt which can be one of the following types: 0000 = modem status 0001 = no interrupt pending 0010 = THR empty 0100 = received data available 0110 = receiver line status 0111 = busy detect 1100 = character timeout The interrupt priorities are split into four levels that are detailed in Table 8 on page 97. Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fcr</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rt</name>
              <description>RCVR Trigger. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>tet</name>
              <description>TX Empty Trigger. Writes have no effect when THRE_MODE_USER == Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. For details on DMA support, refer to “DMA Support” on page 58. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>dmam</name>
              <description>DMA Mode. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == No). For details on DMA support, refer to “DMA Support” on page 58. 0 = mode 0 1 = mode 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>xfifor</name>
              <description>XMIT FIFO Reset. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfifor</name>
              <description>RCVR FIFO Reset. This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>fifoe</name>
              <description>FIFO Enable. This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lcr</name>
          <description>Line Control Register</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dlab</name>
              <description>Divisor Latch Access Bit. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bc</name>
              <description>Break Control Bit.This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>eps</name>
              <description>Even Parity Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). If set to one, an even number of logic 1s is transmitted or checked. If set to zero, an odd number of logic 1s is transmitted or checked.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pen</name>
              <description>Parity Enable. Writeable only when UART is not busy (USR[0] is zero), always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 0 = parity disabled 1 = parity enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Number of stop bits. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 0 = 1 stop bit 1 = 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dls</name>
              <description>Data Length Select. Writeable only when UART is not busy (USR[0] is zero), always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 00 = 5 bits 01 = 6 bits 10 = 7 bits 11 = 8 bits</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mcr</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sire</name>
              <description>SIR Mode Enable. Writeable only when SIR_MODE == Enabled, always readable. This is used to enable/disable the IrDA SIR Mode features as described in “IrDA 1.0 SIR Protocol” on page 47. 0 = IrDA SIR Mode disabled 1 = IrDA SIR Mode enabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>afce</name>
              <description>Auto Flow Control Enable. Writeable only when AFCE_MODE == Enabled, always readable. When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled as described in “Auto Flow Control” on page 51. 0 = Auto Flow Control Mode disabled 1 = Auto Flow Control Mode enabled</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>lb</name>
              <description>LoopBack Bit. This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out2</name>
              <description>OUT2. This is used to directly control the user-designated Output2 (out2_n) output. The value written to this location is inverted and driven out on out2_n, that is: 0 = out2_n de-asserted (logic 1) 1 = out2_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out2_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>out1</name>
              <description>OUT1. This is used to directly control the user-designated Output1 (out1_n) output. The value written to this location is inverted and driven out on out1_n, that is: 0 = out1_n de-asserted (logic 1) 1 = out1_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the out1_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rts</name>
              <description>Request to Send. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dtr</name>
              <description>Data Terminal Ready. This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n, that is: 0 = dtr_n de-asserted (logic 1) 1 = dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lsr</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfe</name>
              <description>Receiver FIFO Error bit. This bit is only relevant when FIFO_MODE != NONE AND FIFOs are enabled (FCR[0] set to one). This is used to indicate if there is at least one parity error, framing error, or break indication in the FIFO. 0 = no error in RX FIFO 1 = error in RX FIFO This bit is cleared when the LSR is read and the character with the error is at the top of the receiver FIFO and there are no subsequent errors in the FIFO.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>temt</name>
              <description>Transmitter Empty bit. If in FIFO mode (FIFO_MODE != NONE) and FIFOs enabled (FCR[0] set to one), this bit is set whenever the Transmitter Shift Register and the FIFO are both empty. If in non-FIFO mode or FIFOs are disabled, this bit is set whenever the Transmitter Holding Register and the Transmitter Shift Register are both empty.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre</name>
              <description>Transmit Holding Register Empty bit. If THRE_MODE_USER == Disabled or THRE mode is disabled (IER[7] set to zero) and regardless of FIFO's being implemented/enabled or not, this bit indicates that the THR or TX FIFO is empty. This bit is set whenever data is transferred from the THR or TX FIFO to the transmitter shift register and no new data has been written to the THR or TX FIFO. This also causes a THRE Interrupt to occur, if the THRE Interrupt is enabled. If THRE_MODE_USER == Enabled AND FIFO_MODE != NONE and both modes are active (IER[7] set to one and FCR[0] set to one respectively), the functionality is switched to indicate the transmitter FIFO is full, and no longer controls THRE interrupts, which are then controlled by the FCR[5:4] threshold setting. For more details, see “Programmable THRE Interrupt” on page 54.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bi</name>
              <description>Break Interrupt bit. This is used to indicate the detection of a break sequence on the serial input data. If in UART mode (SIR_MODE == Disabled), it is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. If in infrared mode (SIR_MODE == Enabled), it is set whenever the serial input, sir_in, is continuously pulsed to logic '0' for longer than the sum of start time + data bits + parity + stop bits. A break condition on serial input causes one and only one character, consisting of all zeros, to be received by the UART. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fe</name>
              <description>Framing Error bit. This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no framing error 1 = framing error Reading the LSR clears the FE bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pe</name>
              <description>Parity Error bit. This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 0 = no parity error 1 = parity error Reading the LSR clears the PE bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>oe</name>
              <description>Overrun error bit. This is used to indicate the occurrence of an overrun error. This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 0 = no overrun error 1 = overrun error Reading the LSR clears the OE bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dr</name>
              <description>Data Ready bit. This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 0 = no data ready 1 = data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>msr</name>
          <description>Line Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dcd</name>
              <description>Data Carrier Detect. This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 0 = dcd_n input is de-asserted (logic 1) 1 = dcd_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DCD is the same as MCR[3] (Out2).</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ri</name>
              <description>Ring Indicator. This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 0 = ri_n input is de-asserted (logic 1) 1 = ri_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), RI is the same as MCR[2] (Out1).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dsr</name>
              <description>Data Set Ready. This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with the DW_apb_uart. 0 = dsr_n input is de-asserted (logic 1) 1 = dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>cts</name>
              <description>Clear to Send. This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with the DW_apb_uart. 0 = cts_n input is de-asserted (logic 1) 1 = cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS)</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddcd</name>
              <description>Delta Data Carrier Detect. This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 0 = no change on dcd_n since last read of MSR 1 = change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. In Loopback Mode (MCR[4] = 1), DDCD reflects changes on MCR[3] (Out2). Note, if the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>teri</name>
              <description>Trailing Edge of Ring Indicator. This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 0 = no change on ri_n since last read of MSR 1 = change on ri_n since last read of MSR Reading the MSR clears the TERI bit. In Loopback Mode (MCR[4] = 1), TERI reflects when MCR[2] (Out1) has changed state from a high to a low.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ddsr</name>
              <description>Delta Data Set Ready. This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 0 = no change on dsr_n since last read of MSR 1 = change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR). Note, if the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dcts</name>
              <description>Delta Clear to Send. This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 0 = no change on ctsdsr_n since last read of MSR 1 = change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note, if the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset is removed if the cts_n signal remains asserted.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>scr</name>
          <description>Scratch Pad Register</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>scr</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose in the DW_apb_uart.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdll</name>
          <description>Low Power Divisor Latch Low Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdll</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLL is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lpdlh</name>
          <description>Low Power Divisor Latch High Register: This register is only valid when the DW_apb_uart is configured to have SIR low-power reception capabilities implemented (SIR_LP_RX = Yes). If SIR low-power reception capabilities are not implemented, this register does not exist and reading from thsi register address returns zero.</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lpdlh</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write, Low Power Divisor Latch register that contains the baud rate divisor for the UART, which must give a baud rate of 115.2K. This is required for SIR Low Power (minimum pulse width) detection at the receiver. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0]) is 0). The output low-power baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: Low power baud rate = (serial clock frequency)/(16* divisor) Therefore, a divisor must be selected to give a baud rate of 115.2K. NOTE: When the Low Power Divisor Latch registers (LPDLL and LPDLH) are set to 0, the low-power baud clock is disabled and no low-power pulse detection (or any pulse detection) occurs at the receiver. Also, once the LPDLH is set, at least eight clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr0</name>
          <description>Shadow Receive Buffer Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr0</name>
          <description>Shadow Transmit Holding Register 0: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr1</name>
          <description>Shadow Receive Buffer Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr1</name>
          <description>Shadow Transmit Holding Register 1: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr2</name>
          <description>Shadow Receive Buffer Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr2</name>
          <description>Shadow Transmit Holding Register 2: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr3</name>
          <description>Shadow Receive Buffer Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr3</name>
          <description>Shadow Transmit Holding Register 3: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr4</name>
          <description>Shadow Receive Buffer Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr4</name>
          <description>Shadow Transmit Holding Register 4: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr5</name>
          <description>Shadow Receive Buffer Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr5</name>
          <description>Shadow Transmit Holding Register 5: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr6</name>
          <description>Shadow Receive Buffer Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr6</name>
          <description>Shadow Transmit Holding Register 6: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr7</name>
          <description>Shadow Receive Buffer Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr7</name>
          <description>Shadow Transmit Holding Register 7: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr8</name>
          <description>Shadow Receive Buffer Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr8</name>
          <description>Shadow Transmit Holding Register 8: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr9</name>
          <description>Shadow Receive Buffer Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr9</name>
          <description>Shadow Transmit Holding Register 9: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr10</name>
          <description>Shadow Receive Buffer Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr10</name>
          <description>Shadow Transmit Holding Register 10: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr11</name>
          <description>Shadow Receive Buffer Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr11</name>
          <description>Shadow Transmit Holding Register 11: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr12</name>
          <description>Shadow Receive Buffer Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr12</name>
          <description>Shadow Transmit Holding Register 12: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr13</name>
          <description>Shadow Receive Buffer Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr13</name>
          <description>Shadow Transmit Holding Register 13: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr14</name>
          <description>Shadow Receive Buffer Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr14</name>
          <description>Shadow Transmit Holding Register 14: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srbr15</name>
          <description>Shadow Receive Buffer Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srbr</name>
              <description>This is a shadow register for the RBR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to zero), the data in the RBR must be read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO are preserved, but any incoming data is lost. An overrun error also occurs.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sthr15</name>
          <description>Shadow Transmit Holding Register 15: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sthr</name>
              <description>This is a shadow register for the THR and has been allocated sixteen 32-bit locations so as to accommodate burst accesses from the master. This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set. If in non-FIFO mode or FIFOs are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten. If in FIFO mode and FIFOs are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that you set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>far</name>
          <description>FIFO Access Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>far</name>
              <description>Writes have no effect when FIFO_ACCESS == No, always readable. This register is use to enable a FIFO access mode for testing, so that the receive FIFO can be written by the master and the transmit FIFO can be read by the master when FIFOs are implemented and enabled. When FIFOs are not implemented or not enabled it allows the RBR to be written by the master and the THR to be read by the master. 0 = FIFO access mode disabled 1 = FIFO access mode enabled Note, that when the FIFO access mode is enabled/disabled, the control portion of the receive FIFO and transmit FIFO is reset and the FIFOs are treated as empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfr</name>
          <description>Transmit FIFO Read</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfr</name>
              <description>Transmit FIFO Read. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, reading this register gives the data at the top of the transmit FIFO. Each consecutive read pops the transmit FIFO and gives the next data value that is currently at the top of the FIFO. When FIFOs are not implemented or not enabled, reading this register gives the data in the THR.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfw</name>
          <description>Receive FIFO Write</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rffe</name>
              <description>Receive FIFO Framing Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write framing error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write framing error detection information to the RBR.</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfpe</name>
              <description>Receive FIFO Parity Error. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, this bit is used to write parity error detection information to the receive FIFO. When FIFOs are not implemented or not enabled, this bit is used to write parity error detection information to the RBR.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfwd</name>
              <description>Receive FIFO Write Data. These bits are only valid when FIFO access mode is enabled (FAR[0] is set to one). When FIFOs are implemented and enabled, the data that is written to the RFWD is pushed into the receive FIFO. Each consecutive write pushes the new data to the next write location in the receive FIFO. When FIFOs are not implemented or not enabled, the data that is written to the RFWD is pushed into the RBR.</description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>usr</name>
          <description>UART Status Register</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rff</name>
              <description>Receive FIFO Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO is completely full. 0 = Receive FIFO not full 1 = Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>Receive FIFO Not Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the receive FIFO contains one or more entries. 0 = Receive FIFO is empty 1 = Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO Empty. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO is completely empty. 0 = Transmit FIFO is not empty 1 = Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfnf</name>
              <description>Transmit FIFO Not Full. This bit is only valid when FIFO_STAT == YES. This is used to indicate that the transmit FIFO in not full. 0 = Transmit FIFO is full 1 = Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>busy</name>
              <description>UART Busy. This is indicates that a serial transfer is in progress, when cleared indicates that the DW_apb_uart is idle or inactive. 0 = DW_apb_uart is idle or inactive 1 = DW_apb_uart is busy (actively transferring data) NOTE: It is possible for the UART Busy bit to be cleared even though a new character may have been sent from another device. That is, if the DW_apb_uart has no data in THR and RBR and there is no transmission in progress and a start bit of a new character has just reached the DW_apb_uart. This is due to the fact that a valid start is not seen until the middle of the bit period and this duration is dependent on the baud divisor that has been programmed. If a second system clock has been implemented (CLOCK_MODE == Enabled), the assertion of this bit is also delayed by several cycles of the slower clock.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tfl</name>
          <description>Transmit FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfl</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rfl</name>
          <description>Receive FIFO Level: This register is only valid when the DW_apb_uart is configured to have additional FIFO status registers implemented (FIFO_STAT == YES). If status registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rfl</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srr</name>
          <description>Software Reset Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>xfr</name>
              <description>XMIT FIFO Reset. This is a shadow register for the XMIT FIFO Reset bit (FCR[2]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the transmit FIFO. This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rfr</name>
              <description>RCVR FIFO Reset. This is a shadow register for the RCVR FIFO Reset bit (FCR[1]). This can be used to remove the burden on software having to store previously written FCR values (which are pretty static) just to reset the receive FIFO This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>ur</name>
              <description>UART Reset. This asynchronously resets the DW_apb_uart and synchronously removes the reset assertion. For a two clock implementation both pclk and sclk domains are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srts</name>
          <description>Shadow Request to Send: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srts</name>
              <description>Shadow Request to Send. This is a shadow register for the RTS bit (MCR[1]), this can be used to remove the burden of having to performing a read-modify-write on the MCR. This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the DW_apb_uart is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] = 0), the rts_n signal is set low by programming MCR[1] (RTS) to a high. In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] = 1) and FIFOs enable (FCR[0] = 1), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). Note that in Loopback mode (MCR[4] = 1), the rts_n output is held inactive-high while the value of this location is internally looped back to an input.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sbcr</name>
          <description>Shadow Break Control Register: This register is only valid when the DW_apb_uart is configured to have additional shadow registers implemented (SHADOW == YES). If shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sbcr</name>
              <description>Shadow Break Control Bit. This is a shadow register for the Break bit (LCR[6]), this can be used to remove the burden of having to performing a read modify write on the LCR. This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] = 1) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sdmam</name>
          <description>Shadow DMA Mode: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdmam</name>
              <description>Shadow DMA Mode. This is a shadow register for the DMA mode bit (FCR[3]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the DMA Mode bit gets updated. This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == NO). 0 = mode 0 1 = mode 1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sfe</name>
          <description>Shadow FIFO Enable: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sfe</name>
              <description>Shadow FIFO Enable. This is a shadow register for the FIFO enable bit (FCR[0]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the FIFO enable bit gets updated.This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. If this bit is set to zero (disabled) after being enabled then both the XMIT and RCVR controller portion of FIFOs are reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>srt</name>
          <description>Shadow RCVR Trigger: This register is only valid when the DW_apb_uart is configured to have additional FIFO registers implemented (FIFO_MODE != None) and additional shadow registers implemented (SHADOW == YES). If these registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>srt</name>
              <description>Shadow RCVR Trigger. This is a shadow register for the RCVR trigger bits (FCR[7:6]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the RCVR trigger bit gets updated. This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. It also determines when the dma_rx_req_n signal is asserted when DMA Mode (FCR[3]) = 1. The following trigger levels are supported: 00 = 1 character in the FIFO 01 = FIFO ¼ full 10 = FIFO ½ full 11 = FIFO 2 less than full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stet</name>
          <description>Shadow TX Empty Trigger: This register is only valid when the DW_apb_uart is configured to have FIFOs implemented (FIFO_MODE != NONE) and THRE interrupt support implemented (THRE_MODE_USER == Enabled) and additional shadow registers implemented (SHADOW == YES). If FIFOs are not implemented or THRE interrupt support is not implemented or shadow registers are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>stet</name>
              <description>Shadow TX Empty Trigger. This is a shadow register for the TX empty trigger bits (FCR[5:4]). This can be used to remove the burden of having to store the previously written value to the FCR in memory and having to mask this value so that only the TX empty trigger bit gets updated. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. The following trigger levels are supported: 00 = FIFO empty 01 = 2 characters in the FIFO 10 = FIFO ¼ full 11 = FIFO ½ full</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>htx</name>
          <description>Halt TX</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>htx</name>
              <description>This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 = Halt TX disabled 1 = Halt TX enabled Note, if FIFOs are implemented and not enabled, the setting of the halt TX register has no effect on operation.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dmasa</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dmasa</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition. For example, if the DMA disables the channel, then the DW_apb_uart should clear its request. This causes the TX request, TX single, RX request and RX single signals to de-assert. Note that this bit is 'self-clearing'. It is not necessary to clear this bit.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cpr</name>
          <description>Component Parameter Register: This register is only valid when the DW_apb_uart is configured to have the Component Parameter register implemented (UART_ADD_ENCODED_PARAMS == YES). If the Component Parameter register is not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fifo_mode</name>
              <description>0x00 = 0 0x01 = 16 0x02 = 32 to 0x80 = 2048 0x81 - 0xff = reserved</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>dma_extra</name>
              <description>0 = false 1 = true</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>uart_add_encoded_params</name>
              <description>0 = false 1 = true</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>shadow</name>
              <description>0 = false 1 = true</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_stat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_access</name>
              <description>0 = false 1 = true</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>additional_feat</name>
              <description>0 = false 1 = true</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_lp_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sir_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>thre_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>afce_mode</name>
              <description>0 = false 1 = true</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>apb_data_width</name>
              <description>00 = 8 bits 01 = 16 bits 10 = 32 bits 11 = reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ucv</name>
          <description>UART Component Version: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ucv</name>
              <description>ASCII value for each number in the version, followed by *. For example 32_30_31_2A represents the version 2.01*</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ctr</name>
          <description>Component Type Register: This register is only valid when the DW_apb_uart is configured to have additional features implemented (ADDITIONAL_FEATURES == YES). If additional features are not implemented, this register does not exist and reading from this register address returns zero.</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>1146552592</resetValue>
          <fields>
            <field>
              <name>ctr</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>i2c3</name>
      <description>From snps,designware-i2c, peripheral generator</description>
      <baseAddress>0x12030000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>i2c3</name>
        <value>43</value>
      </interrupt>
      <registers>
        <register>
          <name>con</name>
          <description>DesignWare I2C CON</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>master</name>
              <description>I2C Master Connection - 0: Slave, 1: Master</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>speed</name>
              <description>I2C Speed - 01: Standard, 10: Fast, 11: High</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_10bitaddr</name>
              <description>I2C Slave 10-bit Address - 0: False, 1: True</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_10bitaddr</name>
              <description>I2C Master 10-bit Address - 0: False, 1: True</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_en</name>
              <description>I2C Restart Enable - 0: False, 1: True</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_disable</name>
              <description>I2C Slave Disable - 0: False, 1: True</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det_ifaddressed</name>
              <description>I2C Stop DET If Addressed - 0: False, 1: True</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty_ctrl</name>
              <description>I2C TX Empty Control - 0: False, 1: True</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_fifo_full_hld_ctrl</name>
              <description>I2C RX FIFO Full Hold Control - 0: False, 1: True</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bus_clear_ctrl</name>
              <description>I2C Bus Clear Control - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tar</name>
          <description>DesignWare I2C TAR</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Target address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Target address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mode</name>
              <description>Target addressing mode - 0: 7-bit, 1: 10-bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sar</name>
          <description>DesignWare I2C SAR</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Slave address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Slave address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data_cmd</name>
          <description>DesignWare I2C Data Command</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dat</name>
              <description>Data Command Data Byte</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>read</name>
              <description>Data Command READ Bit - 0: Write, 1: Read</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Data Command STOP Bit - 0: Non-terminal DATA command byte, 1: Terminal DATA command byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart</name>
              <description>Data Command RESTART Bit - 0: Do not restart the transfer, 1: Restart the transfer</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>first_data_byte</name>
              <description>Data Command First Data Byte - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_hcnt</name>
          <description>DesignWare I2C SS SCL HCNT</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_hcnt</name>
              <description>ss_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_lcnt</name>
          <description>DesignWare I2C SS SCL LCNT</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_lcnt</name>
              <description>ss_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_hcnt</name>
          <description>DesignWare I2C FS SCL HCNT</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_hcnt</name>
              <description>fs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_lcnt</name>
          <description>DesignWare I2C FS SCL LCNT</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_lcnt</name>
              <description>fs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_hcnt</name>
          <description>DesignWare I2C HS SCL HCNT</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_hcnt</name>
              <description>hs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_lcnt</name>
          <description>DesignWare I2C HS SCL LCNT</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_lcnt</name>
              <description>hs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_stat</name>
          <description>DesignWare I2C Interrupt Status</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_mask</name>
          <description>DesignWare I2C Interrupt Mask</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>raw_intr_stat</name>
          <description>DesignWare I2C Raw Interrupt Status</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_tl</name>
          <description>DesignWare I2C RX TL</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_tl</name>
              <description>rx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_tl</name>
          <description>DesignWare I2C TX TL</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tx_tl</name>
              <description>tx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_intr</name>
          <description>DesignWare I2C Clear Interrrupt</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_under</name>
          <description>DesignWare I2C Clear RX Underrun</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_under</name>
              <description>clr_rx_under</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_over</name>
          <description>DesignWare I2C Clear RX Overrun</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_over</name>
              <description>clr_rx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_over</name>
          <description>DesignWare I2C Clear TX Overrun</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_over</name>
              <description>clr_tx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rd_req</name>
          <description>DesignWare I2C Clear Read Request</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rd_req</name>
              <description>clr_rd_req</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_abrt</name>
          <description>DesignWare I2C Clear TX Abort</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_abrt</name>
              <description>clr_tx_abrt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_done</name>
          <description>DesignWare I2C Clear RX Done</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_done</name>
              <description>clr_rx_done</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_activity</name>
          <description>DesignWare I2C Clear Activity</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_activity</name>
              <description>clr_activity</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_stop_det</name>
          <description>DesignWare I2C Clear Stop DET</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_stop_det</name>
              <description>clr_stop_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_start_det</name>
          <description>DesignWare I2C Clear Start DET</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_start_det</name>
              <description>clr_start_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_gen_call</name>
          <description>DesignWare I2C Clear General Call</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_gen_call</name>
              <description>clr_gen_call</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>DesignWare I2C Enable</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>abort</name>
              <description>abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>DesignWare I2C Status</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>txflr</name>
          <description>DesignWare I2C TX Failure</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>txflr</name>
              <description>txflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rxflr</name>
          <description>DesignWare I2C RX Failure</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxflr</name>
              <description>rxflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sda_hold</name>
          <description>DesignWare I2C SDA Hold</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sda_hold</name>
              <description>sda_hold</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_abrt_source</name>
          <description>DesignWare I2C TX Abort Source</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>b7_addr_noack</name>
              <description>b7_addr_noack</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr1_noack</name>
              <description>b10_addr1_noack</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr2_noack</name>
              <description>b10_addr2_noack</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txdata_noack</name>
              <description>txdata_noack</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_noack</name>
              <description>gcall_noack</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_read</name>
              <description>gcall_read</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_ackdet</name>
              <description>sbyte_ackdet</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_norstrt</name>
              <description>sbyte_norstrt</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_rd_norstrt</name>
              <description>b10_rd_norstrt</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_dis</name>
              <description>master_dis</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>arb_lost</name>
              <description>arb_lost</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_flush_txfifo</name>
              <description>slave_flush_txfifo</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_arblost</name>
              <description>slave_arblost</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_rd_intx</name>
              <description>slave_rd_intx</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_status</name>
          <description>DesignWare I2C Enable Status</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_restart_det</name>
          <description>DesignWare I2C Clear Restart DET</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_restart_det</name>
              <description>clr_restart_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_param_1</name>
          <description>DesignWare I2C Compatibility Parameter 1</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>speed</name>
              <description>Speed mask - 01: Standard, 10: Full, 11: High</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_version</name>
          <description>DesignWare I2C Compatibility Version</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_version</name>
              <description>comp_version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_type</name>
          <description>DesignWare I2C Compatibility Type</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_type</name>
              <description>comp_type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>i2c4</name>
      <description>From snps,designware-i2c, peripheral generator</description>
      <baseAddress>0x12040000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>i2c4</name>
        <value>44</value>
      </interrupt>
      <registers>
        <register>
          <name>con</name>
          <description>DesignWare I2C CON</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>master</name>
              <description>I2C Master Connection - 0: Slave, 1: Master</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>speed</name>
              <description>I2C Speed - 01: Standard, 10: Fast, 11: High</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_10bitaddr</name>
              <description>I2C Slave 10-bit Address - 0: False, 1: True</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_10bitaddr</name>
              <description>I2C Master 10-bit Address - 0: False, 1: True</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_en</name>
              <description>I2C Restart Enable - 0: False, 1: True</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_disable</name>
              <description>I2C Slave Disable - 0: False, 1: True</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det_ifaddressed</name>
              <description>I2C Stop DET If Addressed - 0: False, 1: True</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty_ctrl</name>
              <description>I2C TX Empty Control - 0: False, 1: True</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_fifo_full_hld_ctrl</name>
              <description>I2C RX FIFO Full Hold Control - 0: False, 1: True</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bus_clear_ctrl</name>
              <description>I2C Bus Clear Control - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tar</name>
          <description>DesignWare I2C TAR</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Target address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Target address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mode</name>
              <description>Target addressing mode - 0: 7-bit, 1: 10-bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sar</name>
          <description>DesignWare I2C SAR</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Slave address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Slave address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data_cmd</name>
          <description>DesignWare I2C Data Command</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dat</name>
              <description>Data Command Data Byte</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>read</name>
              <description>Data Command READ Bit - 0: Write, 1: Read</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Data Command STOP Bit - 0: Non-terminal DATA command byte, 1: Terminal DATA command byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart</name>
              <description>Data Command RESTART Bit - 0: Do not restart the transfer, 1: Restart the transfer</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>first_data_byte</name>
              <description>Data Command First Data Byte - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_hcnt</name>
          <description>DesignWare I2C SS SCL HCNT</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_hcnt</name>
              <description>ss_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_lcnt</name>
          <description>DesignWare I2C SS SCL LCNT</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_lcnt</name>
              <description>ss_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_hcnt</name>
          <description>DesignWare I2C FS SCL HCNT</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_hcnt</name>
              <description>fs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_lcnt</name>
          <description>DesignWare I2C FS SCL LCNT</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_lcnt</name>
              <description>fs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_hcnt</name>
          <description>DesignWare I2C HS SCL HCNT</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_hcnt</name>
              <description>hs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_lcnt</name>
          <description>DesignWare I2C HS SCL LCNT</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_lcnt</name>
              <description>hs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_stat</name>
          <description>DesignWare I2C Interrupt Status</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_mask</name>
          <description>DesignWare I2C Interrupt Mask</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>raw_intr_stat</name>
          <description>DesignWare I2C Raw Interrupt Status</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_tl</name>
          <description>DesignWare I2C RX TL</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_tl</name>
              <description>rx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_tl</name>
          <description>DesignWare I2C TX TL</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tx_tl</name>
              <description>tx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_intr</name>
          <description>DesignWare I2C Clear Interrrupt</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_under</name>
          <description>DesignWare I2C Clear RX Underrun</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_under</name>
              <description>clr_rx_under</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_over</name>
          <description>DesignWare I2C Clear RX Overrun</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_over</name>
              <description>clr_rx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_over</name>
          <description>DesignWare I2C Clear TX Overrun</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_over</name>
              <description>clr_tx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rd_req</name>
          <description>DesignWare I2C Clear Read Request</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rd_req</name>
              <description>clr_rd_req</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_abrt</name>
          <description>DesignWare I2C Clear TX Abort</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_abrt</name>
              <description>clr_tx_abrt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_done</name>
          <description>DesignWare I2C Clear RX Done</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_done</name>
              <description>clr_rx_done</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_activity</name>
          <description>DesignWare I2C Clear Activity</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_activity</name>
              <description>clr_activity</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_stop_det</name>
          <description>DesignWare I2C Clear Stop DET</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_stop_det</name>
              <description>clr_stop_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_start_det</name>
          <description>DesignWare I2C Clear Start DET</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_start_det</name>
              <description>clr_start_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_gen_call</name>
          <description>DesignWare I2C Clear General Call</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_gen_call</name>
              <description>clr_gen_call</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>DesignWare I2C Enable</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>abort</name>
              <description>abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>DesignWare I2C Status</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>txflr</name>
          <description>DesignWare I2C TX Failure</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>txflr</name>
              <description>txflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rxflr</name>
          <description>DesignWare I2C RX Failure</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxflr</name>
              <description>rxflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sda_hold</name>
          <description>DesignWare I2C SDA Hold</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sda_hold</name>
              <description>sda_hold</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_abrt_source</name>
          <description>DesignWare I2C TX Abort Source</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>b7_addr_noack</name>
              <description>b7_addr_noack</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr1_noack</name>
              <description>b10_addr1_noack</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr2_noack</name>
              <description>b10_addr2_noack</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txdata_noack</name>
              <description>txdata_noack</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_noack</name>
              <description>gcall_noack</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_read</name>
              <description>gcall_read</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_ackdet</name>
              <description>sbyte_ackdet</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_norstrt</name>
              <description>sbyte_norstrt</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_rd_norstrt</name>
              <description>b10_rd_norstrt</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_dis</name>
              <description>master_dis</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>arb_lost</name>
              <description>arb_lost</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_flush_txfifo</name>
              <description>slave_flush_txfifo</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_arblost</name>
              <description>slave_arblost</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_rd_intx</name>
              <description>slave_rd_intx</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_status</name>
          <description>DesignWare I2C Enable Status</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_restart_det</name>
          <description>DesignWare I2C Clear Restart DET</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_restart_det</name>
              <description>clr_restart_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_param_1</name>
          <description>DesignWare I2C Compatibility Parameter 1</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>speed</name>
              <description>Speed mask - 01: Standard, 10: Full, 11: High</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_version</name>
          <description>DesignWare I2C Compatibility Version</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_version</name>
              <description>comp_version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_type</name>
          <description>DesignWare I2C Compatibility Type</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_type</name>
              <description>comp_type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>i2c5</name>
      <description>From snps,designware-i2c, peripheral generator</description>
      <baseAddress>0x12050000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>i2c5</name>
        <value>45</value>
      </interrupt>
      <registers>
        <register>
          <name>con</name>
          <description>DesignWare I2C CON</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>master</name>
              <description>I2C Master Connection - 0: Slave, 1: Master</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>speed</name>
              <description>I2C Speed - 01: Standard, 10: Fast, 11: High</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_10bitaddr</name>
              <description>I2C Slave 10-bit Address - 0: False, 1: True</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_10bitaddr</name>
              <description>I2C Master 10-bit Address - 0: False, 1: True</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_en</name>
              <description>I2C Restart Enable - 0: False, 1: True</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_disable</name>
              <description>I2C Slave Disable - 0: False, 1: True</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det_ifaddressed</name>
              <description>I2C Stop DET If Addressed - 0: False, 1: True</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty_ctrl</name>
              <description>I2C TX Empty Control - 0: False, 1: True</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_fifo_full_hld_ctrl</name>
              <description>I2C RX FIFO Full Hold Control - 0: False, 1: True</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bus_clear_ctrl</name>
              <description>I2C Bus Clear Control - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tar</name>
          <description>DesignWare I2C TAR</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Target address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Target address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mode</name>
              <description>Target addressing mode - 0: 7-bit, 1: 10-bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sar</name>
          <description>DesignWare I2C SAR</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Slave address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Slave address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data_cmd</name>
          <description>DesignWare I2C Data Command</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dat</name>
              <description>Data Command Data Byte</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>read</name>
              <description>Data Command READ Bit - 0: Write, 1: Read</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Data Command STOP Bit - 0: Non-terminal DATA command byte, 1: Terminal DATA command byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart</name>
              <description>Data Command RESTART Bit - 0: Do not restart the transfer, 1: Restart the transfer</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>first_data_byte</name>
              <description>Data Command First Data Byte - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_hcnt</name>
          <description>DesignWare I2C SS SCL HCNT</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_hcnt</name>
              <description>ss_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_lcnt</name>
          <description>DesignWare I2C SS SCL LCNT</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_lcnt</name>
              <description>ss_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_hcnt</name>
          <description>DesignWare I2C FS SCL HCNT</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_hcnt</name>
              <description>fs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_lcnt</name>
          <description>DesignWare I2C FS SCL LCNT</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_lcnt</name>
              <description>fs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_hcnt</name>
          <description>DesignWare I2C HS SCL HCNT</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_hcnt</name>
              <description>hs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_lcnt</name>
          <description>DesignWare I2C HS SCL LCNT</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_lcnt</name>
              <description>hs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_stat</name>
          <description>DesignWare I2C Interrupt Status</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_mask</name>
          <description>DesignWare I2C Interrupt Mask</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>raw_intr_stat</name>
          <description>DesignWare I2C Raw Interrupt Status</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_tl</name>
          <description>DesignWare I2C RX TL</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_tl</name>
              <description>rx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_tl</name>
          <description>DesignWare I2C TX TL</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tx_tl</name>
              <description>tx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_intr</name>
          <description>DesignWare I2C Clear Interrrupt</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_under</name>
          <description>DesignWare I2C Clear RX Underrun</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_under</name>
              <description>clr_rx_under</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_over</name>
          <description>DesignWare I2C Clear RX Overrun</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_over</name>
              <description>clr_rx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_over</name>
          <description>DesignWare I2C Clear TX Overrun</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_over</name>
              <description>clr_tx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rd_req</name>
          <description>DesignWare I2C Clear Read Request</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rd_req</name>
              <description>clr_rd_req</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_abrt</name>
          <description>DesignWare I2C Clear TX Abort</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_abrt</name>
              <description>clr_tx_abrt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_done</name>
          <description>DesignWare I2C Clear RX Done</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_done</name>
              <description>clr_rx_done</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_activity</name>
          <description>DesignWare I2C Clear Activity</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_activity</name>
              <description>clr_activity</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_stop_det</name>
          <description>DesignWare I2C Clear Stop DET</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_stop_det</name>
              <description>clr_stop_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_start_det</name>
          <description>DesignWare I2C Clear Start DET</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_start_det</name>
              <description>clr_start_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_gen_call</name>
          <description>DesignWare I2C Clear General Call</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_gen_call</name>
              <description>clr_gen_call</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>DesignWare I2C Enable</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>abort</name>
              <description>abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>DesignWare I2C Status</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>txflr</name>
          <description>DesignWare I2C TX Failure</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>txflr</name>
              <description>txflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rxflr</name>
          <description>DesignWare I2C RX Failure</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxflr</name>
              <description>rxflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sda_hold</name>
          <description>DesignWare I2C SDA Hold</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sda_hold</name>
              <description>sda_hold</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_abrt_source</name>
          <description>DesignWare I2C TX Abort Source</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>b7_addr_noack</name>
              <description>b7_addr_noack</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr1_noack</name>
              <description>b10_addr1_noack</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr2_noack</name>
              <description>b10_addr2_noack</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txdata_noack</name>
              <description>txdata_noack</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_noack</name>
              <description>gcall_noack</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_read</name>
              <description>gcall_read</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_ackdet</name>
              <description>sbyte_ackdet</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_norstrt</name>
              <description>sbyte_norstrt</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_rd_norstrt</name>
              <description>b10_rd_norstrt</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_dis</name>
              <description>master_dis</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>arb_lost</name>
              <description>arb_lost</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_flush_txfifo</name>
              <description>slave_flush_txfifo</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_arblost</name>
              <description>slave_arblost</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_rd_intx</name>
              <description>slave_rd_intx</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_status</name>
          <description>DesignWare I2C Enable Status</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_restart_det</name>
          <description>DesignWare I2C Clear Restart DET</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_restart_det</name>
              <description>clr_restart_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_param_1</name>
          <description>DesignWare I2C Compatibility Parameter 1</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>speed</name>
              <description>Speed mask - 01: Standard, 10: Full, 11: High</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_version</name>
          <description>DesignWare I2C Compatibility Version</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_version</name>
              <description>comp_version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_type</name>
          <description>DesignWare I2C Compatibility Type</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_type</name>
              <description>comp_type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>x_powers_axp15060_0</name>
      <description>From x-powers,axp15060, peripheral generator</description>
      <baseAddress>0x36</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x36</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>i2c6</name>
      <description>From snps,designware-i2c, peripheral generator</description>
      <baseAddress>0x12060000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>i2c6</name>
        <value>46</value>
      </interrupt>
      <registers>
        <register>
          <name>con</name>
          <description>DesignWare I2C CON</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>master</name>
              <description>I2C Master Connection - 0: Slave, 1: Master</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>speed</name>
              <description>I2C Speed - 01: Standard, 10: Fast, 11: High</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_10bitaddr</name>
              <description>I2C Slave 10-bit Address - 0: False, 1: True</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_10bitaddr</name>
              <description>I2C Master 10-bit Address - 0: False, 1: True</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_en</name>
              <description>I2C Restart Enable - 0: False, 1: True</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_disable</name>
              <description>I2C Slave Disable - 0: False, 1: True</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det_ifaddressed</name>
              <description>I2C Stop DET If Addressed - 0: False, 1: True</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty_ctrl</name>
              <description>I2C TX Empty Control - 0: False, 1: True</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_fifo_full_hld_ctrl</name>
              <description>I2C RX FIFO Full Hold Control - 0: False, 1: True</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bus_clear_ctrl</name>
              <description>I2C Bus Clear Control - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tar</name>
          <description>DesignWare I2C TAR</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Target address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Target address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mode</name>
              <description>Target addressing mode - 0: 7-bit, 1: 10-bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sar</name>
          <description>DesignWare I2C SAR</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address_7bit</name>
              <description>Slave address, 7-bit mode</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>address_10bit</name>
              <description>Slave address, 10-bit mode</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data_cmd</name>
          <description>DesignWare I2C Data Command</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dat</name>
              <description>Data Command Data Byte</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>read</name>
              <description>Data Command READ Bit - 0: Write, 1: Read</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop</name>
              <description>Data Command STOP Bit - 0: Non-terminal DATA command byte, 1: Terminal DATA command byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart</name>
              <description>Data Command RESTART Bit - 0: Do not restart the transfer, 1: Restart the transfer</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>first_data_byte</name>
              <description>Data Command First Data Byte - 0: False, 1: True</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_hcnt</name>
          <description>DesignWare I2C SS SCL HCNT</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_hcnt</name>
              <description>ss_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ss_scl_lcnt</name>
          <description>DesignWare I2C SS SCL LCNT</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ss_scl_lcnt</name>
              <description>ss_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_hcnt</name>
          <description>DesignWare I2C FS SCL HCNT</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_hcnt</name>
              <description>fs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fs_scl_lcnt</name>
          <description>DesignWare I2C FS SCL LCNT</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>fs_scl_lcnt</name>
              <description>fs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_hcnt</name>
          <description>DesignWare I2C HS SCL HCNT</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_hcnt</name>
              <description>hs_scl_hcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hs_scl_lcnt</name>
          <description>DesignWare I2C HS SCL LCNT</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hs_scl_lcnt</name>
              <description>hs_scl_lcnt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_stat</name>
          <description>DesignWare I2C Interrupt Status</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>intr_mask</name>
          <description>DesignWare I2C Interrupt Mask</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>raw_intr_stat</name>
          <description>DesignWare I2C Raw Interrupt Status</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_tl</name>
          <description>DesignWare I2C RX TL</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_tl</name>
              <description>rx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_tl</name>
          <description>DesignWare I2C TX TL</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tx_tl</name>
              <description>tx_tl</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_intr</name>
          <description>DesignWare I2C Clear Interrrupt</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rx_under</name>
              <description>RX FIFO Underrun</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_over</name>
              <description>RX FIFO Overrun</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_full</name>
              <description>RX FIFO Full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_over</name>
              <description>TX FIFO Overrun</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>TX FIFO Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_req</name>
              <description>Read Request</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_abrt</name>
              <description>TX Abort</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_done</name>
              <description>RX Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>activity</name>
              <description>Activity</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>stop_det</name>
              <description>Stop DET</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>start_det</name>
              <description>Start DET</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_call</name>
              <description>General Call</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>restart_det</name>
              <description>Restart DET</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mst_on_hold</name>
              <description>Master on Hold</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_under</name>
          <description>DesignWare I2C Clear RX Underrun</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_under</name>
              <description>clr_rx_under</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_over</name>
          <description>DesignWare I2C Clear RX Overrun</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_over</name>
              <description>clr_rx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_over</name>
          <description>DesignWare I2C Clear TX Overrun</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_over</name>
              <description>clr_tx_over</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rd_req</name>
          <description>DesignWare I2C Clear Read Request</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rd_req</name>
              <description>clr_rd_req</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_tx_abrt</name>
          <description>DesignWare I2C Clear TX Abort</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_tx_abrt</name>
              <description>clr_tx_abrt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_rx_done</name>
          <description>DesignWare I2C Clear RX Done</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_rx_done</name>
              <description>clr_rx_done</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_activity</name>
          <description>DesignWare I2C Clear Activity</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_activity</name>
              <description>clr_activity</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_stop_det</name>
          <description>DesignWare I2C Clear Stop DET</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_stop_det</name>
              <description>clr_stop_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_start_det</name>
          <description>DesignWare I2C Clear Start DET</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_start_det</name>
              <description>clr_start_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_gen_call</name>
          <description>DesignWare I2C Clear General Call</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_gen_call</name>
              <description>clr_gen_call</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>DesignWare I2C Enable</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>abort</name>
              <description>abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>DesignWare I2C Status</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>txflr</name>
          <description>DesignWare I2C TX Failure</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>txflr</name>
              <description>txflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rxflr</name>
          <description>DesignWare I2C RX Failure</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxflr</name>
              <description>rxflr</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sda_hold</name>
          <description>DesignWare I2C SDA Hold</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sda_hold</name>
              <description>sda_hold</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_abrt_source</name>
          <description>DesignWare I2C TX Abort Source</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>b7_addr_noack</name>
              <description>b7_addr_noack</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr1_noack</name>
              <description>b10_addr1_noack</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_addr2_noack</name>
              <description>b10_addr2_noack</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txdata_noack</name>
              <description>txdata_noack</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_noack</name>
              <description>gcall_noack</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gcall_read</name>
              <description>gcall_read</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_ackdet</name>
              <description>sbyte_ackdet</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sbyte_norstrt</name>
              <description>sbyte_norstrt</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>b10_rd_norstrt</name>
              <description>b10_rd_norstrt</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>master_dis</name>
              <description>master_dis</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>arb_lost</name>
              <description>arb_lost</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_flush_txfifo</name>
              <description>slave_flush_txfifo</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_arblost</name>
              <description>slave_arblost</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>slave_rd_intx</name>
              <description>slave_rd_intx</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable_status</name>
          <description>DesignWare I2C Enable Status</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>activity</name>
              <description>activity</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tfe</name>
              <description>tfe</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rfne</name>
              <description>rfne</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>master_activity</name>
              <description>master_activity</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slave_activity</name>
              <description>slave_activity</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clr_restart_det</name>
          <description>DesignWare I2C Clear Restart DET</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clr_restart_det</name>
              <description>clr_restart_det</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_param_1</name>
          <description>DesignWare I2C Compatibility Parameter 1</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>speed</name>
              <description>Speed mask - 01: Standard, 10: Full, 11: High</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_version</name>
          <description>DesignWare I2C Compatibility Version</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_version</name>
              <description>comp_version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>comp_type</name>
          <description>DesignWare I2C Compatibility Type</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>comp_type</name>
              <description>comp_type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>spi3</name>
      <description>From arm,pl022, peripheral generator</description>
      <baseAddress>0x12070000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>spi3</name>
        <value>47</value>
      </interrupt>
      <registers>
        <register>
          <name>ssp_cr0</name>
          <description>SSPCR0 is control register 0 and contains five bit fields that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dss</name>
              <description>Data Size Select - 0000, 0001, 0010: Reserved, 0011: 4-bit data, 0100: 5-bit data, 6-bit data, 0110: 7-bit data, 0111: 8-bit data, 1000: 9-bit data, 1001: 10-bit data, 1010: 11-bit data, 1011: 12-bit data, 1100: 13-bit data, 1101: 14-bit data, 1110: 15-bit data, 1111: 16-bit data</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>frf</name>
              <description>Frame format - 00: Motorola SPI frame format, 01: TI synchronous serial frame format, 10: National Microwire frame format, 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spo</name>
              <description>SSPCLKOUT polarity, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sph</name>
              <description>SSPCLKOUT phase, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scr</name>
              <description>Serial clock rate. The value SCR is used to generate the transmit and receive bit rate of the PrimeCell SSP. The bit rate is: (F[sspclk] / (CPSDVR * (1 + SCR))), where CPSDVSR is an even value from [2:254], programmed through the SSPCPSR register and SCR is a value from [0:255]</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cr1</name>
          <description>SSPCR1 is the control register 1 and contains four different bit fields, that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lbm</name>
              <description>Loop back mode - 0: Normal serial port operation enabled, 1: Output of transmit serial shifter is connected to input of receive serial shifter internally</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sse</name>
              <description>Synchronous serial port enable - 0: SSP operation disabled, 1: SSP operation enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ms</name>
              <description>Master or slave mode select. This bit can be modified only when the PrimeCell SSP is disabled, SSE=0 - 0: Device configured as master (default), 1: Device configured as slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sod</name>
              <description>Slave-mode output disable. This bit is relevant only in the slave mode, MS=1. In multiple-slave systems, it is possible for an PrimeCell SSP master to broadcast a message to all slaves in the system while ensuring that only one slave drives data onto its serial output line. In such systems the RXD lines from multiple slaves could be tied together. To operate in such systems, the SOD bit can be set if the PrimeCell SSP slave is not supposed to drive the SSPTXD line - 0: SSP can drive the SSPTXD output in slave mode, 1: SSP must not drive the SSPTXD output in slave mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dr</name>
          <description>SSPDR is the data register and is 16-bits wide. When SSPDR is read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the PrimeCell SSP receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When SSPDR is written to, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the SSPTXD pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.</description>
          <addressOffset>0x8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>data</name>
              <description>Transmit/Receive FIFO - Read: Receive FIFO, Write: Transmit FIFO. You must right-justify data when the PrimeCell SSP is programmed for a data size that is less than 16 bits. Unused bits at the top are ignored by transmit logic. The receive logic automatically right-justifies.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_sr</name>
          <description>SSPSR is a RO status register that contains bits that indicate the FIFO fill status and the PrimeCell SSP busy status.</description>
          <addressOffset>0xc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO empty, RO - 0: Transmit FIFO is not empty, 1: Transmit FIFO is empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tnf</name>
              <description>Transmit FIFO not full, RO - 0: Transmit FIFO is full, 1: Transmit FIFO is not full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rne</name>
              <description>Receive FIFO not empty, RO - 0: Receive FIFO is empty, 1: Receive FIFO is not empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rff</name>
              <description>Receive FIFO full, RO - 0: Receive FIFO is not full, 1: Receive FIFO is full.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bsy</name>
              <description>PrimeCell SSP busy flag, RO - 0: SSP is idle, 1: SSP is currently transmitting and/or receiving a frame or the transmit FIFO is not empty.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cpsr</name>
          <description>SSPCPSR is the clock prescale register and specifies the division factor by which the input SSPCLK must be internally divided before further use. The value programmed into this register must be an even number between [2:254]. The least significant bit of the programmed number is hard-coded to zero. If an odd number is written to this register, data read back from this register has the least significant bit as zero.</description>
          <addressOffset>0x10</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cpsdvsr</name>
              <description>Clock prescale divisor. Must be an even number from 2-254, depending on the frequency of SSPCLK. The least significant bit always returns zero on reads.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_imsc</name>
          <description>The SSPIMSC register is the interrupt mask set or clear register. It is a RW register. On a read this register gives the current value of the mask on the relevant interrupt. A write of 1 to the particular bit sets the mask, enabling the interrupt to be read. A write of 0 clears the corresponding mask. All the bits are cleared to 0 when reset.</description>
          <addressOffset>0x14</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorim</name>
              <description>Receive overrun interrupt mask - 0: Receive FIFO written to while full condition interrupt is masked, 1: Receive FIFO written to while full condition interrupt is not masked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtim</name>
              <description>Receive timeout interrupt mask - 0: Receive FIFO not empty and no read prior to timeout period interrupt is masked, 1: Receive FIFO not empty and no read prior to timeout period interrupt is not masked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxim</name>
              <description>Receive FIFO interrupt mask - 0: Receive FIFO half full or less condition interrupt is masked, 1: Receive FIFO half full or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txim</name>
              <description>Transmit FIFO interrupt mask - 0: Transmit FIFO half empty or less condition interrupt is masked, 1: Transmit FIFO half empty or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_ris</name>
          <description>The SSPRIS register is the raw interrupt status register. It is a RO register. On a read this register gives the current raw status value of the corresponding interrupt prior to masking. A write has no effect.</description>
          <addressOffset>0x18</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_mis</name>
          <description>The SSPMIS register is the masked interrupt status register. It is a RO register. On a read this register gives the current masked status value of the corresponding interrupt. A write has no effect.</description>
          <addressOffset>0x1c</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rormis</name>
              <description>Gives the receive over run masked interrupt status, after masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtmis</name>
              <description>Gives the receive timeout masked interrupt state, after masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxmis</name>
              <description>Gives the receive FIFO masked interrupt state, after masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txmis</name>
              <description>Gives the transmit FIFO masked interrupt state, after masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_icr</name>
          <description>The SSPICR register is the interrupt clear register and is write-only. On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.</description>
          <addressOffset>0x20</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>roric</name>
              <description>Clears the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtic</name>
              <description>Clears the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dmacr</name>
          <description>The SSPDMACR register is the DMA control register. It is a RW register. All the bits are cleared to 0 on reset.</description>
          <addressOffset>0x24</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxdmae</name>
              <description>Receive DMA Enable. If this bit is set to 1, DMA for the receive FIFO is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txdmae</name>
              <description>Transmit DMA Enable. If this bit is set to 1, DMA for the transmit FIFO is enabled.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id0</name>
          <description>The SSPPeriphID0 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number0</name>
              <description>These bits read back as 0x22</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id1</name>
          <description>The SSPPeriphID1 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number1</name>
              <description>These bits read back as 0x0</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>designer0</name>
              <description>These bits read back as 0x1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id2</name>
          <description>The SSPPeriphID2 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>designer1</name>
              <description>These bits read back as 0x4</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>revision</name>
              <description>These bits return the peripheral revision</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id3</name>
          <description>The SSPPeriphID3 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfec</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>configuration</name>
              <description>These bits read back as 0x80</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id0</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id0</name>
              <description>The bits are read as 0xD</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id1</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id1</name>
              <description>The bits are read as 0xF0</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id2</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id2</name>
              <description>The bits are read as 0x5</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id3</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xffc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id3</name>
              <description>The bits are read as 0xB1</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>arm_primecell_3</name>
      <description>From arm,primecell, peripheral generator</description>
      <baseAddress>0x12070000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>spi4</name>
      <description>From arm,pl022, peripheral generator</description>
      <baseAddress>0x12080000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>spi4</name>
        <value>48</value>
      </interrupt>
      <registers>
        <register>
          <name>ssp_cr0</name>
          <description>SSPCR0 is control register 0 and contains five bit fields that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dss</name>
              <description>Data Size Select - 0000, 0001, 0010: Reserved, 0011: 4-bit data, 0100: 5-bit data, 6-bit data, 0110: 7-bit data, 0111: 8-bit data, 1000: 9-bit data, 1001: 10-bit data, 1010: 11-bit data, 1011: 12-bit data, 1100: 13-bit data, 1101: 14-bit data, 1110: 15-bit data, 1111: 16-bit data</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>frf</name>
              <description>Frame format - 00: Motorola SPI frame format, 01: TI synchronous serial frame format, 10: National Microwire frame format, 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spo</name>
              <description>SSPCLKOUT polarity, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sph</name>
              <description>SSPCLKOUT phase, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scr</name>
              <description>Serial clock rate. The value SCR is used to generate the transmit and receive bit rate of the PrimeCell SSP. The bit rate is: (F[sspclk] / (CPSDVR * (1 + SCR))), where CPSDVSR is an even value from [2:254], programmed through the SSPCPSR register and SCR is a value from [0:255]</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cr1</name>
          <description>SSPCR1 is the control register 1 and contains four different bit fields, that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lbm</name>
              <description>Loop back mode - 0: Normal serial port operation enabled, 1: Output of transmit serial shifter is connected to input of receive serial shifter internally</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sse</name>
              <description>Synchronous serial port enable - 0: SSP operation disabled, 1: SSP operation enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ms</name>
              <description>Master or slave mode select. This bit can be modified only when the PrimeCell SSP is disabled, SSE=0 - 0: Device configured as master (default), 1: Device configured as slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sod</name>
              <description>Slave-mode output disable. This bit is relevant only in the slave mode, MS=1. In multiple-slave systems, it is possible for an PrimeCell SSP master to broadcast a message to all slaves in the system while ensuring that only one slave drives data onto its serial output line. In such systems the RXD lines from multiple slaves could be tied together. To operate in such systems, the SOD bit can be set if the PrimeCell SSP slave is not supposed to drive the SSPTXD line - 0: SSP can drive the SSPTXD output in slave mode, 1: SSP must not drive the SSPTXD output in slave mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dr</name>
          <description>SSPDR is the data register and is 16-bits wide. When SSPDR is read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the PrimeCell SSP receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When SSPDR is written to, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the SSPTXD pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.</description>
          <addressOffset>0x8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>data</name>
              <description>Transmit/Receive FIFO - Read: Receive FIFO, Write: Transmit FIFO. You must right-justify data when the PrimeCell SSP is programmed for a data size that is less than 16 bits. Unused bits at the top are ignored by transmit logic. The receive logic automatically right-justifies.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_sr</name>
          <description>SSPSR is a RO status register that contains bits that indicate the FIFO fill status and the PrimeCell SSP busy status.</description>
          <addressOffset>0xc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO empty, RO - 0: Transmit FIFO is not empty, 1: Transmit FIFO is empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tnf</name>
              <description>Transmit FIFO not full, RO - 0: Transmit FIFO is full, 1: Transmit FIFO is not full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rne</name>
              <description>Receive FIFO not empty, RO - 0: Receive FIFO is empty, 1: Receive FIFO is not empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rff</name>
              <description>Receive FIFO full, RO - 0: Receive FIFO is not full, 1: Receive FIFO is full.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bsy</name>
              <description>PrimeCell SSP busy flag, RO - 0: SSP is idle, 1: SSP is currently transmitting and/or receiving a frame or the transmit FIFO is not empty.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cpsr</name>
          <description>SSPCPSR is the clock prescale register and specifies the division factor by which the input SSPCLK must be internally divided before further use. The value programmed into this register must be an even number between [2:254]. The least significant bit of the programmed number is hard-coded to zero. If an odd number is written to this register, data read back from this register has the least significant bit as zero.</description>
          <addressOffset>0x10</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cpsdvsr</name>
              <description>Clock prescale divisor. Must be an even number from 2-254, depending on the frequency of SSPCLK. The least significant bit always returns zero on reads.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_imsc</name>
          <description>The SSPIMSC register is the interrupt mask set or clear register. It is a RW register. On a read this register gives the current value of the mask on the relevant interrupt. A write of 1 to the particular bit sets the mask, enabling the interrupt to be read. A write of 0 clears the corresponding mask. All the bits are cleared to 0 when reset.</description>
          <addressOffset>0x14</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorim</name>
              <description>Receive overrun interrupt mask - 0: Receive FIFO written to while full condition interrupt is masked, 1: Receive FIFO written to while full condition interrupt is not masked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtim</name>
              <description>Receive timeout interrupt mask - 0: Receive FIFO not empty and no read prior to timeout period interrupt is masked, 1: Receive FIFO not empty and no read prior to timeout period interrupt is not masked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxim</name>
              <description>Receive FIFO interrupt mask - 0: Receive FIFO half full or less condition interrupt is masked, 1: Receive FIFO half full or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txim</name>
              <description>Transmit FIFO interrupt mask - 0: Transmit FIFO half empty or less condition interrupt is masked, 1: Transmit FIFO half empty or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_ris</name>
          <description>The SSPRIS register is the raw interrupt status register. It is a RO register. On a read this register gives the current raw status value of the corresponding interrupt prior to masking. A write has no effect.</description>
          <addressOffset>0x18</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_mis</name>
          <description>The SSPMIS register is the masked interrupt status register. It is a RO register. On a read this register gives the current masked status value of the corresponding interrupt. A write has no effect.</description>
          <addressOffset>0x1c</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rormis</name>
              <description>Gives the receive over run masked interrupt status, after masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtmis</name>
              <description>Gives the receive timeout masked interrupt state, after masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxmis</name>
              <description>Gives the receive FIFO masked interrupt state, after masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txmis</name>
              <description>Gives the transmit FIFO masked interrupt state, after masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_icr</name>
          <description>The SSPICR register is the interrupt clear register and is write-only. On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.</description>
          <addressOffset>0x20</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>roric</name>
              <description>Clears the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtic</name>
              <description>Clears the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dmacr</name>
          <description>The SSPDMACR register is the DMA control register. It is a RW register. All the bits are cleared to 0 on reset.</description>
          <addressOffset>0x24</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxdmae</name>
              <description>Receive DMA Enable. If this bit is set to 1, DMA for the receive FIFO is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txdmae</name>
              <description>Transmit DMA Enable. If this bit is set to 1, DMA for the transmit FIFO is enabled.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id0</name>
          <description>The SSPPeriphID0 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number0</name>
              <description>These bits read back as 0x22</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id1</name>
          <description>The SSPPeriphID1 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number1</name>
              <description>These bits read back as 0x0</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>designer0</name>
              <description>These bits read back as 0x1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id2</name>
          <description>The SSPPeriphID2 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>designer1</name>
              <description>These bits read back as 0x4</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>revision</name>
              <description>These bits return the peripheral revision</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id3</name>
          <description>The SSPPeriphID3 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfec</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>configuration</name>
              <description>These bits read back as 0x80</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id0</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id0</name>
              <description>The bits are read as 0xD</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id1</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id1</name>
              <description>The bits are read as 0xF0</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id2</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id2</name>
              <description>The bits are read as 0x5</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id3</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xffc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id3</name>
              <description>The bits are read as 0xB1</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>arm_primecell_4</name>
      <description>From arm,primecell, peripheral generator</description>
      <baseAddress>0x12080000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>spi5</name>
      <description>From arm,pl022, peripheral generator</description>
      <baseAddress>0x12090000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>spi5</name>
        <value>49</value>
      </interrupt>
      <registers>
        <register>
          <name>ssp_cr0</name>
          <description>SSPCR0 is control register 0 and contains five bit fields that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dss</name>
              <description>Data Size Select - 0000, 0001, 0010: Reserved, 0011: 4-bit data, 0100: 5-bit data, 6-bit data, 0110: 7-bit data, 0111: 8-bit data, 1000: 9-bit data, 1001: 10-bit data, 1010: 11-bit data, 1011: 12-bit data, 1100: 13-bit data, 1101: 14-bit data, 1110: 15-bit data, 1111: 16-bit data</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>frf</name>
              <description>Frame format - 00: Motorola SPI frame format, 01: TI synchronous serial frame format, 10: National Microwire frame format, 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spo</name>
              <description>SSPCLKOUT polarity, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sph</name>
              <description>SSPCLKOUT phase, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scr</name>
              <description>Serial clock rate. The value SCR is used to generate the transmit and receive bit rate of the PrimeCell SSP. The bit rate is: (F[sspclk] / (CPSDVR * (1 + SCR))), where CPSDVSR is an even value from [2:254], programmed through the SSPCPSR register and SCR is a value from [0:255]</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cr1</name>
          <description>SSPCR1 is the control register 1 and contains four different bit fields, that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lbm</name>
              <description>Loop back mode - 0: Normal serial port operation enabled, 1: Output of transmit serial shifter is connected to input of receive serial shifter internally</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sse</name>
              <description>Synchronous serial port enable - 0: SSP operation disabled, 1: SSP operation enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ms</name>
              <description>Master or slave mode select. This bit can be modified only when the PrimeCell SSP is disabled, SSE=0 - 0: Device configured as master (default), 1: Device configured as slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sod</name>
              <description>Slave-mode output disable. This bit is relevant only in the slave mode, MS=1. In multiple-slave systems, it is possible for an PrimeCell SSP master to broadcast a message to all slaves in the system while ensuring that only one slave drives data onto its serial output line. In such systems the RXD lines from multiple slaves could be tied together. To operate in such systems, the SOD bit can be set if the PrimeCell SSP slave is not supposed to drive the SSPTXD line - 0: SSP can drive the SSPTXD output in slave mode, 1: SSP must not drive the SSPTXD output in slave mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dr</name>
          <description>SSPDR is the data register and is 16-bits wide. When SSPDR is read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the PrimeCell SSP receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When SSPDR is written to, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the SSPTXD pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.</description>
          <addressOffset>0x8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>data</name>
              <description>Transmit/Receive FIFO - Read: Receive FIFO, Write: Transmit FIFO. You must right-justify data when the PrimeCell SSP is programmed for a data size that is less than 16 bits. Unused bits at the top are ignored by transmit logic. The receive logic automatically right-justifies.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_sr</name>
          <description>SSPSR is a RO status register that contains bits that indicate the FIFO fill status and the PrimeCell SSP busy status.</description>
          <addressOffset>0xc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO empty, RO - 0: Transmit FIFO is not empty, 1: Transmit FIFO is empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tnf</name>
              <description>Transmit FIFO not full, RO - 0: Transmit FIFO is full, 1: Transmit FIFO is not full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rne</name>
              <description>Receive FIFO not empty, RO - 0: Receive FIFO is empty, 1: Receive FIFO is not empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rff</name>
              <description>Receive FIFO full, RO - 0: Receive FIFO is not full, 1: Receive FIFO is full.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bsy</name>
              <description>PrimeCell SSP busy flag, RO - 0: SSP is idle, 1: SSP is currently transmitting and/or receiving a frame or the transmit FIFO is not empty.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cpsr</name>
          <description>SSPCPSR is the clock prescale register and specifies the division factor by which the input SSPCLK must be internally divided before further use. The value programmed into this register must be an even number between [2:254]. The least significant bit of the programmed number is hard-coded to zero. If an odd number is written to this register, data read back from this register has the least significant bit as zero.</description>
          <addressOffset>0x10</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cpsdvsr</name>
              <description>Clock prescale divisor. Must be an even number from 2-254, depending on the frequency of SSPCLK. The least significant bit always returns zero on reads.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_imsc</name>
          <description>The SSPIMSC register is the interrupt mask set or clear register. It is a RW register. On a read this register gives the current value of the mask on the relevant interrupt. A write of 1 to the particular bit sets the mask, enabling the interrupt to be read. A write of 0 clears the corresponding mask. All the bits are cleared to 0 when reset.</description>
          <addressOffset>0x14</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorim</name>
              <description>Receive overrun interrupt mask - 0: Receive FIFO written to while full condition interrupt is masked, 1: Receive FIFO written to while full condition interrupt is not masked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtim</name>
              <description>Receive timeout interrupt mask - 0: Receive FIFO not empty and no read prior to timeout period interrupt is masked, 1: Receive FIFO not empty and no read prior to timeout period interrupt is not masked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxim</name>
              <description>Receive FIFO interrupt mask - 0: Receive FIFO half full or less condition interrupt is masked, 1: Receive FIFO half full or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txim</name>
              <description>Transmit FIFO interrupt mask - 0: Transmit FIFO half empty or less condition interrupt is masked, 1: Transmit FIFO half empty or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_ris</name>
          <description>The SSPRIS register is the raw interrupt status register. It is a RO register. On a read this register gives the current raw status value of the corresponding interrupt prior to masking. A write has no effect.</description>
          <addressOffset>0x18</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_mis</name>
          <description>The SSPMIS register is the masked interrupt status register. It is a RO register. On a read this register gives the current masked status value of the corresponding interrupt. A write has no effect.</description>
          <addressOffset>0x1c</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rormis</name>
              <description>Gives the receive over run masked interrupt status, after masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtmis</name>
              <description>Gives the receive timeout masked interrupt state, after masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxmis</name>
              <description>Gives the receive FIFO masked interrupt state, after masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txmis</name>
              <description>Gives the transmit FIFO masked interrupt state, after masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_icr</name>
          <description>The SSPICR register is the interrupt clear register and is write-only. On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.</description>
          <addressOffset>0x20</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>roric</name>
              <description>Clears the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtic</name>
              <description>Clears the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dmacr</name>
          <description>The SSPDMACR register is the DMA control register. It is a RW register. All the bits are cleared to 0 on reset.</description>
          <addressOffset>0x24</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxdmae</name>
              <description>Receive DMA Enable. If this bit is set to 1, DMA for the receive FIFO is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txdmae</name>
              <description>Transmit DMA Enable. If this bit is set to 1, DMA for the transmit FIFO is enabled.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id0</name>
          <description>The SSPPeriphID0 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number0</name>
              <description>These bits read back as 0x22</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id1</name>
          <description>The SSPPeriphID1 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number1</name>
              <description>These bits read back as 0x0</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>designer0</name>
              <description>These bits read back as 0x1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id2</name>
          <description>The SSPPeriphID2 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>designer1</name>
              <description>These bits read back as 0x4</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>revision</name>
              <description>These bits return the peripheral revision</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id3</name>
          <description>The SSPPeriphID3 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfec</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>configuration</name>
              <description>These bits read back as 0x80</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id0</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id0</name>
              <description>The bits are read as 0xD</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id1</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id1</name>
              <description>The bits are read as 0xF0</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id2</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id2</name>
              <description>The bits are read as 0x5</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id3</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xffc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id3</name>
              <description>The bits are read as 0xB1</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>arm_primecell_5</name>
      <description>From arm,primecell, peripheral generator</description>
      <baseAddress>0x12090000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>spi6</name>
      <description>From arm,pl022, peripheral generator</description>
      <baseAddress>0x120A0000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>spi6</name>
        <value>50</value>
      </interrupt>
      <registers>
        <register>
          <name>ssp_cr0</name>
          <description>SSPCR0 is control register 0 and contains five bit fields that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dss</name>
              <description>Data Size Select - 0000, 0001, 0010: Reserved, 0011: 4-bit data, 0100: 5-bit data, 6-bit data, 0110: 7-bit data, 0111: 8-bit data, 1000: 9-bit data, 1001: 10-bit data, 1010: 11-bit data, 1011: 12-bit data, 1100: 13-bit data, 1101: 14-bit data, 1110: 15-bit data, 1111: 16-bit data</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>frf</name>
              <description>Frame format - 00: Motorola SPI frame format, 01: TI synchronous serial frame format, 10: National Microwire frame format, 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spo</name>
              <description>SSPCLKOUT polarity, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sph</name>
              <description>SSPCLKOUT phase, applicable to Motorola SPI frame format only.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scr</name>
              <description>Serial clock rate. The value SCR is used to generate the transmit and receive bit rate of the PrimeCell SSP. The bit rate is: (F[sspclk] / (CPSDVR * (1 + SCR))), where CPSDVSR is an even value from [2:254], programmed through the SSPCPSR register and SCR is a value from [0:255]</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cr1</name>
          <description>SSPCR1 is the control register 1 and contains four different bit fields, that control various functions within the PrimeCell SSP.</description>
          <addressOffset>0x4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lbm</name>
              <description>Loop back mode - 0: Normal serial port operation enabled, 1: Output of transmit serial shifter is connected to input of receive serial shifter internally</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sse</name>
              <description>Synchronous serial port enable - 0: SSP operation disabled, 1: SSP operation enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ms</name>
              <description>Master or slave mode select. This bit can be modified only when the PrimeCell SSP is disabled, SSE=0 - 0: Device configured as master (default), 1: Device configured as slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sod</name>
              <description>Slave-mode output disable. This bit is relevant only in the slave mode, MS=1. In multiple-slave systems, it is possible for an PrimeCell SSP master to broadcast a message to all slaves in the system while ensuring that only one slave drives data onto its serial output line. In such systems the RXD lines from multiple slaves could be tied together. To operate in such systems, the SOD bit can be set if the PrimeCell SSP slave is not supposed to drive the SSPTXD line - 0: SSP can drive the SSPTXD output in slave mode, 1: SSP must not drive the SSPTXD output in slave mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dr</name>
          <description>SSPDR is the data register and is 16-bits wide. When SSPDR is read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the PrimeCell SSP receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When SSPDR is written to, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the SSPTXD pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.</description>
          <addressOffset>0x8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>data</name>
              <description>Transmit/Receive FIFO - Read: Receive FIFO, Write: Transmit FIFO. You must right-justify data when the PrimeCell SSP is programmed for a data size that is less than 16 bits. Unused bits at the top are ignored by transmit logic. The receive logic automatically right-justifies.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_sr</name>
          <description>SSPSR is a RO status register that contains bits that indicate the FIFO fill status and the PrimeCell SSP busy status.</description>
          <addressOffset>0xc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tfe</name>
              <description>Transmit FIFO empty, RO - 0: Transmit FIFO is not empty, 1: Transmit FIFO is empty.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tnf</name>
              <description>Transmit FIFO not full, RO - 0: Transmit FIFO is full, 1: Transmit FIFO is not full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rne</name>
              <description>Receive FIFO not empty, RO - 0: Receive FIFO is empty, 1: Receive FIFO is not empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rff</name>
              <description>Receive FIFO full, RO - 0: Receive FIFO is not full, 1: Receive FIFO is full.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bsy</name>
              <description>PrimeCell SSP busy flag, RO - 0: SSP is idle, 1: SSP is currently transmitting and/or receiving a frame or the transmit FIFO is not empty.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_cpsr</name>
          <description>SSPCPSR is the clock prescale register and specifies the division factor by which the input SSPCLK must be internally divided before further use. The value programmed into this register must be an even number between [2:254]. The least significant bit of the programmed number is hard-coded to zero. If an odd number is written to this register, data read back from this register has the least significant bit as zero.</description>
          <addressOffset>0x10</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>cpsdvsr</name>
              <description>Clock prescale divisor. Must be an even number from 2-254, depending on the frequency of SSPCLK. The least significant bit always returns zero on reads.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_imsc</name>
          <description>The SSPIMSC register is the interrupt mask set or clear register. It is a RW register. On a read this register gives the current value of the mask on the relevant interrupt. A write of 1 to the particular bit sets the mask, enabling the interrupt to be read. A write of 0 clears the corresponding mask. All the bits are cleared to 0 when reset.</description>
          <addressOffset>0x14</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorim</name>
              <description>Receive overrun interrupt mask - 0: Receive FIFO written to while full condition interrupt is masked, 1: Receive FIFO written to while full condition interrupt is not masked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtim</name>
              <description>Receive timeout interrupt mask - 0: Receive FIFO not empty and no read prior to timeout period interrupt is masked, 1: Receive FIFO not empty and no read prior to timeout period interrupt is not masked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxim</name>
              <description>Receive FIFO interrupt mask - 0: Receive FIFO half full or less condition interrupt is masked, 1: Receive FIFO half full or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txim</name>
              <description>Transmit FIFO interrupt mask - 0: Transmit FIFO half empty or less condition interrupt is masked, 1: Transmit FIFO half empty or less condition interrupt is not masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_ris</name>
          <description>The SSPRIS register is the raw interrupt status register. It is a RO register. On a read this register gives the current raw status value of the corresponding interrupt prior to masking. A write has no effect.</description>
          <addressOffset>0x18</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rorris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txris</name>
              <description>Gives the raw interrupt state, prior to masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_mis</name>
          <description>The SSPMIS register is the masked interrupt status register. It is a RO register. On a read this register gives the current masked status value of the corresponding interrupt. A write has no effect.</description>
          <addressOffset>0x1c</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rormis</name>
              <description>Gives the receive over run masked interrupt status, after masking, of the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rtmis</name>
              <description>Gives the receive timeout masked interrupt state, after masking, of the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxmis</name>
              <description>Gives the receive FIFO masked interrupt state, after masking, of the SSPRXINTR interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txmis</name>
              <description>Gives the transmit FIFO masked interrupt state, after masking, of the SSPTXINTR interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_icr</name>
          <description>The SSPICR register is the interrupt clear register and is write-only. On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.</description>
          <addressOffset>0x20</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>roric</name>
              <description>Clears the SSPRORINTR interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtic</name>
              <description>Clears the SSPRTINTR interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_dmacr</name>
          <description>The SSPDMACR register is the DMA control register. It is a RW register. All the bits are cleared to 0 on reset.</description>
          <addressOffset>0x24</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rxdmae</name>
              <description>Receive DMA Enable. If this bit is set to 1, DMA for the receive FIFO is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txdmae</name>
              <description>Transmit DMA Enable. If this bit is set to 1, DMA for the transmit FIFO is enabled.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id0</name>
          <description>The SSPPeriphID0 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number0</name>
              <description>These bits read back as 0x22</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id1</name>
          <description>The SSPPeriphID1 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>part_number1</name>
              <description>These bits read back as 0x0</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>designer0</name>
              <description>These bits read back as 0x1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id2</name>
          <description>The SSPPeriphID2 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfe8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>designer1</name>
              <description>These bits read back as 0x4</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>revision</name>
              <description>These bits return the peripheral revision</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_periph_id3</name>
          <description>The SSPPeriphID3 register is hard-coded and the fields within the register determine reset value. The SSPPeriphID0-3 registers are four 8-bit registers, that span address locations 0xFE0 to 0xFEC. The registers can conceptually be treated as a single 32-bit register.</description>
          <addressOffset>0xfec</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>configuration</name>
              <description>These bits read back as 0x80</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id0</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff0</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id0</name>
              <description>The bits are read as 0xD</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id1</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff4</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id1</name>
              <description>The bits are read as 0xF0</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id2</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xff8</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id2</name>
              <description>The bits are read as 0x5</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ssp_pcell_id3</name>
          <description>The SSPPCellID0-3 registers are four 8-bit wide registers, that span address locations 0xFF0-0xFFC. The registers can conceptually be treated as a 32-bit register. The register is used as a standard cross-peripheral identification system. The SSPPCellID register is set to 0xB105F00D.</description>
          <addressOffset>0xffc</addressOffset>
          <size>16</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ssp_pcell_id3</name>
              <description>The bits are read as 0xB1</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>arm_primecell_6</name>
      <description>From arm,primecell, peripheral generator</description>
      <baseAddress>0x120A0000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_temp_0</name>
      <description>From starfive,jh7110-temp, peripheral generator</description>
      <baseAddress>0x120E0000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_qspi_0</name>
      <description>From starfive,jh7110-qspi, peripheral generator</description>
      <baseAddress>0x13010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>qspi</name>
      <description>From cdns,qspi-nor, peripheral generator</description>
      <baseAddress>0x13010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>qspi</name>
        <value>20</value>
      </interrupt>
      <registers>
        <register>
          <name>config</name>
          <description>Cadence QSPI Configuration</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>enable</name>
              <description>Enable the QSPI controller</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>enb_dir_acc_ctrl</name>
              <description>Enable direct access controller</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>decode</name>
              <description>Enable the QSPI decoder</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>chipselect</name>
              <description>Chip select - CS0: 0b1110, CS1: 0b1101, CS2: 0b1011, CS3: 0b0111</description>
              <bitRange>[13:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dma</name>
              <description>Enable Direct Memory Access</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>baud</name>
              <description>Set the QSPI BAUD rate divisor</description>
              <bitRange>[22:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dtr_proto</name>
              <description>Enable DTR Protocol</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dual_opcode</name>
              <description>Enable Dual Opcode Mode</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>idle</name>
              <description>Set Idle</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rd_instr</name>
          <description>Cadence QSPI Read Instruction</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>opcode</name>
              <description>Instruction Opcode</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>type_instr</name>
              <description>Type of Instruction</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>type_addr</name>
              <description>Type of Address</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>type_data</name>
              <description>type_data</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mode_en</name>
              <description>Mode </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dummy</name>
              <description>Send dummy signal to stall the device</description>
              <bitRange>[28:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>wr_instr</name>
          <description>Cadence QSPI Write Instruction</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>opcode</name>
              <description>Instruction Opcode</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>type_addr</name>
              <description>Type of Address</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>type_data</name>
              <description>type_data</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>delay</name>
          <description>Cadence QSPI Delay</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tslch</name>
              <description>TSLCH Delay Value</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tchsh</name>
              <description>TCHSH Delay Value</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tsd2d</name>
              <description>TSD2D Delay Value</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tshsl</name>
              <description>TSHSL Delay Value</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>read_capture</name>
          <description>Cadence QSPI Read Capture</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>bypass</name>
              <description>Bypass the Read Capture</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>delay</name>
              <description>Read Capture Delay Value</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>size</name>
          <description>Cadence QSPI Size Configuration</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address</name>
              <description>Address Size in Bytes</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>page</name>
              <description>Page Size in Bytes</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>block</name>
              <description>Block Size in Bytes</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sram_partition</name>
          <description>Cadence QSPI SRAM Partition Size</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>size</name>
              <description>Partition size in bytes</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_trigger</name>
          <description>Cadence QSPI Indirect Trigger Address</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address</name>
              <description>address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>dma</name>
          <description>Cadence QSPI Direct Memory Access</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>single</name>
              <description>single</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>burst</name>
              <description>burst</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>remap</name>
          <description>Cadence QSPI Remap Address</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address</name>
              <description>address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mode_bit</name>
          <description>Cadence QSPI Mode Bit(s)</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>mode</name>
              <description>mode</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sdram_level</name>
          <description>Cadence QSPI SDRAM Level</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rd</name>
              <description>SDRAM Read Level</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>wr</name>
              <description>SDRAM Write Level</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>wr_completion_ctrl</name>
          <description>Cadence QSPI Write Completion Control</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>disable_auto_poll</name>
              <description>SPI NAND flashes require the address of the status register to be passed in the Read SR command. Also, some SPI NOR flashes like the Cypress Semper flash expect a 4-byte dummy address in the Read SR command in DTR mode. But this controller does not support address phase in the Read SR command when doing auto-HW polling. So, disable write completion polling on the controller's side. spi-nand and spi-nor will take care of polling the status register.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>irq_status</name>
          <description>Cadence QSPI IRQ Status</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>131071</resetValue>
          <fields>
            <field>
              <name>mode_err</name>
              <description>Mode error interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>underflow</name>
              <description>Buffer underflow interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ind_comp</name>
              <description>Indirect computation interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ind_rd_reject</name>
              <description>Indirect read rejection interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>wr_protected_err</name>
              <description>Write protected error interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>illegal_ahb_err</name>
              <description>Illegal AHB clock error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>watermark</name>
              <description>Watermark interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ind_sram_full</name>
              <description>Indirect SRAM full interrupt</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>irq_mask</name>
          <description>Cadence QSPI IRQ Mask</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>70</resetValue>
          <fields>
            <field>
              <name>mode_err</name>
              <description>Mode error interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>underflow</name>
              <description>Buffer underflow interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ind_comp</name>
              <description>Indirect computation interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ind_rd_reject</name>
              <description>Indirect read rejection interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>wr_protected_err</name>
              <description>Write protected error interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>illegal_ahb_err</name>
              <description>Illegal AHB clock error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>watermark</name>
              <description>Watermark interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ind_sram_full</name>
              <description>Indirect SRAM full interrupt</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_rd</name>
          <description>Cadence QSPI Indirect Read</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>start</name>
              <description>Start indirect read</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>cancel</name>
              <description>Cancel indirect read</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>done</name>
              <description>Indirect read done</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_rd_watermark</name>
          <description>Cadence QSPI Indirect Read Watermark</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>watermark</name>
              <description>watermark</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_rd_start_addr</name>
          <description>Cadence QSPI Indirect Read Start Address</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address</name>
              <description>address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_rd_bytes</name>
          <description>Cadence QSPI Indirect Read Bytes</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>bytes</name>
              <description>bytes</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_wr</name>
          <description>Cadence QSPI Indirect Write</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>start</name>
              <description>Start indirect write</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>cancel</name>
              <description>Cancel indirect write</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>done</name>
              <description>Indirect write done</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_wr_watermark</name>
          <description>Cadence QSPI Indirect Write Watermark</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>watermark</name>
              <description>watermark</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_wr_start_addr</name>
          <description>Cadence QSPI Indirect Write Start Address</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address</name>
              <description>address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>indirect_wr_bytes</name>
          <description>Cadence QSPI Indirect Write Bytes</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>bytes</name>
              <description>bytes</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cmd_ctrl</name>
          <description>Cadence QSPI Command Control</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>execute</name>
              <description>Execute-in-Place (XIP)</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>in_progress</name>
              <description>Command in progress</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dummy</name>
              <description>Dummy command</description>
              <bitRange>[11:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>wr_bytes</name>
              <description>Write bytes</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>wr_en</name>
              <description>Write enable</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>add_bytes</name>
              <description>Add command bytes</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>addr_en</name>
              <description>Address enable</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_bytes</name>
              <description>Read bytes</description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_en</name>
              <description>Read enable</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>opcode</name>
              <description>Command opcode</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cmd_address</name>
          <description>Cadence QSPI Command Address</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>address</name>
              <description>address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cmd_read_at_lower</name>
          <description>Cadence QSPI Command Read at Lower</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>read_at_lower</name>
              <description>read_at_lower</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cmd_read_at_upper</name>
          <description>Cadence QSPI Command Read at Upper</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>read_at_upper</name>
              <description>read_at_upper</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cmd_write_at_lower</name>
          <description>Cadence QSPI Command Write at Lower</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>write_at_lower</name>
              <description>write_at_lower</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cmd_write_at_upper</name>
          <description>Cadence QSPI Command Write at Upper</description>
          <addressOffset>0xac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>write_at_upper</name>
              <description>write_at_upper</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>polling_status</name>
          <description>Cadence QSPI Polling Status</description>
          <addressOffset>0xb0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>status</name>
              <description>status</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dummy</name>
              <description>dummy</description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ext_lower</name>
          <description>Cadence QSPI Extension Lower</description>
          <addressOffset>0xe0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>stig</name>
              <description>stig</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>write</name>
              <description>write</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>read</name>
              <description>read</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>jedec_spi_nor_0</name>
      <description>From jedec,spi-nor, peripheral generator</description>
      <baseAddress>0x0</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x0</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_xspi_0</name>
      <description>From starfive,jh7110-xspi, peripheral generator</description>
      <baseAddress>0x21000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x400000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>cdns_xspi_nor_0</name>
      <description>From cdns,xspi-nor, peripheral generator</description>
      <baseAddress>0x21000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x400000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>jedec_spi_nor_1</name>
      <description>From jedec,spi-nor, peripheral generator</description>
      <baseAddress>0x0</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x0</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>syscrg</name>
      <description>From starfive,jh7110-syscrg, peripheral generator</description>
      <baseAddress>0x13020000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>clk_cpu_root</name>
          <description>Clock CPU Root</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_osc, clk_pll0</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_cpu_core</name>
          <description>Clock CPU Core</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=7, Default=1, Min=1, Typical=1</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_cpu_bus</name>
          <description>Clock CPU Bus</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gpu_root</name>
          <description>Clock GPU Root</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_pll2, clk_pll1</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_peripheral_root</name>
          <description>Clock Peripheral Root</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_pll0, clk_pll2</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_bus_root</name>
          <description>Clock Bus Root</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_osc, clk_pll2</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_nocstg_bus</name>
          <description>Clock NOCSTG Bus</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=3, Default=3, Min=3, Typical=3</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_axi_cfg0</name>
          <description>Clock AXI Configuration 0</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=3, Default=3, Min=3, Typical=3</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_stg_axiahb</name>
          <description>Clock STG AXI AHB</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_ahb0</name>
          <description>Clock AHB 0</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_ahb1</name>
          <description>Clock AHB 1</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_apb_bus</name>
          <description>Clock APB Bus</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=8, Default=4, Min=4, Typical=4</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_apb0</name>
          <description>Clock APB 0</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pll0_div2</name>
          <description>Clock PLL 0 Divider 2</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pll1_div2</name>
          <description>Clock PLL 1 Divider 2</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pll2_div2</name>
          <description>Clock PLL 2 Divider 2</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_audio_root</name>
          <description>Clock Audio Root</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=8, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_mclk_inner</name>
          <description>Clock MCLK Inner</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=64, Default=12, Min=12, Typical=12</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_mclk</name>
          <description>Clock MCLK</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_mclk_inner, clk_mclk_ext</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_mclk_out</name>
          <description>Clock MCLK Out</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_isp_2x</name>
          <description>Clock ISP 2x</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_pll2, clk_pll1</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=8, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_isp_axi</name>
          <description>Clock ISP AXI</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=4, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gclk_0</name>
          <description>Clock GCLK 0</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=62, Default=20, Min=16, Typical=20</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gclk_1</name>
          <description>Clock GCLK 1</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=62, Default=16, Min=16, Typical=16</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gclk_2</name>
          <description>Clock GCLK 2</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=62, Default=12, Min=12, Typical=12</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_core_0</name>
          <description>U7MC Core Clock 0</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_core_1</name>
          <description>U7MC Core Clock 1</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_core_2</name>
          <description>U7MC Core Clock 2</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_core_3</name>
          <description>U7MC Core Clock 3</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_core_4</name>
          <description>U7MC Core Clock 4</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_debug</name>
          <description>U7MC Debug Clock</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>u7mc_rtc_toggle</name>
          <description>U7MC RTC Toggle</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=6, Default=6, Min=6, Typical=6</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_trace_0</name>
          <description>U7MC Trace Clock 0</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_trace_1</name>
          <description>U7MC Trace Clock 1</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_trace_2</name>
          <description>U7MC Trace Clock 2</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_trace_3</name>
          <description>U7MC Trace Clock 3</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_trace_4</name>
          <description>U7MC Trace Clock 4</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u7mc_trace_com</name>
          <description>U7MC Trace Clock COM</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_noc_bus_cpu_axi</name>
          <description>clk_u0_sft7110_noc_bus_clk_cpu_axi</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_noc_bus_axicfg0_axi</name>
          <description>clk_u0_sft7110_noc_bus_clk_axicfg0_axi</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_osc_div2</name>
          <description>clk_osc_div2</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pll1_div4</name>
          <description>clk_pll1_div4</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pll1_div8</name>
          <description>clk_pll1_div8</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_ddr_bus</name>
          <description>clk_ddr_bus</description>
          <addressOffset>0xac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_osc_div2, clk_pll1_div4, clk_pll1_div8</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_ddr_axi</name>
          <description>clk_u0_ddr_axi</description>
          <addressOffset>0xb0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gpu_core</name>
          <description>clk_gpu_core</description>
          <addressOffset>0xb4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=7, Default=3, Min=3, Typical=3</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_img_gpu_core_clk</name>
          <description>clk_u0_img_gpu_core_clk</description>
          <addressOffset>0xb8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_img_gpu_sys_clk</name>
          <description>clk_u0_img_gpu_sys_clk</description>
          <addressOffset>0xbc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_img_gpu_clk_apb</name>
          <description>clk_u0_img_gpu_clk_apb</description>
          <addressOffset>0xc0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_gpu_rtc_toggle</name>
          <description>clk_u0_gpu_rtc_toggle</description>
          <addressOffset>0xc4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=12, Default=12, Min=12, Typical=12</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_noc_bus_gpu_axi</name>
          <description>clk_u0_sft7110_noc_bus_clk_gpu_axi</description>
          <addressOffset>0xc8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_isp_ispcore_2x</name>
          <description>clk_u0_dom_isp_top_clk_dom_isp_top_clk_ispcore_2x</description>
          <addressOffset>0xcc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_isp_axi</name>
          <description>clk_u0_dom_isp_top_clk_dom_isp_top_clk_isp_axi</description>
          <addressOffset>0xd0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_noc_bus_isp_axi</name>
          <description>clk_u0_sft7110_noc_bus_clk_isp_axi</description>
          <addressOffset>0xd4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_hifi4_core</name>
          <description>clk_hifi4_core</description>
          <addressOffset>0xd8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=3, Min=3, Typical=3</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_hifi4_axi</name>
          <description>clk_hifi4_axi</description>
          <addressOffset>0xdc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_axi_cfg1_dec_clk_main</name>
          <description>clk_u0_axi_cfg1_dec_clk_main</description>
          <addressOffset>0xe0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_axi_cfg1_dec_clk_ahb</name>
          <description>clk_u0_axi_cfg1_dec_clk_ahb</description>
          <addressOffset>0xe4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_vout_src</name>
          <description>clk_u0_dom_vout_top_clk_dom_vout_top_clk_vout_src</description>
          <addressOffset>0xe8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_vout_axi_divcfg</name>
          <description>Clock Video Output AXI DIVCFG</description>
          <addressOffset>0xec</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=7, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_noc_display_axi</name>
          <description>Clock NOC Display AXI</description>
          <addressOffset>0xf0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_vout_ahb</name>
          <description>Clock Video Output AHB</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_vout_axi_icg</name>
          <description>Clock Video Output AXI ICG</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_vout_hdmi_tx0_mclk</name>
          <description>Clock Video Output HDMI TX0 MCLK</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_vout_mipi_phy</name>
          <description>Clock Video Output MIPI PHY Reference</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=2, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_jpeg_codec_axi</name>
          <description>Clock JPEG Codec AXI</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=16, Default=6, Min=6, Typical=6</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_codaj12_axi</name>
          <description>CODAJ12 Clock AXI</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_codaj12_core</name>
          <description>CODAJ12 Clock Core</description>
          <addressOffset>0x10c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=16, Default=6, Min=6, Typical=6</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_codaj12_apb</name>
          <description>CODAJ12 Clock APB</description>
          <addressOffset>0x110</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_vdec_axi</name>
          <description>Clock Video Decoder AXI</description>
          <addressOffset>0x114</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=7, Default=3, Min=3, Typical=3</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave511_axi</name>
          <description>Clock WAVE511 AXI</description>
          <addressOffset>0x118</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave511_bpu</name>
          <description>Clock WAVE511 BPU</description>
          <addressOffset>0x11c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=7, Default=3, Min=3, Typical=3</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave511_vce</name>
          <description>Clock WAVE511 VCE</description>
          <addressOffset>0x120</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=7, Default=2, Min=3, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave511_apb</name>
          <description>Clock WAVE511 APB</description>
          <addressOffset>0x124</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave511_jpg_arb</name>
          <description>Clock WAVE511 JPG ARB</description>
          <addressOffset>0x128</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave511_jpg_main</name>
          <description>Clock WAVE511 JPG Main</description>
          <addressOffset>0x12c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_noc_vdec_axi</name>
          <description>Clock NOC Video Decoder AXI</description>
          <addressOffset>0x130</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_venc_axi</name>
          <description>Clock Video Encoder AXI</description>
          <addressOffset>0x134</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=5, Min=5, Typical=5</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave420l_axi</name>
          <description>Clock WAVE420L AXI</description>
          <addressOffset>0x138</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave420l_bpu</name>
          <description>Clock WAVE420L BPU</description>
          <addressOffset>0x13c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=5, Min=5, Typical=5</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave420l_vce</name>
          <description>Clock WAVE420L VCE</description>
          <addressOffset>0x140</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=5, Min=5, Typical=5</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wave420l_apb</name>
          <description>Clock WAVE420L APB</description>
          <addressOffset>0x144</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_noc_venc_axi</name>
          <description>Clock NOC Video Encoder AXI</description>
          <addressOffset>0x148</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_axi_cfg0_dec_main_div</name>
          <description>Clock AXI Config 0 DEC Main Divider</description>
          <addressOffset>0x14c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_axi_cfg0_dec_main</name>
          <description>Clock AXI Config 0 DEC Main</description>
          <addressOffset>0x150</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_axi_cfg0_dec_hifi4</name>
          <description>Clock AXI Config 0 DEC HIFI4</description>
          <addressOffset>0x154</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_aximem_128b_axi</name>
          <description>Clock AXIMEM 128B AXI</description>
          <addressOffset>0x158</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_qspi_ahb</name>
          <description>Clock QSPI AHB</description>
          <addressOffset>0x15c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_qspi_apb</name>
          <description>Clock QSPI APB</description>
          <addressOffset>0x160</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_qspi_ref_src</name>
          <description>Clock QSPI Reference Source</description>
          <addressOffset>0x164</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=16, Default=10, Min=10, Typical=10</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_qspi_ref</name>
          <description>Clock QSPI Reference</description>
          <addressOffset>0x168</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_osc, clk_qspi_ref_src</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_sd_ahb</name>
          <description>U0 SD Clock AHB</description>
          <addressOffset>0x16c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_sd_ahb</name>
          <description>U1 SD Clock AHB</description>
          <addressOffset>0x170</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_sd_card</name>
          <description>U0 SD Card Clock</description>
          <addressOffset>0x174</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_sd_card</name>
          <description>U1 SD Card Clock</description>
          <addressOffset>0x178</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_usb_125m</name>
          <description>Clock USB 125M</description>
          <addressOffset>0x17c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=8, Min=12, Typical=10</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_noc_stg_axi</name>
          <description>Clock NOC STG AXI</description>
          <addressOffset>0x180</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_ahb</name>
          <description>Clock GMAC 5 AXI 64 AHB</description>
          <addressOffset>0x184</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_axi</name>
          <description>Clock GMAC 5 AXI 64 AXI</description>
          <addressOffset>0x188</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac_src</name>
          <description>Clock GMAC Source</description>
          <addressOffset>0x18c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=7, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac1_gtx</name>
          <description>Clock GMAC 1 GTX</description>
          <addressOffset>0x190</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=8, Min=12, Typical=10</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac1_rmii_rtx</name>
          <description>Clock GMAC 1 RMII RTX</description>
          <addressOffset>0x194</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=30, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_ptp</name>
          <description>Clock GMAC 5 AXI 64 PTP</description>
          <addressOffset>0x198</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=31, Default=10, Min=15, Typical=10</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_rx</name>
          <description>Clock GMAC 5 AXI 64 RX</description>
          <addressOffset>0x19c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dly_chain_sel</name>
              <description>Selector delay chain stage number, totally 32 stages, -50 ps each stage. The register value indicates the delay chain stage number. For example, diy_chain_sel=1 means to delay 1 stage.</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_rxi</name>
          <description>Clock GMAC 5 AXI 64 RX Inverter</description>
          <addressOffset>0x1a0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_tx</name>
          <description>Clock GMAC 5 AXI 64 TX</description>
          <addressOffset>0x1a4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_gmac1_gtxclk, clk_gmac1_rmii_rtx</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_txi</name>
          <description>Clock GMAC 5 AXI 64 TX Inverter</description>
          <addressOffset>0x1a8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac1_gtxclk</name>
          <description>Clock GMAC 1 GTXC</description>
          <addressOffset>0x1ac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dly_chain_sel</name>
              <description>Selector delay chain stage number, totally 32 stages, -50 ps each stage. The register value indicates the delay chain stage number. For example, diy_chain_sel=1 means to delay 1 stage.</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac0_gtx</name>
          <description>Clock GMAC 0 GTX</description>
          <addressOffset>0x1b0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=15, Default=8, Min=12, Typical=10</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac0_ptp</name>
          <description>Clock GMAC 0 PTP</description>
          <addressOffset>0x1b4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=31, Default=10, Min=15, Typical=25</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac_phy</name>
          <description>Clock GMAC PHY</description>
          <addressOffset>0x1b8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=31, Default=10, Min=15, Typical=25</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac0_gtxclk</name>
          <description>Clock GMAC 0 GTXC</description>
          <addressOffset>0x1bc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dly_chain_sel</name>
              <description>Selector delay chain stage number, totally 32 stages, -50 ps each stage. The register value indicates the delay chain stage number. For example, diy_chain_sel=1 means to delay 1 stage.</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pclk</name>
          <description>Clock SYS IOMUX PCLK</description>
          <addressOffset>0x1c0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_mbox_apb</name>
          <description>Clock Mailbox APB</description>
          <addressOffset>0x1c4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_internal_ctrl_apb</name>
          <description>Clock Internal Controller APB</description>
          <addressOffset>0x1c8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_can_ctrl_apb</name>
          <description>U0 Clock CAN Controller APB</description>
          <addressOffset>0x1cc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_can_ctrl_tim</name>
          <description>U0 Clock CAN Controller Timer</description>
          <addressOffset>0x1d0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=24, Default=24, Min=6, Typical=24</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_can_ctrl_can</name>
          <description>U0 Clock CAN Controller CAN</description>
          <addressOffset>0x1d4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=63, Default=8, Min=8, Typical=8</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_can_ctrl_apb</name>
          <description>U1 Clock CAN Controller APB</description>
          <addressOffset>0x1d8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_can_ctrl_tim</name>
          <description>U1 Clock CAN Controller Timer</description>
          <addressOffset>0x1dc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=24, Default=24, Min=6, Typical=24</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_can_ctrl_can</name>
          <description>U1 Clock CAN Controller CAN</description>
          <addressOffset>0x1e0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=63, Default=8, Min=8, Typical=8</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pwm_apb</name>
          <description>Clock PWM APB</description>
          <addressOffset>0x1e4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wdt_apb</name>
          <description>Clock WDT APB</description>
          <addressOffset>0x1e8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_wdt</name>
          <description>Clock WDT</description>
          <addressOffset>0x1ec</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tim_apb</name>
          <description>Clock Timer APB</description>
          <addressOffset>0x1f0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tim_0</name>
          <description>Clock Timer 0</description>
          <addressOffset>0x1f4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tim_1</name>
          <description>Clock Timer 1</description>
          <addressOffset>0x1f8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tim_2</name>
          <description>Clock Timer 2</description>
          <addressOffset>0x1fc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tim_3</name>
          <description>Clock Timer 3</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_temp_sensor_apb</name>
          <description>Clock Temperature Sensor APB</description>
          <addressOffset>0x204</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_temp_sensor</name>
          <description>Clock Temperature Sensor</description>
          <addressOffset>0x208</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=24, Default=24, Min=24, Typical=24</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_spi_apb</name>
          <description>U0 Clock SPI APB</description>
          <addressOffset>0x20c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_spi_apb</name>
          <description>U1 Clock SPI APB</description>
          <addressOffset>0x210</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u2_spi_apb</name>
          <description>U2 Clock SPI APB</description>
          <addressOffset>0x214</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u3_spi_apb</name>
          <description>U3 Clock SPI APB</description>
          <addressOffset>0x218</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u4_spi_apb</name>
          <description>U4 Clock SPI APB</description>
          <addressOffset>0x21c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u5_spi_apb</name>
          <description>U5 Clock SPI APB</description>
          <addressOffset>0x220</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u6_spi_apb</name>
          <description>U6 Clock SPI APB</description>
          <addressOffset>0x224</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_i2c_apb</name>
          <description>U0 Clock I2C APB</description>
          <addressOffset>0x228</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_i2c_apb</name>
          <description>U1 Clock I2C APB</description>
          <addressOffset>0x22c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u2_i2c_apb</name>
          <description>U2 Clock I2C APB</description>
          <addressOffset>0x230</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u3_i2c_apb</name>
          <description>U3 Clock I2C APB</description>
          <addressOffset>0x234</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u4_i2c_apb</name>
          <description>U4 Clock I2C APB</description>
          <addressOffset>0x238</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u5_i2c_apb</name>
          <description>U5 Clock I2C APB</description>
          <addressOffset>0x23c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u6_i2c_apb</name>
          <description>U6 Clock I2C APB</description>
          <addressOffset>0x240</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_uart_apb</name>
          <description>U0 Clock UART APB</description>
          <addressOffset>0x244</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_uart_core</name>
          <description>U0 Clock UART Core</description>
          <addressOffset>0x248</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_uart_apb</name>
          <description>U1 Clock UART APB</description>
          <addressOffset>0x24c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_uart_core</name>
          <description>U1 Clock UART Core</description>
          <addressOffset>0x250</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u2_uart_apb</name>
          <description>U2 Clock UART APB</description>
          <addressOffset>0x254</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u2_uart_core</name>
          <description>U2 Clock UART Core</description>
          <addressOffset>0x258</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u3_uart_apb</name>
          <description>U3 Clock UART APB</description>
          <addressOffset>0x25c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u3_uart_core</name>
          <description>U3 Clock UART Core</description>
          <addressOffset>0x260</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=131071, Default=2560, Min=2560, Typical=2560</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u4_uart_apb</name>
          <description>U4 Clock UART APB</description>
          <addressOffset>0x264</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u4_uart_core</name>
          <description>U4 Clock UART Core</description>
          <addressOffset>0x268</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=131071, Default=2560, Min=2560, Typical=2560</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u5_uart_apb</name>
          <description>U5 Clock UART APB</description>
          <addressOffset>0x26c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u5_uart_core</name>
          <description>U5 Clock UART Core</description>
          <addressOffset>0x270</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=131071, Default=2560, Min=2560, Typical=2560</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pwmdac_apb</name>
          <description>Clock PWMDAC APB</description>
          <addressOffset>0x274</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pwmdac_core</name>
          <description>Clock PWMDAC Core</description>
          <addressOffset>0x278</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=256, Default=12, Min=12, Typical=12</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_spdif_apb</name>
          <description>Clock SPDIF APB</description>
          <addressOffset>0x27c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_spdif_core</name>
          <description>Clock SPDIF Core</description>
          <addressOffset>0x280</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_i2s_tx_apb</name>
          <description>U0 Clock I2S TX APB</description>
          <addressOffset>0x284</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_i2stx_4ch0_bclk_mst</name>
          <description>U0 Clock I2S TX 0 BCLK MST</description>
          <addressOffset>0x288</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=32, Default=4, Min=4, Typical=4</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_i2stx_4ch0_bclk_mst_inv</name>
          <description>U0 Clock I2S TX 0 BCLK MST Inverter</description>
          <addressOffset>0x28c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2stx0_lrck_mst</name>
          <description>Clock I2S TX 0 LRCK MST</description>
          <addressOffset>0x290</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2stx_4ch0_bclk_mst_inv, clk_i2stx_4ch0_bclk_mst</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=64, Default=64, Min=64, Typical=64</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_i2stx_bclk</name>
          <description>U0 Clock I2S TX BCLK</description>
          <addressOffset>0x294</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2stx_4ch0_bclk_mst, clk_i2stx_bclk_ext</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_i2stx_bclk_neg</name>
          <description>U0 Clock I2S TX BCLK Negative</description>
          <addressOffset>0x298</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u0_i2stx_lrck</name>
          <description>U0 Clock I2S TX LRCK</description>
          <addressOffset>0x29c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2stx_4ch0_lrck_mst, clk_i2stx_lrck_ext</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_i2s_tx_apb</name>
          <description>U1 Clock I2S TX APB</description>
          <addressOffset>0x2a0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_i2stx_4ch1_bclk_mst</name>
          <description>U1 Clock I2S TX 1 BCLK MST</description>
          <addressOffset>0x2a4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=32, Default=4, Min=4, Typical=4</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_i2stx_4ch1_bclk_mst_inv</name>
          <description>U1 Clock I2S TX 1 BCLK MST Inverter</description>
          <addressOffset>0x2a8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2stx1_lrck_mst</name>
          <description>Clock I2S TX 1 LRCK MST</description>
          <addressOffset>0x2ac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2stx_4ch0_bclk_mst_inv, clk_i2stx_4ch0_bclk_mst</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=64, Default=64, Min=64, Typical=64</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_i2stx_bclk</name>
          <description>U1 Clock I2S TX BCLK</description>
          <addressOffset>0x2b0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2stx_4ch1_bclk_mst, clk_i2stx_bclk_ext</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_i2stx_bclk_neg</name>
          <description>U1 Clock I2S TX BCLK Negative</description>
          <addressOffset>0x2b4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_u1_i2stx_lrck</name>
          <description>U1 Clock I2S TX LRCK</description>
          <addressOffset>0x2b8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2stx_4ch1_lrck_mst, clk_i2stx_lrck_ext</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2s_apb</name>
          <description>Clock I2S APB</description>
          <addressOffset>0x2bc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2s_bclk_mst</name>
          <description>Clock I2S BCLK MST</description>
          <addressOffset>0x2c0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=32, Default=4, Min=4, Typical=4</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2s_bclk_mst_inv</name>
          <description>Clock I2S BCLK MST Inverter</description>
          <addressOffset>0x2c4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2s_lrck_mst</name>
          <description>Clock I2S LRCK MST</description>
          <addressOffset>0x2c8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2srx_3ch_bclk_mst_inv, clk_i2srx_3ch_bclk_mst</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=64, Default=64, Min=64, Typical=64</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2s_bclk</name>
          <description>Clock I2S BCLK</description>
          <addressOffset>0x2cc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2srx_3ch_bclk_mst, clk_i2srx_3ch_bclk_ext</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2s_bclk_neg</name>
          <description>Clock I2S BCLK Negative</description>
          <addressOffset>0x2d0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_i2s_lrck</name>
          <description>Clock I2S LRCK</description>
          <addressOffset>0x2d4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_i2srx_3ch_lrck_mst, clk_i2srx_3ch_lrck_ext</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pdm_dmic</name>
          <description>Clock PDM DMIC</description>
          <addressOffset>0x2d8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=64, Default=8, Min=8, Typical=8</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_pdm_apb</name>
          <description>Clock PDM APB</description>
          <addressOffset>0x2dc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tdm_ahb</name>
          <description>Clock TDM AHB</description>
          <addressOffset>0x2e0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tdm_apb</name>
          <description>Clock TDM APB</description>
          <addressOffset>0x2e4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tdm_internal</name>
          <description>Clock TDM Internal</description>
          <addressOffset>0x2e8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=64, Default=1, Min=1, Typical=1</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tdm</name>
          <description>Clock TDM</description>
          <addressOffset>0x2ec</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_tdm_internal, clk_tdm_ext</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_tdm_neg</name>
          <description>Clock TDM Negative</description>
          <addressOffset>0x2f0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_jtag_trng</name>
          <description>Clock JTAG Certification TRNG</description>
          <addressOffset>0x2f4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=4, Default=4, Min=4, Typical=4</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>soft_rst_addr_sel_0</name>
          <description>Software RESET 0 Address Selector</description>
          <addressOffset>0x2f8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_jtag2apb_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sys_syscon_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sys_iomux_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_bus</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_debug</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_1</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_2</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core3</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core4</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_1</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_2</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_3</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_4</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_1</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_2</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_3</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_4</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_com</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_img_gpu_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_img_gpu_doma</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_axicfg0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_cpu_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_disp_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_gpu_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_isp_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_ddrc</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_stg_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_vdec_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>soft_rst_addr_sel_1</name>
          <description>Software RESET 1 Address Selector</description>
          <addressOffset>0x2fc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_noc_bus_venc_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg1_dec_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg1_dec_main</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg0_dec_main</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg0_dec_main_div</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg0_dec_hifi4</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_ddr_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_ddr_osc</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_ddr_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_isp_top</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_isp_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vout_src</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_codaj12_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_codaj12_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_codaj12_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave511_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave511_bpu</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave511_vce</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave511_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_jpg_arb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_jpg_arb_main</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_aximem_128b_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave420l_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave420l_bpu</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave420l_vce</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave420l_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_aximem</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_aximem</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_qspi_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_qspi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_qspi_ref</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>soft_rst_addr_sel_2</name>
          <description>Software RESET 2 Address Selector</description>
          <addressOffset>0x300</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_sdio_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_sdi_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_hresetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_mailbox_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u3_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u4_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u5_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u6_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u3_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u4_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u5_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u6_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u3_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u3_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u4_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u4_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u5_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u6_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_spdif_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>soft_rst_addr_sel_3</name>
          <description>Software RESET 3 Address Selector</description>
          <addressOffset>0x304</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pwmdac_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pdm_4mic_dmic</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pdm_4mic_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2srx_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2srx_bclk</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2stx_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2stx_bclk</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_i2stx_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_i2stx_bclk</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_tdm16slot_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_tdm16slot_tdm</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_tdm16slot_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pwm_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_dskit_wdt_rstn_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_dskit_wdt</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_can_ctrl_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_can_ctrl</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_can_ctrl_timer</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_can_ctrl_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_can_ctrl_can</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_can_ctrl_timer</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_1</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_2</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_3</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_int_ctrl_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_temp_sensor_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_temp_sensor</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_jtag_rst</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>syscrg_rst_status_0</name>
          <description>SYSCRG RESET Status 0</description>
          <addressOffset>0x308</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_jtag2apb_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sys_syscon_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_sys_iomux_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_bus</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_debug</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_1</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_2</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core3</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core4</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_1</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_2</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_3</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_core_st_4</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_1</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_2</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_3</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_4</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_com</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_img_gpu_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_img_gpu_doma</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_axicfg0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_cpu_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_disp_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_gpu_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_isp_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_ddrc</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_stg_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_noc_bus_vdec_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>syscrg_rst_status_1</name>
          <description>SYSCRG RESET Status 1</description>
          <addressOffset>0x30c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_noc_bus_venc_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg1_dec_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg1_dec_main</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg0_dec_main</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg0_dec_main_div</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_axi_cfg0_dec_hifi4</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_ddr_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_ddr_osc</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_ddr_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_isp_top</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_isp_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vout_src</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_codaj12_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_codaj12_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_codaj12_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave511_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave511_bpu</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave511_vce</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave511_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_jpg_arb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_jpg_arb_main</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_aximem_128b_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave420l_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave420l_bpu</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave420l_vce</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wave420l_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_aximem</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_aximem</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_qspi_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_qspi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_qspi_ref</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>syscrg_rst_status_2</name>
          <description>SYSCRG RESET Status 2</description>
          <addressOffset>0x310</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_sdio_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_sdi_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_hresetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_mailbox_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u3_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u4_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u5_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u6_spi_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u3_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u4_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u5_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u6_i2c_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u2_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u3_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u3_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u4_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u4_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u5_uart_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u6_uart_core</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_spdif_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>syscrg_rst_status_3</name>
          <description>SYSCRG RESET Status 3</description>
          <addressOffset>0x314</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_pwmdac_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pdm_4mic_dmic</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pdm_4mic_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2srx_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2srx_bclk</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2stx_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_i2stx_bclk</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_i2stx_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_i2stx_bclk</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_tdm16slot_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_tdm16slot_tdm</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_tdm16slot_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_pwm_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_dskit_wdt_rstn_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_dskit_wdt</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_can_ctrl_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_can_ctrl</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_can_ctrl_timer</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_can_ctrl_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_can_ctrl_can</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_can_ctrl_timer</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_0</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_1</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_2</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_si5_timer_3</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_int_ctrl_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_temp_sensor_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_temp_sensor</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_jtag_rst</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>sys_syscon</name>
      <description>From starfive,jh7110-sys-syscon, peripheral generator</description>
      <baseAddress>0x13030000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>sys_syscfg_0</name>
          <description>SYS SYSCONSAIF SYSCFG 0</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>e24_remap_haddr</name>
              <description>e24_remap_haddr</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hifi4_idma_remap_araddr</name>
              <description>hifi4_idma_remap_araddr</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hifi4_idma_remap_awaddr</name>
              <description>hifi4_idma_remap_awaddr</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hifi4_sys_remap_araddr</name>
              <description>hifi4_sys_remap_araddr</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hifi4_sys_remap_awaddr</name>
              <description>hifi4_sys_remap_awaddr</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>jpg_remap_araddr</name>
              <description>jpg_remap_araddr</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>jpg_remap_awaddr</name>
              <description>jpg_remap_awaddr</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sd0_remap_araddr</name>
              <description>sd0_remap_araddr</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_1</name>
          <description>SYS SYSCONSAIF SYSCFG 4</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sd1_remap_awaddr</name>
              <description>sd1_remap_awaddr</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sec_haddr_remap</name>
              <description>sec_haddr_remap</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>usb_araddr_remap</name>
              <description>usb_araddr_remap</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>usb_awaddr_remap</name>
              <description>usb_awaddr_remap</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vdec_remap_awaddr</name>
              <description>vdec_remap_awaddr</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>venc_remap_araddr</name>
              <description>venc_remap_araddr</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>venc_remap_awaddr</name>
              <description>venc_remap_awaddr</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout0_remap_araddr</name>
              <description>vout0_remap_araddr</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_2</name>
          <description>SYS SYSCONSAIF SYSCFG 8</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>vout0_remap_awaddr</name>
              <description>vout0_remap_awaddr</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout1_remap_araddr</name>
              <description>vout1_remap_araddr</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout1_remap_awaddr</name>
              <description>vout1_remap_awaddr</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_3</name>
          <description>SYS SYSCONSAIF SYSCFG 12: Set the GPIO voltage of all the 4 GPIO groups in this register</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>vout0_remap_awaddr_gpio0</name>
              <description>0: GPIO Group 0 (GPIO21-35) voltage select 3.3V, 1: GPIO Group 0 (GPIO21-35) voltage select 1.8V</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout0_remap_awaddr_gpio1</name>
              <description>0: GPIO Group 1 (GPIO36-63) voltage select 3.3V, 1: GPIO Group 1 (GPIO36-63) voltage select 1.8V</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout0_remap_awaddr_gpio2</name>
              <description>0: GPIO Group 2 (GPIO0-6) voltage select 3.3V, 1: GPIO Group 2 (GPIO0-6) voltage select 1.8V</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout0_remap_awaddr_gpio3</name>
              <description>0: GPIO Group 3 (GPIO7-20) voltage select 3.3V, 1: GPIO Group 3 (GPIO7-20) voltage select 1.8V</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_4</name>
          <description>SYS SYSCONSAIF SYSCFG 16</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>coda12_cur_inst</name>
              <description>Tie 0 in JPU internal, do not care</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>wave511_vpu_idle</name>
              <description>VPU monitoring signal</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>can_ctrl_fd_enable_0</name>
              <description>can_ctrl_fd_enable_0</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>can_ctrl_host_ecc_disable_0</name>
              <description>can_ctrl_host_ecc_disable_0</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>can_ctrl_host_if_0</name>
              <description>can_ctrl_host_if_0</description>
              <bitRange>[23:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>qspi_sclk_dlychain_sel</name>
              <description>des_qspi_sclk_dla: clock delay</description>
              <bitRange>[28:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_5</name>
          <description>SYS SYSCONSAIF SYSCFG 20</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_cdns_qspi_scfg_sram_config_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_qspi_scfg_sram_config_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_qspi_scfg_sram_config_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_qspi_scfg_sram_config_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_qspi_scfg_sram_config_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_qspi_scfg_sram_config_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_qspi_scfg_sram_config_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_qspi_scfg_sram_config_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_spdif_scfg_sram_config_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_spdif_scfg_sram_config_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_spdif_scfg_sram_config_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_spdif_scfg_sram_config_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_spdif_scfg_sram_config_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_spdif_scfg_sram_config_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_spdif_scfg_sram_config_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cdns_spdif_scfg_sram_config_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spdif_trmodeo</name>
              <description>1 for transmitter 0 for receiver</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>i2c_ic_en</name>
              <description>I2C interface enable</description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sdio_data_strobe_phase_ctrl</name>
              <description>Data strobe delay chain select</description>
              <bitRange>[30:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_hbig_endian</name>
              <description>AHB bus interface endianness: 1: Big-endian AHB bus interface, 0: Little-endian AHB bus interface</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_6</name>
          <description>SYS SYSCONSAIF SYSCFG 24</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdio_m_hbig_endian</name>
              <description>AHB master bus interface endianess: 1: Big-endian AHB bus interface, 0: Little-endian AHB bus interface</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2srx_adc_en</name>
              <description>i2srx_adc_en</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>intmem_rom_sram_scfg_disable_rom</name>
              <description>intmem_rom_sram_scfg_disable_rom</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram_sram_config_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram_sram_config_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram_sram_config_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram_sram_config_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[8:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram_sram_config_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[10:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram_sram_config_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[12:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram_sram_config_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_intmem_rom_sram_sram_config_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>jtag_daisy_chain_en_0</name>
              <description>jtag_daisy_chain_en_0</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>jtag_daisy_chain_en_1</name>
              <description>jtag_daisy_chain_en_1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pdrstn_usbpipe_plugen</name>
              <description>pdrstn_usbpipe_plugen</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_cpi_bias</name>
              <description>pll0_cpi_bias</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_cpp_bias</name>
              <description>pll0_cpp_bias</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_dacpd</name>
              <description>pll0_dacpd</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_dsmpd</name>
              <description>pll0_dsmpd</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_7</name>
          <description>SYS SYSCONSAIF SYSCFG 28</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pll0_fbdiv</name>
              <description>pll0_fbdiv</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_8</name>
          <description>SYS SYSCONSAIF SYSCFG 32</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pll0_frac</name>
              <description>pll0_frac</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_gvco_bias</name>
              <description>pll0_gvco_bias</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_lock</name>
              <description>pll0_lock</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pll0_pd</name>
              <description>pll0_pd</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_postdiv1</name>
              <description>pll0_postdiv1</description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_postdiv2</name>
              <description>pll0_postdiv2</description>
              <bitRange>[31:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_9</name>
          <description>SYS SYSCONSAIF SYSCFG 36</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pll0_prediv</name>
              <description>pll0_prediv</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_testen</name>
              <description>pll0_testen</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll0_testsel</name>
              <description>pll0_testsel</description>
              <bitRange>[8:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_cpi_bias</name>
              <description>pll1_cpi_bias</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_cpp_bias</name>
              <description>pll1_cpp_bias</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_dacpd</name>
              <description>pll1_dacpd</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_dsmpd</name>
              <description>pll1_dsmpd</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_fbdiv</name>
              <description>pll1_fbdiv</description>
              <bitRange>[28:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_10</name>
          <description>SYS SYSCONSAIF SYSCFG 40</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pll1_frac</name>
              <description>pll1_frac</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_gvco_bias</name>
              <description>pll1_gvco_bias</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_lock</name>
              <description>pll1_lock</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pll1_pd</name>
              <description>pll1_pd</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_postdiv1</name>
              <description>pll1_postdiv1</description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_postdiv2</name>
              <description>pll1_postdiv2</description>
              <bitRange>[31:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_11</name>
          <description>SYS SYSCONSAIF SYSCFG 44</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pll1_prediv</name>
              <description>pll1_prediv</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_testen</name>
              <description>pll1_testen</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll1_testsel</name>
              <description>pll1_testsel</description>
              <bitRange>[8:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_cpi_bias</name>
              <description>pll2_cpi_bias</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_cpp_bias</name>
              <description>pll2_cpp_bias</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_dacpd</name>
              <description>pll2_dacpd</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_dsmpd</name>
              <description>pll2_dsmpd</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_fbdiv</name>
              <description>pll2_fbdiv</description>
              <bitRange>[28:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_12</name>
          <description>SYS SYSCONSAIF SYSCFG 48</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pll2_frac</name>
              <description>pll2_frac</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_gvco_bias</name>
              <description>pll2_gvco_bias</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_lock</name>
              <description>pll2_lock</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pll2_pd</name>
              <description>pll2_pd</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_postdiv1</name>
              <description>pll2_postdiv1</description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_postdiv2</name>
              <description>pll2_postdiv2</description>
              <bitRange>[31:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_13</name>
          <description>SYS SYSCONSAIF SYSCFG 52</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pll2_prediv</name>
              <description>pll2_prediv</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_testen</name>
              <description>pll2_testen</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll2_testsel</name>
              <description>pll2_testsel</description>
              <bitRange>[8:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pll_test_mode</name>
              <description>PLL test mode, only used for PLL BIST through jtag2apb</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>audio_i2sdin_sel</name>
              <description>audio_i2sdin_sel</description>
              <bitRange>[17:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_clock_gating_off</name>
              <description>noc_bus_clock_gating_off</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_0</name>
              <description>noc_bus_oic_evemon_start_0</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_trigger_0</name>
              <description>noc_bus_oic_evemon_trigger_0</description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_1</name>
              <description>noc_bus_oic_evemon_start_1</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_trigger_1</name>
              <description>noc_bus_oic_evemon_trigger_1</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_2</name>
              <description>noc_bus_oic_evemon_start_2</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_trigger_2</name>
              <description>noc_bus_oic_evemon_trigger_2</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_3</name>
              <description>noc_bus_oic_evemon_start_3</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_trigger_3</name>
              <description>noc_bus_oic_evemon_trigger_3</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_4</name>
              <description>noc_bus_oic_evemon_start_4</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_trigger_4</name>
              <description>noc_bus_oic_evemon_trigger_4</description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_5</name>
              <description>noc_bus_oic_evemon_start_5</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_trigger_5</name>
              <description>noc_bus_oic_evemon_trigger_5</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_6</name>
              <description>noc_bus_oic_evemon_start_6</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_14</name>
          <description>SYS SYSCONSAIF SYSCFG 56</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_evemon_trigger_6</name>
              <description>noc_bus_oic_evemon_trigger_6</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_7</name>
              <description>noc_bus_oic_evemon_start_7</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_trigger_7</name>
              <description>noc_bus_oic_evemon_trigger_7</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_start_8</name>
              <description>noc_bus_oic_evemon_start_8</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_evemon_trigger_8</name>
              <description>noc_bus_oic_evemon_trigger_8</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>noc_bus_oic_ignore_modifiable_0</name>
              <description>noc_bus_oic_ignore_modifiable_0</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_ignore_modifiable_1</name>
              <description>noc_bus_oic_ignore_modifiable_1</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_ignore_modifiable_2</name>
              <description>noc_bus_oic_ignore_modifiable_2</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_ignore_modifiable_3</name>
              <description>noc_bus_oic_ignore_modifiable_3</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>noc_bus_oic_ignore_modifiable_4</name>
              <description>noc_bus_oic_ignore_modifiable_4</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_15</name>
          <description>SYS SYSCONSAIF SYSCFG 60</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_0</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_0</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_16</name>
          <description>SYS SYSCONSAIF SYSCFG 64</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_1</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_17</name>
          <description>SYS SYSCONSAIF SYSCFG 68</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_2</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_2</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_18</name>
          <description>SYS SYSCONSAIF SYSCFG 72</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_3</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_3</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_19</name>
          <description>SYS SYSCONSAIF SYSCFG 76</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_4</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_4</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_20</name>
          <description>SYS SYSCONSAIF SYSCFG 80</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_5</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_5</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_21</name>
          <description>SYS SYSCONSAIF SYSCFG 84</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_6</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_6</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_22</name>
          <description>SYS SYSCONSAIF SYSCFG 88</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_7</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_7</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_23</name>
          <description>SYS SYSCONSAIF SYSCFG 92</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>noc_bus_oic_qch_clock_stop_threshold_8</name>
              <description>noc_bus_oic_qch_clock_stop_threshold_8</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_24</name>
          <description>SYS SYSCONSAIF SYSCFG 96</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>tdm16slot_clkpol</name>
              <description>tdm16slot_clkpol</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tdm16slot_pcm_ms</name>
              <description>tdm16slot_pcm_ms</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_trace_mtx_in0_0</name>
              <description>u0_trace_mtx_in0_0</description>
              <bitRange>[6:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_mtx_in1_0</name>
              <description>u0_trace_mtx_in1_0</description>
              <bitRange>[11:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_mtx_in0_1</name>
              <description>u0_trace_mtx_in0_1</description>
              <bitRange>[16:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_mtx_in1_1</name>
              <description>u0_trace_mtx_in1_1</description>
              <bitRange>[21:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_mtx_in0_2</name>
              <description>u0_trace_mtx_in0_2</description>
              <bitRange>[26:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_mtx_in1_2</name>
              <description>u0_trace_mtx_in1_2</description>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_25</name>
          <description>SYS SYSCONSAIF SYSCFG 100</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_trace_mtx_scfg_c3_in0_ctl</name>
              <description>u0_trace_mtx_scfg_c3_in0_ctl</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_mtx_scfg_c3_in1_ctl</name>
              <description>u0_trace_mtx_scfg_c3_in1_ctl</description>
              <bitRange>[9:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_mtx_scfg_c4_in0_ctl</name>
              <description>u0_trace_mtx_scfg_c4_in0_ctl</description>
              <bitRange>[14:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_trace_mtx_scfg_c4_in1_ctl</name>
              <description>u0_trace_mtx_scfg_c4_in1_ctl</description>
              <bitRange>[19:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_cease_from_tile_0</name>
              <description>u0_cease_from_tile_0</description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_cease_from_tile_1</name>
              <description>u0_cease_from_tile_1</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_cease_from_tile_2</name>
              <description>u0_cease_from_tile_2</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_cease_from_tile_3</name>
              <description>u0_cease_from_tile_3</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_cease_from_tile_4</name>
              <description>u0_cease_from_tile_4</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_halt_from_tile_0</name>
              <description>u0_halt_from_tile_0</description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_halt_from_tile_1</name>
              <description>u0_halt_from_tile_1</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_halt_from_tile_2</name>
              <description>u0_halt_from_tile_2</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_halt_from_tile_3</name>
              <description>u0_halt_from_tile_3</description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_halt_from_tile_4</name>
              <description>u0_halt_from_tile_4</description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_26</name>
          <description>SYS SYSCONSAIF SYSCFG 26</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>reset_vector_1_0</name>
              <description>U0 U74MC Reset Vector 1: 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_1</name>
              <description>U0 U74MC Reset Vector 1: 1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_2</name>
              <description>U0 U74MC Reset Vector 1: 2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_3</name>
              <description>U0 U74MC Reset Vector 1: 3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_4</name>
              <description>U0 U74MC Reset Vector 1: 4</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_5</name>
              <description>U0 U74MC Reset Vector 1: 5</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_6</name>
              <description>U0 U74MC Reset Vector 1: 6</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_7</name>
              <description>U0 U74MC Reset Vector 1: 7</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_8</name>
              <description>U0 U74MC Reset Vector 1: 8</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_9</name>
              <description>U0 U74MC Reset Vector 1: 9</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_10</name>
              <description>U0 U74MC Reset Vector 1: 10</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_11</name>
              <description>U0 U74MC Reset Vector 1: 11</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_12</name>
              <description>U0 U74MC Reset Vector 1: 12</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_13</name>
              <description>U0 U74MC Reset Vector 1: 13</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_14</name>
              <description>U0 U74MC Reset Vector 1: 14</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_15</name>
              <description>U0 U74MC Reset Vector 1: 15</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_16</name>
              <description>U0 U74MC Reset Vector 1: 16</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_17</name>
              <description>U0 U74MC Reset Vector 1: 17</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_18</name>
              <description>U0 U74MC Reset Vector 1: 18</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_19</name>
              <description>U0 U74MC Reset Vector 1: 19</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_20</name>
              <description>U0 U74MC Reset Vector 1: 20</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_21</name>
              <description>U0 U74MC Reset Vector 1: 21</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_22</name>
              <description>U0 U74MC Reset Vector 1: 22</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_23</name>
              <description>U0 U74MC Reset Vector 1: 23</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_24</name>
              <description>U0 U74MC Reset Vector 1: 24</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_25</name>
              <description>U0 U74MC Reset Vector 1: 25</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_26</name>
              <description>U0 U74MC Reset Vector 1: 26</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_27</name>
              <description>U0 U74MC Reset Vector 1: 27</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_28</name>
              <description>U0 U74MC Reset Vector 1: 28</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_29</name>
              <description>U0 U74MC Reset Vector 1: 29</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_30</name>
              <description>U0 U74MC Reset Vector 1: 30</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_31</name>
              <description>U0 U74MC Reset Vector 1: 31</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_27</name>
          <description>SYS SYSCONSAIF SYSCFG 27</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>reset_vector_1_32</name>
              <description>U0 U74MC Reset Vector 1: 32</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_33</name>
              <description>U0 U74MC Reset Vector 1: 33</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_34</name>
              <description>U0 U74MC Reset Vector 1: 34</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_1_35</name>
              <description>U0 U74MC Reset Vector 1: 35</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_28</name>
          <description>SYS SYSCONSAIF SYSCFG 28</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>reset_vector_2_0</name>
              <description>U0 U74MC Reset Vector 2: 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_1</name>
              <description>U0 U74MC Reset Vector 2: 1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_2</name>
              <description>U0 U74MC Reset Vector 2: 2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_3</name>
              <description>U0 U74MC Reset Vector 2: 3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_4</name>
              <description>U0 U74MC Reset Vector 2: 4</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_5</name>
              <description>U0 U74MC Reset Vector 2: 5</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_6</name>
              <description>U0 U74MC Reset Vector 2: 6</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_7</name>
              <description>U0 U74MC Reset Vector 2: 7</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_8</name>
              <description>U0 U74MC Reset Vector 2: 8</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_9</name>
              <description>U0 U74MC Reset Vector 2: 9</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_10</name>
              <description>U0 U74MC Reset Vector 2: 10</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_11</name>
              <description>U0 U74MC Reset Vector 2: 11</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_12</name>
              <description>U0 U74MC Reset Vector 2: 12</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_13</name>
              <description>U0 U74MC Reset Vector 2: 13</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_14</name>
              <description>U0 U74MC Reset Vector 2: 14</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_15</name>
              <description>U0 U74MC Reset Vector 2: 15</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_16</name>
              <description>U0 U74MC Reset Vector 2: 16</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_17</name>
              <description>U0 U74MC Reset Vector 2: 17</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_18</name>
              <description>U0 U74MC Reset Vector 2: 18</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_19</name>
              <description>U0 U74MC Reset Vector 2: 19</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_20</name>
              <description>U0 U74MC Reset Vector 2: 20</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_21</name>
              <description>U0 U74MC Reset Vector 2: 21</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_22</name>
              <description>U0 U74MC Reset Vector 2: 22</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_23</name>
              <description>U0 U74MC Reset Vector 2: 23</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_24</name>
              <description>U0 U74MC Reset Vector 2: 24</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_25</name>
              <description>U0 U74MC Reset Vector 2: 25</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_26</name>
              <description>U0 U74MC Reset Vector 2: 26</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_27</name>
              <description>U0 U74MC Reset Vector 2: 27</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_28</name>
              <description>U0 U74MC Reset Vector 2: 28</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_29</name>
              <description>U0 U74MC Reset Vector 2: 29</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_30</name>
              <description>U0 U74MC Reset Vector 2: 30</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_31</name>
              <description>U0 U74MC Reset Vector 2: 31</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_29</name>
          <description>SYS SYSCONSAIF SYSCFG 29</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>reset_vector_2_32</name>
              <description>U0 U74MC Reset Vector 2: 32</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_33</name>
              <description>U0 U74MC Reset Vector 2: 33</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_34</name>
              <description>U0 U74MC Reset Vector 2: 34</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_2_35</name>
              <description>U0 U74MC Reset Vector 2: 35</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_30</name>
          <description>SYS SYSCONSAIF SYSCFG 30</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>reset_vector_3_0</name>
              <description>U0 U74MC Reset Vector 3: 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_1</name>
              <description>U0 U74MC Reset Vector 3: 1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_2</name>
              <description>U0 U74MC Reset Vector 3: 2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_3</name>
              <description>U0 U74MC Reset Vector 3: 3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_4</name>
              <description>U0 U74MC Reset Vector 3: 4</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_5</name>
              <description>U0 U74MC Reset Vector 3: 5</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_6</name>
              <description>U0 U74MC Reset Vector 3: 6</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_7</name>
              <description>U0 U74MC Reset Vector 3: 7</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_8</name>
              <description>U0 U74MC Reset Vector 3: 8</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_9</name>
              <description>U0 U74MC Reset Vector 3: 9</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_10</name>
              <description>U0 U74MC Reset Vector 3: 10</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_11</name>
              <description>U0 U74MC Reset Vector 3: 11</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_12</name>
              <description>U0 U74MC Reset Vector 3: 12</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_13</name>
              <description>U0 U74MC Reset Vector 3: 13</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_14</name>
              <description>U0 U74MC Reset Vector 3: 14</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_15</name>
              <description>U0 U74MC Reset Vector 3: 15</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_16</name>
              <description>U0 U74MC Reset Vector 3: 16</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_17</name>
              <description>U0 U74MC Reset Vector 3: 17</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_18</name>
              <description>U0 U74MC Reset Vector 3: 18</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_19</name>
              <description>U0 U74MC Reset Vector 3: 19</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_20</name>
              <description>U0 U74MC Reset Vector 3: 20</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_21</name>
              <description>U0 U74MC Reset Vector 3: 21</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_22</name>
              <description>U0 U74MC Reset Vector 3: 22</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_23</name>
              <description>U0 U74MC Reset Vector 3: 23</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_24</name>
              <description>U0 U74MC Reset Vector 3: 24</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_25</name>
              <description>U0 U74MC Reset Vector 3: 25</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_26</name>
              <description>U0 U74MC Reset Vector 3: 26</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_27</name>
              <description>U0 U74MC Reset Vector 3: 27</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_28</name>
              <description>U0 U74MC Reset Vector 3: 28</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_29</name>
              <description>U0 U74MC Reset Vector 3: 29</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_30</name>
              <description>U0 U74MC Reset Vector 3: 30</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_31</name>
              <description>U0 U74MC Reset Vector 3: 31</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_31</name>
          <description>SYS SYSCONSAIF SYSCFG 31</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>reset_vector_3_32</name>
              <description>U0 U74MC Reset Vector 3: 32</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_33</name>
              <description>U0 U74MC Reset Vector 3: 33</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_34</name>
              <description>U0 U74MC Reset Vector 3: 34</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_3_35</name>
              <description>U0 U74MC Reset Vector 3: 35</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_32</name>
          <description>SYS SYSCONSAIF SYSCFG 32</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>reset_vector_4_0</name>
              <description>U0 U74MC Reset Vector 4: 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_1</name>
              <description>U0 U74MC Reset Vector 4: 1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_2</name>
              <description>U0 U74MC Reset Vector 4: 2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_3</name>
              <description>U0 U74MC Reset Vector 4: 3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_4</name>
              <description>U0 U74MC Reset Vector 4: 4</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_5</name>
              <description>U0 U74MC Reset Vector 4: 5</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_6</name>
              <description>U0 U74MC Reset Vector 4: 6</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_7</name>
              <description>U0 U74MC Reset Vector 4: 7</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_8</name>
              <description>U0 U74MC Reset Vector 4: 8</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_9</name>
              <description>U0 U74MC Reset Vector 4: 9</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_10</name>
              <description>U0 U74MC Reset Vector 4: 10</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_11</name>
              <description>U0 U74MC Reset Vector 4: 11</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_12</name>
              <description>U0 U74MC Reset Vector 4: 12</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_13</name>
              <description>U0 U74MC Reset Vector 4: 13</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_14</name>
              <description>U0 U74MC Reset Vector 4: 14</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_15</name>
              <description>U0 U74MC Reset Vector 4: 15</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_16</name>
              <description>U0 U74MC Reset Vector 4: 16</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_17</name>
              <description>U0 U74MC Reset Vector 4: 17</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_18</name>
              <description>U0 U74MC Reset Vector 4: 18</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_19</name>
              <description>U0 U74MC Reset Vector 4: 19</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_20</name>
              <description>U0 U74MC Reset Vector 4: 20</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_21</name>
              <description>U0 U74MC Reset Vector 4: 21</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_22</name>
              <description>U0 U74MC Reset Vector 4: 22</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_23</name>
              <description>U0 U74MC Reset Vector 4: 23</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_24</name>
              <description>U0 U74MC Reset Vector 4: 24</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_25</name>
              <description>U0 U74MC Reset Vector 4: 25</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_26</name>
              <description>U0 U74MC Reset Vector 4: 26</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_27</name>
              <description>U0 U74MC Reset Vector 4: 27</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_28</name>
              <description>U0 U74MC Reset Vector 4: 28</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_29</name>
              <description>U0 U74MC Reset Vector 4: 29</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_30</name>
              <description>U0 U74MC Reset Vector 4: 30</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_31</name>
              <description>U0 U74MC Reset Vector 4: 31</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_33</name>
          <description>SYS SYSCONSAIF SYSCFG 132</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>reset_vector_4_32</name>
              <description>U0 U74MC Reset Vector 4: 32</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_33</name>
              <description>U0 U74MC Reset Vector 4: 33</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_34</name>
              <description>U0 U74MC Reset Vector 4: 34</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_vector_4_35</name>
              <description>U0 U74MC Reset Vector 4: 35</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_suppress_fetch_1</name>
              <description>u0_suppress_fetch_1</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_suppress_fetch_2</name>
              <description>u0_suppress_fetch_2</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_suppress_fetch_3</name>
              <description>u0_suppress_fetch_3</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_suppress_fetch_4</name>
              <description>u0_suppress_fetch_4</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wfi_from_tile_0</name>
              <description>u0_wfi_from_tile_0</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wfi_from_tile_1</name>
              <description>u0_wfi_from_tile_1</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wfi_from_tile_2</name>
              <description>u0_wfi_from_tile_2</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wfi_from_tile_3</name>
              <description>u0_wfi_from_tile_3</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_wfi_from_tile_4</name>
              <description>u0_wfi_from_tile_4</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_intsram_sram_config_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_intsram_sram_config_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_intsram_sram_config_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[16:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_intsram_sram_config_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_intsram_sram_config_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[20:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_intsram_sram_config_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[22:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_intsram_sram_config_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_vdec_intsram_sram_config_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_34</name>
          <description>SYS SYSCONSAIF SYSCFG 136</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_venc_intsram_sram_config_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_venc_intsram_sram_config_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_venc_intsram_sram_config_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_venc_intsram_sram_config_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_venc_intsram_sram_config_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_venc_intsram_sram_config_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_venc_intsram_sram_config_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_venc_intsram_sram_config_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>wave420l_ipu_current_buffer</name>
              <description>This signal indicates which buffer is currently active so that the VPU can correctly use the ipu_end_of_row signal for row counter.</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>wave420l_ipu_end_of_row</name>
              <description>This signal is flipped every time when the IPU completes writing a row.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>wave420l_ipu_new_frame</name>
              <description>This signal is flipped every time when the IPU completes writing a new frame.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>wave420l_vpu_idle</name>
              <description>VPU monitoring signal. This signal gives out an opposite value of VPU_BUSY register.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>can_ctrl_fd_enable_1</name>
              <description>can_ctrl_fd_enable_1</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>can_ctrl_host_ecc_disable_1</name>
              <description>can_ctrl_host_ecc_disable_1</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_35</name>
          <description>SYS SYSCONSAIF SYSCFG 140</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>can_ctrl_host_if_1</name>
              <description>can_ctrl_host_if_1</description>
              <bitRange>[18:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_scfg_ram_cfg_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_scfg_ram_cfg_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_scfg_ram_cfg_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[22:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_scfg_ram_cfg_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[24:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_scfg_ram_cfg_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[26:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_scfg_ram_cfg_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[28:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_scfg_ram_cfg_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u1_gmac5_axi64_scfg_ram_cfg_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_36</name>
          <description>SYS SYSCONSAIF SYSCFG 144</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gmac5_axi64_mac_speed</name>
              <description>gmac5_axi64_mac_speed</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gmac5_axi64_phy_intf_sel</name>
              <description>Active PHY Selected | When you have multiple GMAC PHY interfaces in your configuration, this field indicates the sampled value of the PHY selector during reset de-assertion. | Values: 0x0:(GMII or MII), 0x01:RGMII, 0x2:SGMII, 0x3:TBI, 0x4:RMII, 0x5:RTBI, 0x6:SMII, 0x7:REVMII</description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_37</name>
          <description>SYS SYSCONSAIF SYSCFG 148</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gmac5_axi64_ptp_timestamp_0_31</name>
              <description>gmac5_axi64_ptp_timestamp_0_31</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_38</name>
          <description>SYS SYSCONSAIF SYSCFG 152</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gmac5_axi64_ptp_timestamp_32_63</name>
              <description>gmac5_axi64_ptp_timestamp_32_63</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sys_syscfg_39</name>
          <description>SYS SYSCONSAIF SYSCFG 156</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>i2c_ic_en_1</name>
              <description>I2C interface enable.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sdio_data_strobe_phase_ctrl_1</name>
              <description>Data strobe delay chain select.</description>
              <bitRange>[5:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_hbig_endian_1</name>
              <description>AHB bus interface endianness: 1: Big-endian AHB bus interface, 0: Little-endian AHB bus interface</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_m_hbig_endian_1</name>
              <description>AHB bus interface endianness: 1: Big-endian AHB bus interface, 0: Little-endian AHB bus interface</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_ctrl_clr_reset_status_1</name>
              <description>reset_ctrl_clr_reset_status_1</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_ctrl_pll_timecnt_finish_1</name>
              <description>reset_ctrl_pll_timecnt_finish_1</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>reset_ctrl_rstn_sw_1</name>
              <description>reset_ctrl_rstn_sw_1</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reset_ctrl_sys_reset_status_1</name>
              <description>reset_ctrl_sys_reset_status_1</description>
              <bitRange>[14:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>i2c_ic_en_2</name>
              <description>I2C interface enable.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>i2c_ic_en_3</name>
              <description>I2C interface enable.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>i2c_ic_en_4</name>
              <description>I2C interface enable.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>i2c_ic_en_5</name>
              <description>I2C interface enable.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>i2c_ic_en_6</name>
              <description>I2C interface enable.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>syscon_1</name>
      <description>From syscon, peripheral generator</description>
      <baseAddress>0x13030000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>simple_mfd_0</name>
      <description>From simple-mfd, peripheral generator</description>
      <baseAddress>0x13030000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>sys_pinctrl</name>
      <description>From starfive,jh7110-sys-pinctrl, peripheral generator</description>
      <baseAddress>0x13040000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>gpo_doen_0</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 0 DOEN</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>134283521</resetValue>
          <fields>
            <field>
              <name>doen_0</name>
              <description>The selected OEN signal for GPIO0. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_1</name>
              <description>The selected OEN signal for GPIO1. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_2</name>
              <description>The selected OEN signal for GPIO2. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_3</name>
              <description>The selected OEN signal for GPIO3. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_1</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 1 DOEN</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>65537</resetValue>
          <fields>
            <field>
              <name>doen_4</name>
              <description>The selected OEN signal for GPIO4. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_5</name>
              <description>The selected OEN signal for GPIO5. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_6</name>
              <description>The selected OEN signal for GPIO6. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_7</name>
              <description>The selected OEN signal for GPIO7. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_2</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 2 DOEN</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>117506304</resetValue>
          <fields>
            <field>
              <name>doen_8</name>
              <description>The selected OEN signal for GPIO8. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_9</name>
              <description>The selected OEN signal for GPIO9. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_10</name>
              <description>The selected OEN signal for GPIO10. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_11</name>
              <description>The selected OEN signal for GPIO11. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_3</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 3 DOEN</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>257</resetValue>
          <fields>
            <field>
              <name>doen_12</name>
              <description>The selected OEN signal for GPIO12. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_13</name>
              <description>The selected OEN signal for GPIO13. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_14</name>
              <description>The selected OEN signal for GPIO14. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_15</name>
              <description>The selected OEN signal for GPIO15. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_4</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 4 DOEN</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>16777216</resetValue>
          <fields>
            <field>
              <name>doen_16</name>
              <description>The selected OEN signal for GPIO16. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_17</name>
              <description>The selected OEN signal for GPIO17. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_18</name>
              <description>The selected OEN signal for GPIO18. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_19</name>
              <description>The selected OEN signal for GPIO19. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_5</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 5 DOEN</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>doen_20</name>
              <description>The selected OEN signal for GPIO20. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_21</name>
              <description>The selected OEN signal for GPIO21. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_22</name>
              <description>The selected OEN signal for GPIO22. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_23</name>
              <description>The selected OEN signal for GPIO23. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_6</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 6 DOEN</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>doen_24</name>
              <description>The selected OEN signal for GPIO24. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_25</name>
              <description>The selected OEN signal for GPIO25. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_26</name>
              <description>The selected OEN signal for GPIO26. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_27</name>
              <description>The selected OEN signal for GPIO27. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_7</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 7 DOEN</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>doen_28</name>
              <description>The selected OEN signal for GPIO28. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_29</name>
              <description>The selected OEN signal for GPIO29. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_30</name>
              <description>The selected OEN signal for GPIO30. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_31</name>
              <description>The selected OEN signal for GPIO31. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_8</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 8 DOEN</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>doen_32</name>
              <description>The selected OEN signal for GPIO32. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_33</name>
              <description>The selected OEN signal for GPIO33. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_34</name>
              <description>The selected OEN signal for GPIO34. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_35</name>
              <description>The selected OEN signal for GPIO35. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_9</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 9 DOEN</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>589432325</resetValue>
          <fields>
            <field>
              <name>doen_36</name>
              <description>The selected OEN signal for GPIO36. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_37</name>
              <description>The selected OEN signal for GPIO37. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_38</name>
              <description>The selected OEN signal for GPIO38. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_39</name>
              <description>The selected OEN signal for GPIO39. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_10</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 10 DOEN</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>16777217</resetValue>
          <fields>
            <field>
              <name>doen_40</name>
              <description>The selected OEN signal for GPIO40. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_41</name>
              <description>The selected OEN signal for GPIO41. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_42</name>
              <description>The selected OEN signal for GPIO42. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_43</name>
              <description>The selected OEN signal for GPIO43. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_11</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 11 DOEN</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>16777217</resetValue>
          <fields>
            <field>
              <name>doen_44</name>
              <description>The selected OEN signal for GPIO44. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_45</name>
              <description>The selected OEN signal for GPIO45. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_46</name>
              <description>The selected OEN signal for GPIO46. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_47</name>
              <description>The selected OEN signal for GPIO47. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_12</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 12 DOEN</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>234949901</resetValue>
          <fields>
            <field>
              <name>doen_48</name>
              <description>The selected OEN signal for GPIO48. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_49</name>
              <description>The selected OEN signal for GPIO49. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_50</name>
              <description>The selected OEN signal for GPIO50. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_51</name>
              <description>The selected OEN signal for GPIO51. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_13</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 13 DOEN</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>486611996</resetValue>
          <fields>
            <field>
              <name>doen_52</name>
              <description>The selected OEN signal for GPIO52. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_53</name>
              <description>The selected OEN signal for GPIO53. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_54</name>
              <description>The selected OEN signal for GPIO54. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_55</name>
              <description>The selected OEN signal for GPIO55. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_14</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 14 DOEN</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>620831780</resetValue>
          <fields>
            <field>
              <name>doen_56</name>
              <description>The selected OEN signal for GPIO56. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_57</name>
              <description>The selected OEN signal for GPIO57. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_58</name>
              <description>The selected OEN signal for GPIO58. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_59</name>
              <description>The selected OEN signal for GPIO59. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_doen_15</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX 15 DOEN</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>687941672</resetValue>
          <fields>
            <field>
              <name>doen_60</name>
              <description>The selected OEN signal for GPIO60. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_61</name>
              <description>The selected OEN signal for GPIO61. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_62</name>
              <description>The selected OEN signal for GPIO62. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>doen_63</name>
              <description>The selected OEN signal for GPIO63. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-49. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_0</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 0-3 DOUT</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>369098752</resetValue>
          <fields>
            <field>
              <name>dout_0</name>
              <description>The selected output signal for GPIO0. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_1</name>
              <description>The selected output signal for GPIO1. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_2</name>
              <description>The selected output signal for GPIO2. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_3</name>
              <description>The selected output signal for GPIO3. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_1</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 4-7 DOUT</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>5120</resetValue>
          <fields>
            <field>
              <name>dout_4</name>
              <description>The selected output signal for GPIO4. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_5</name>
              <description>The selected output signal for GPIO5. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_6</name>
              <description>The selected output signal for GPIO6. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_7</name>
              <description>The selected output signal for GPIO7. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_2</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 8-11 DOUT</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>352321536</resetValue>
          <fields>
            <field>
              <name>dout_8</name>
              <description>The selected output signal for GPIO8. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_9</name>
              <description>The selected output signal for GPIO9. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_10</name>
              <description>The selected output signal for GPIO10. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_11</name>
              <description>The selected output signal for GPIO11. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_3</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 12-15 DOUT</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dout_12</name>
              <description>The selected output signal for GPIO12. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_13</name>
              <description>The selected output signal for GPIO13. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_14</name>
              <description>The selected output signal for GPIO14. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_15</name>
              <description>The selected output signal for GPIO15. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_4</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 16-19 DOUT</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>536870912</resetValue>
          <fields>
            <field>
              <name>dout_16</name>
              <description>The selected output signal for GPIO16. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_17</name>
              <description>The selected output signal for GPIO17. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_18</name>
              <description>The selected output signal for GPIO18. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_19</name>
              <description>The selected output signal for GPIO19. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_5</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 20-23 DOUT</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>5570560</resetValue>
          <fields>
            <field>
              <name>dout_20</name>
              <description>The selected output signal for GPIO20. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_21</name>
              <description>The selected output signal for GPIO21. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_22</name>
              <description>The selected output signal for GPIO22. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_23</name>
              <description>The selected output signal for GPIO23. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_6</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 24-27 DOUT</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dout_24</name>
              <description>The selected output signal for GPIO24. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_25</name>
              <description>The selected output signal for GPIO25. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_26</name>
              <description>The selected output signal for GPIO26. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_27</name>
              <description>The selected output signal for GPIO27. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_7</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 28-31 DOUT</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dout_28</name>
              <description>The selected output signal for GPIO28. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_29</name>
              <description>The selected output signal for GPIO29. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_30</name>
              <description>The selected output signal for GPIO30. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_31</name>
              <description>The selected output signal for GPIO31. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_8</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 32-35 DOUT</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>218103808</resetValue>
          <fields>
            <field>
              <name>dout_32</name>
              <description>The selected output signal for GPIO32. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_33</name>
              <description>The selected output signal for GPIO33. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_34</name>
              <description>The selected output signal for GPIO34. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_35</name>
              <description>The selected output signal for GPIO35. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_9</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 36-39 DOUT</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>1414729486</resetValue>
          <fields>
            <field>
              <name>dout_36</name>
              <description>The selected output signal for GPIO36. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_37</name>
              <description>The selected output signal for GPIO37. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_38</name>
              <description>The selected output signal for GPIO38. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_39</name>
              <description>The selected output signal for GPIO39. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_10</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 40-43 DOUT</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>5132032</resetValue>
          <fields>
            <field>
              <name>dout_40</name>
              <description>The selected output signal for GPIO40. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_41</name>
              <description>The selected output signal for GPIO41. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_42</name>
              <description>The selected output signal for GPIO42. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_43</name>
              <description>The selected output signal for GPIO43. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_11</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 44-47 DOUT</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>5987328</resetValue>
          <fields>
            <field>
              <name>dout_44</name>
              <description>The selected output signal for GPIO44. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_45</name>
              <description>The selected output signal for GPIO45. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_46</name>
              <description>The selected output signal for GPIO46. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_47</name>
              <description>The selected output signal for GPIO47. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_12</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 48-51 DOUT</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>536878623</resetValue>
          <fields>
            <field>
              <name>dout_48</name>
              <description>The selected output signal for GPIO48. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_49</name>
              <description>The selected output signal for GPIO49. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_50</name>
              <description>The selected output signal for GPIO50. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_51</name>
              <description>The selected output signal for GPIO51. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_13</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 52-55 DOUT</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>1258309962</resetValue>
          <fields>
            <field>
              <name>dout_52</name>
              <description>The selected output signal for GPIO52. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_53</name>
              <description>The selected output signal for GPIO53. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_54</name>
              <description>The selected output signal for GPIO54. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_55</name>
              <description>The selected output signal for GPIO55. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_14</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 56-59 DOUT</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>1476417111</resetValue>
          <fields>
            <field>
              <name>dout_56</name>
              <description>The selected output signal for GPIO56. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_57</name>
              <description>The selected output signal for GPIO57. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_58</name>
              <description>The selected output signal for GPIO58. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_59</name>
              <description>The selected output signal for GPIO59. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpo_dout_15</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO 60-63 DOUT</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>1593859422</resetValue>
          <fields>
            <field>
              <name>dout_60</name>
              <description>The selected output signal for GPIO60. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_61</name>
              <description>The selected output signal for GPIO61. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_62</name>
              <description>The selected output signal for GPIO62. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dout_63</name>
              <description>The selected output signal for GPIO63. The register value indicates the selected GPIO output index signal index from GPIO output signal list 0-107. See Table 2-41: GPIO OEN List for SYS_IOMUX (on page 97) for more information.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_0</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 0 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>wave511_uart_rxsin</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>can_rxd_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>usb_over_current</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spdif_spdi_fi</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_1</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 4 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>jtag_trstn</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hdmi_cec_sda</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hdmi_ddc_scl</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hdmi_ddc_sda</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_2</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 8 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>2565632</resetValue>
          <fields>
            <field>
              <name>hdmi_hpd</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_clk_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_data_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_detect_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_3</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 12 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>185073664</resetValue>
          <fields>
            <field>
              <name>sdio_int_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_write_prt_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_sin_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hifi4_jtck_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_4</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 16 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>68095500</resetValue>
          <fields>
            <field>
              <name>hifi4_jtdi</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hifi4_jtms</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hifi4_jtrstn</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>jtag_tdi</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_5</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 20 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>6</resetValue>
          <fields>
            <field>
              <name>jtag_tms</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pdm_dmic_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pdm_dmic_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>audio_i2srx_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_6</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 24 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>842203136</resetValue>
          <fields>
            <field>
              <name>audio_i2srx_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>audio_i2srx_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_clkin_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_fssin_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_7</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 28 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <resetValue>820</resetValue>
          <fields>
            <field>
              <name>spi_rxd_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>jtag_tck</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mclk</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2srx_bclk_slv_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_8</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 32 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>i2srx_lrck_slv_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2stx_bclk_slv_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2stx_lrck_slv_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tdm_clk_slv_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_9</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 36 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pcm_rxd_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pcm_synon_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>can_rxd_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_clk_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_10</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 40 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>i2c_data_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_detect_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_int_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_write_prt_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_11</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 44 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdio_ccmd_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_cdata_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_cdata_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_cdata_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_12</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 48 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xb0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdio_cdata_3</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_cdata_4</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_cdata_5</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_cdata_6</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_13</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 52 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xb4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sdio_cdata_7</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_data_strobe</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_cts_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_sin_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_14</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 56 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xb8</addressOffset>
          <size>32</size>
          <resetValue>3683895</resetValue>
          <fields>
            <field>
              <name>spi_clkin_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_fssin_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_rxd_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_clk_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_15</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 60 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xbc</addressOffset>
          <size>32</size>
          <resetValue>2764032</resetValue>
          <fields>
            <field>
              <name>i2c_data_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_cts_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_sin_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_clkin_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_16</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 64 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xc0</addressOffset>
          <size>32</size>
          <resetValue>690487296</resetValue>
          <fields>
            <field>
              <name>spi_fssin_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_rxd_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_clk_3</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_data_3</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_17</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 68 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xc4</addressOffset>
          <size>32</size>
          <resetValue>1010449173</resetValue>
          <fields>
            <field>
              <name>uart_sin_3</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_clkin_3</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_fssin_3</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_rxd_3</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_18</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 72 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xc8</addressOffset>
          <size>32</size>
          <resetValue>774963200</resetValue>
          <fields>
            <field>
              <name>i2c_clk_4</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_data_4</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_cts_4</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_sin_4</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_19</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 76 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xcc</addressOffset>
          <size>32</size>
          <resetValue>4210239</resetValue>
          <fields>
            <field>
              <name>spi_clkin_4</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_fssin_4</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_rxd_4</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_clk_5</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_20</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 80 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xd0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>i2c_data_5</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_cts_5</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>uart_sin_5</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_clkin_5</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_21</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 84 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xd4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>spi_fssin_5</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_rxd_5</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_clk_6</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>i2c_data_6</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpi_22</name>
          <description>SYS IOMUX CFG SAIF SYSCFG FMUX GPIO GPI 88 - The register can be used to configure the selected GPIO connector number for input signals. The signal name is indicated in the "Name" column of the following table per StarFive naming conventions. For example, name "u0_WAVE511_i_uart_rxsin_cfg" indicates the corresponding input signal is "u0_WAVE511.i_uart_rxsin". See GPIO Input Signals (on page 107) for a complete list of the input GPIO signals.</description>
          <addressOffset>0xd8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>spi_clkin_6</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_fssin_6</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>spi_rxd_6</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2 - GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_0</name>
          <description>Enable GPIO IRQ function</description>
          <addressOffset>0xdc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gpen_0</name>
              <description>1: Enable, 0: Disable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_1</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 224: GPIO Interrupt Edge Trigger Selector</description>
          <addressOffset>0xe0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>is_0</name>
              <description>1: Edge trigger, 0: Level trigger</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_2</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 228: GPIO Interrupt Edge Trigger Selector</description>
          <addressOffset>0xe4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>is_1</name>
              <description>1: Edge trigger, 0: Level trigger</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_3</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 232: GPIO Interrupt Clear</description>
          <addressOffset>0xe8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ic_0</name>
              <description>1: Do not clear the register, 0: Clear the register</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_4</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 236: GPIO Interrupt Clear</description>
          <addressOffset>0xec</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ic_1</name>
              <description>1: Do not clear the register, 0: Clear the register</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_5</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 240: GPIO Interrupt Both Edge Trigger Selector</description>
          <addressOffset>0xf0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ibe_0</name>
              <description>1: Trigger on both edges, 0: Trigger on a single edge</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_6</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 244: GPIO Interrupt Both Edge Trigger Selector</description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ibe_1</name>
              <description>1: Trigger on both edges, 0: Trigger on a single edge</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_7</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 248: GPIO Interrupt Edge Value</description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>iev_0</name>
              <description>1: Positive/Low, 0: Negative/High</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_8</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 252: GPIO Interrupt Edge Value</description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>iev_1</name>
              <description>1: Positive/Low, 0: Negative/High</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_9</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 256: GPIO Interrupt Edge Mask Selector</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie_0</name>
              <description>1: Unmask, 0: Mask</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_10</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 260: GPIO Interrupt Edge Mask Selector</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie_1</name>
              <description>1: Unmask, 0: Mask</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_11</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 264: GPIO Register Interrupt Status</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ris_0</name>
              <description>Status of the edge trigger. The register can be cleared by writing gpio ic</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_12</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 268: GPIO Register Interrupt Status</description>
          <addressOffset>0x10c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ris_1</name>
              <description>Status of the edge trigger. The register can be cleared by writing gpio ic</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_13</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 272: GPIO Masked Interrupt Status</description>
          <addressOffset>0x110</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>mis_0</name>
              <description>The masked GPIO IRQ status</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_14</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 276: GPIO Masked Interrupt Status</description>
          <addressOffset>0x114</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>mis_1</name>
              <description>The masked GPIO IRQ status</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_15</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 280: GPIO Synchronization Status</description>
          <addressOffset>0x118</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>in_sync2_0</name>
              <description>Status of the gpio_in after synchronization</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_16</name>
          <description>SYS IOMUX CFGSAIF SYSCFG IOIRQ 284: GPIO Synchronization Status</description>
          <addressOffset>0x11c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>in_sync2_1</name>
              <description>Status of the gpio_in after synchronization</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_0</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 288: GPIO_0</description>
          <addressOffset>0x120</addressOffset>
          <size>32</size>
          <resetValue>17</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_1</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 292: GPIO_1</description>
          <addressOffset>0x124</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_2</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 296: GPIO_2</description>
          <addressOffset>0x128</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_3</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 300: GPIO_3</description>
          <addressOffset>0x12c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_4</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 304: GPIO_4</description>
          <addressOffset>0x130</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_5</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 308: GPIO_5</description>
          <addressOffset>0x134</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_6</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 312: GPIO_6</description>
          <addressOffset>0x138</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_7</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 316: GPIO_7</description>
          <addressOffset>0x13c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_8</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 320: GPIO_8</description>
          <addressOffset>0x140</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_9</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 324: GPIO_9</description>
          <addressOffset>0x144</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_10</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 328: GPIO_10</description>
          <addressOffset>0x148</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_11</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 332: GPIO_11</description>
          <addressOffset>0x14c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_12</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 336: GPIO_12</description>
          <addressOffset>0x150</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_13</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 340: GPIO_13</description>
          <addressOffset>0x154</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_14</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 344: GPIO_14</description>
          <addressOffset>0x158</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_15</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 348: GPIO_15</description>
          <addressOffset>0x15c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_16</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 352: GPIO_16</description>
          <addressOffset>0x160</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_17</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 356: GPIO_17</description>
          <addressOffset>0x164</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_18</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 360: GPIO_18</description>
          <addressOffset>0x168</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_19</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 364: GPIO_19</description>
          <addressOffset>0x16c</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_20</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 368: GPIO_20</description>
          <addressOffset>0x170</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_21</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 372: GPIO_21</description>
          <addressOffset>0x174</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_22</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 376: GPIO_22</description>
          <addressOffset>0x178</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_23</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 380: GPIO_23</description>
          <addressOffset>0x17c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_24</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 384: GPIO_24</description>
          <addressOffset>0x180</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_25</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 388: GPIO_25</description>
          <addressOffset>0x184</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_26</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 392: GPIO_26</description>
          <addressOffset>0x188</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_27</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 396: GPIO_27</description>
          <addressOffset>0x18c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_28</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 400: GPIO_28</description>
          <addressOffset>0x190</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_29</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 404: GPIO_29</description>
          <addressOffset>0x194</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_30</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 408: GPIO_30</description>
          <addressOffset>0x198</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_31</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 412: GPIO_31</description>
          <addressOffset>0x19c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_32</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 416: GPIO_32</description>
          <addressOffset>0x1a0</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_33</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 420: GPIO_33</description>
          <addressOffset>0x1a4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_34</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 424: GPIO_34</description>
          <addressOffset>0x1a8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_35</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 428: GPIO_35</description>
          <addressOffset>0x1ac</addressOffset>
          <size>32</size>
          <resetValue>17</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_36</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 432: GPIO_36</description>
          <addressOffset>0x1b0</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_37</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 436: GPIO_37</description>
          <addressOffset>0x1b4</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_38</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 440: GPIO_38</description>
          <addressOffset>0x1b8</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_39</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 444: GPIO_39</description>
          <addressOffset>0x1bc</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_40</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 448: GPIO_40</description>
          <addressOffset>0x1c0</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_41</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 452: GPIO_41</description>
          <addressOffset>0x1c4</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_42</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 456: GPIO_42</description>
          <addressOffset>0x1c8</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_43</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 460: GPIO_43</description>
          <addressOffset>0x1cc</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_44</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 464: GPIO_44</description>
          <addressOffset>0x1d0</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_45</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 468: GPIO_45</description>
          <addressOffset>0x1d4</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_46</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 472: GPIO_46</description>
          <addressOffset>0x1d8</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_47</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 476: GPIO_47</description>
          <addressOffset>0x1dc</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_48</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 480: GPIO_48</description>
          <addressOffset>0x1e0</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_49</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 484: GPIO_49</description>
          <addressOffset>0x1e4</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_50</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 488: GPIO_50</description>
          <addressOffset>0x1e8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_51</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 492: GPIO_51</description>
          <addressOffset>0x1ec</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_52</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 496: GPIO_52</description>
          <addressOffset>0x1f0</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_53</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 500: GPIO_53</description>
          <addressOffset>0x1f4</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_54</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 504: GPIO_54</description>
          <addressOffset>0x1f8</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_55</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 508: GPIO_55</description>
          <addressOffset>0x1fc</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_56</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 512: GPIO_56</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_57</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 516: GPIO_57</description>
          <addressOffset>0x204</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_58</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 520: GPIO_58</description>
          <addressOffset>0x208</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_59</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 524: GPIO_59</description>
          <addressOffset>0x20c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_60</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 528: GPIO_60</description>
          <addressOffset>0x210</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_61</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 532: GPIO_61</description>
          <addressOffset>0x214</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_62</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 536: GPIO_62</description>
          <addressOffset>0x218</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gpio_63</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 540: GPIO_63</description>
          <addressOffset>0x21c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_clk</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 544: SD0_CLK</description>
          <addressOffset>0x220</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_cmd</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 548: SD0_CMD</description>
          <addressOffset>0x224</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_data_0</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 552: SD0_DATA_0</description>
          <addressOffset>0x228</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_data_1</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 556: SD0_DATA_1</description>
          <addressOffset>0x22c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_data_2</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 560: SD0_DATA_2</description>
          <addressOffset>0x230</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_data_3</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 564: SD0_DATA_3</description>
          <addressOffset>0x234</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_data_4</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 568: SD0_DATA_4</description>
          <addressOffset>0x238</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_data_5</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 572: SD0_DATA_5</description>
          <addressOffset>0x23c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_data_6</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 576: SD0_DATA_6</description>
          <addressOffset>0x240</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_data_7</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 580: SD0_DATA_7</description>
          <addressOffset>0x244</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sd0_strb</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 584: SD0_STRB</description>
          <addressOffset>0x248</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_mdc</name>
          <description>GPIO GMAC1 MDC Pad Configuration</description>
          <addressOffset>0x24c</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_mdio</name>
          <description>GPIO GMAC1 MDIO Pad Configuration</description>
          <addressOffset>0x250</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_rxd_0</name>
          <description>GPIO GMAC1 RXD_0 Pad Configuration</description>
          <addressOffset>0x254</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_rxd_1</name>
          <description>GPIO GMAC1 RXD_1 Pad Configuration</description>
          <addressOffset>0x258</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_rxd_2</name>
          <description>GPIO GMAC1 RXD_2 Pad Configuration</description>
          <addressOffset>0x25c</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_rxd_3</name>
          <description>GPIO GMAC1 RXD_3 Pad Configuration</description>
          <addressOffset>0x260</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_rxdv</name>
          <description>GPIO GMAC1 RXDV Pad Configuration</description>
          <addressOffset>0x264</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_rxc</name>
          <description>GPIO GMAC1 RXC Pad Configuration</description>
          <addressOffset>0x268</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_txd_0</name>
          <description>GPIO GMAC1 TXD_0 Pad Configuration</description>
          <addressOffset>0x26c</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_txd_1</name>
          <description>GPIO GMAC1 TXD_1 Pad Configuration</description>
          <addressOffset>0x270</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_txd_2</name>
          <description>GPIO GMAC1 TXD_2 Pad Configuration</description>
          <addressOffset>0x274</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_txd_3</name>
          <description>GPIO GMAC1 TXD_3 Pad Configuration</description>
          <addressOffset>0x278</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_txen</name>
          <description>GPIO GMAC1 TXEN Pad Configuration</description>
          <addressOffset>0x27c</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac1_txc</name>
          <description>GPIO GMAC1 TXC Pad Configuration</description>
          <addressOffset>0x280</addressOffset>
          <size>32</size>
          <resetValue>2</resetValue>
          <fields>
            <field>
              <name>cfg</name>
              <description>cfg</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>qspi_sclk</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 644: QSPI_SCLK</description>
          <addressOffset>0x284</addressOffset>
          <size>32</size>
          <resetValue>8</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>qspi_csn_0</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 648: QSPI_CSN_0</description>
          <addressOffset>0x288</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>qspi_data_0</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 652: QSPI_DATA_0</description>
          <addressOffset>0x28c</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>qspi_data_1</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 656: QSPI_DATA_1</description>
          <addressOffset>0x290</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>qspi_data_2</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 660: QSPI_DATA_2</description>
          <addressOffset>0x294</addressOffset>
          <size>32</size>
          <resetValue>1</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>qspi_data_3</name>
          <description>SYS IOMUX CFG SAIF SYSCFG PADCFG 664: QSPI_DATA_3</description>
          <addressOffset>0x298</addressOffset>
          <size>32</size>
          <resetValue>9</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>func_sel_0</name>
          <description>SYS IOMUX CFG SAIF SYSCFG 668</description>
          <addressOffset>0x29c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pad_gmac1_rxc</name>
              <description>Function selector of GMAC1_RXC: * Function 0: u0_sys_crg.clk_gmac1_rgmii_rx, * Function 1: u0_sys_crg.clk_gmac1_rmii_ref, * Function 2: None, * Function 3: None</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_10</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_11</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[7:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_12</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_13</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[13:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_14</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[16:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_15</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[19:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_16</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_17</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[25:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_18</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[28:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_19</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>func_sel_1</name>
          <description>SYS IOMUX CFG SAIF SYSCFG 672</description>
          <addressOffset>0x2a0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pad_gpio_20</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_21</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_22</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_23</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_24</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_25</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[17:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_26</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_27</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_28</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_29</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[29:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>func_sel_2</name>
          <description>SYS IOMUX CFG SAIF SYSCFG 676</description>
          <addressOffset>0x2a4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pad_gpio_30</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_31</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_32</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_33</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_34</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_35</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[17:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_36</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_37</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_38</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_39</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[29:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_40</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[32:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>func_sel_3</name>
          <description>SYS IOMUX CFG SAIF SYSCFG 680</description>
          <addressOffset>0x2a8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pad_gpio_41</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_42</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_43</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_44</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_45</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_46</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[17:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_47</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_48</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_49</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_50</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[29:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_51</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[32:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>func_sel_4</name>
          <description>SYS IOMUX CFG SAIF SYSCFG 684</description>
          <addressOffset>0x2ac</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pad_gpio_52</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_53</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_54</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_56</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_57</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[17:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_58</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_59</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_60</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_61</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[29:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_62</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[32:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio63</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[31:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>func_sel_5</name>
          <description>SYS IOMUX CFG SAIF SYSCFG 688</description>
          <addressOffset>0x2b0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pad_gpio_6</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_7</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_8</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pad_gpio_9</name>
              <description>GPIO function selector: * Function 0: See Function Description no page 84 for more information, * Function 1: See Full Multiplexing for more information, * Function 2: See Function 2 for more information, * Function 3: See Function 3 for more information</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_0</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[13:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_10</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[16:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_11</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[19:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_1</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_2</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[25:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_3</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[28:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_4</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>func_sel_6</name>
          <description>SYS IOMUX CFG SAIF SYSCFG 692</description>
          <addressOffset>0x2b4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>vin_dvp_data_5</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_6</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_7</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_8</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_data_9</name>
              <description>Function Selector of DVP_DATA[idx], see Function 2 for more information</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_hvalid</name>
              <description>Function Selector of DVP_HSYNC, see Function 2 for more information</description>
              <bitRange>[17:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vin_dvp_vvalid</name>
              <description>Function Selector of DVP_VSYNC, see Function 2 for more information</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dvp_clk</name>
              <description>Function Selector of DVP_CLK, see Function 2 for more information</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_wdt_0</name>
      <description>From starfive,jh7110-wdt, peripheral generator</description>
      <baseAddress>0x13070000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_crypto_0</name>
      <description>From starfive,jh7110-crypto, peripheral generator</description>
      <baseAddress>0x16000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x4000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>arm_pl080_0</name>
      <description>From arm,pl080, peripheral generator</description>
      <baseAddress>0x16008000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x4000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>arm_primecell_7</name>
      <description>From arm,primecell, peripheral generator</description>
      <baseAddress>0x16008000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x4000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>trng</name>
      <description>From starfive,jh7110-trng, peripheral generator</description>
      <baseAddress>0x1600C000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x4000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>ctrl</name>
          <description>TRNG CTRL Register</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>exec_nop</name>
              <description>Execute a NOP instruction</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gen_rand</name>
              <description>Generate a random number</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>reseed</name>
              <description>Reseed the TRNG from noise sources</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stat</name>
          <description>TRNG STAT Register</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>nonce_mode</name>
              <description>TRNG Nonce operating mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>r256</name>
              <description>TRNG 256-bit random number operating mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>mission_mode</name>
              <description>TRNG Mission Mode operating mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>seeded</name>
              <description>TRNG Seeded operating mode</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>last_reseed_0</name>
              <description>TRNG Last Reseed 0 status</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>last_reseed_1</name>
              <description>TRNG Last Reseed 1 status</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>last_reseed_2</name>
              <description>TRNG Last Reseed 2 status</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>last_reseed_3</name>
              <description>TRNG Last Reseed 3 status</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>last_reseed_4</name>
              <description>TRNG Last Reseed 4 status</description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>last_reseed_5</name>
              <description>TRNG Last Reseed 5 status</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>last_reseed_6</name>
              <description>TRNG Last Reseed 6 status</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>last_reseed_7</name>
              <description>TRNG Last Reseed 7 status</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>srvc_rqst</name>
              <description>TRNG Service Request</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rand_generating</name>
              <description>TRNG Random Number Generating Status</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rand_seeding</name>
              <description>TRNG Random Number Seeding Status</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mode</name>
          <description>TRNG MODE Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>r256</name>
              <description>256-bit operation mode: 0 - 128-bit mode, 1 - 256-bit mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>smode</name>
          <description>TRNG SMODE Register</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>nonce_mode</name>
              <description>Nonce operation mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mission_mode</name>
              <description>Mission operation mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>max_rejects</name>
              <description>TRNG Maximum Rejects</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ie</name>
          <description>TRNG Interrupt Enable Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand_rdy_en</name>
              <description>RAND Ready Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>seed_done_en</name>
              <description>Seed Done Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>lfsr_lockup_en</name>
              <description>LFSR Lockup Enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>glbl_en</name>
              <description>Global Enable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>istat</name>
          <description>TRNG Interrupt Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand_rdy</name>
              <description>RAND Ready Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>seed_done</name>
              <description>Seed Done Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>lfsr_lockup_en</name>
              <description>LFSR Lockup Enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rand_0</name>
          <description>TRNG RAND 0 Status Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand</name>
              <description>Random number bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rand_1</name>
          <description>TRNG RAND 1 Status Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand</name>
              <description>Random number bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rand_2</name>
          <description>TRNG RAND 2 Status Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand</name>
              <description>Random number bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rand_3</name>
          <description>TRNG RAND 3 Status Register</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand</name>
              <description>Random number bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rand_4</name>
          <description>TRNG RAND 4 Status Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand</name>
              <description>Random number bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rand_5</name>
          <description>TRNG RAND 5 Status Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand</name>
              <description>Random number bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rand_6</name>
          <description>TRNG RAND 6 Status Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand</name>
              <description>Random number bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rand_7</name>
          <description>TRNG RAND 7 Status Register</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rand</name>
              <description>Random number bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>auto_rqsts</name>
          <description>Auto-reseeding after random number requests by host reaches specified counter: 0 - disable counter, other - reload value for internal counter</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>rqsts</name>
              <description>Threshold number of reseed requests for auto-reseed counter</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>auto_age</name>
          <description>Auto-reseeding after specified timer countdowns to 0: 0 - disable timer, other - reload value for internal timer</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>age</name>
              <description>Countdown value for auto-reseed timer</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_mmc_0</name>
      <description>From starfive,jh7110-mmc, peripheral generator</description>
      <baseAddress>0x16010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_mmc_1</name>
      <description>From starfive,jh7110-mmc, peripheral generator</description>
      <baseAddress>0x16020000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_dwmac_0</name>
      <description>From starfive,jh7110-dwmac, peripheral generator</description>
      <baseAddress>0x16030000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>snps_dwmac_0</name>
      <description>From snps,dwmac, peripheral generator</description>
      <baseAddress>0x16030000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_dwmac_1</name>
      <description>From starfive,jh7110-dwmac, peripheral generator</description>
      <baseAddress>0x16040000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>snps_dwmac_1</name>
      <description>From snps,dwmac, peripheral generator</description>
      <baseAddress>0x16040000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_axi_dma_0</name>
      <description>From starfive,jh7110-axi-dma, peripheral generator</description>
      <baseAddress>0x16050000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>aoncrg</name>
      <description>From starfive,jh7110-aoncrg, peripheral generator</description>
      <baseAddress>0x17000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>clk_osc</name>
          <description>Oscillator Clock</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=4, Default=4, Min=4, Typical=4</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_aon_apb</name>
          <description>AON APB Function Clock</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_osc_div4, clk_osc</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_ahb_gmac5</name>
          <description>AHB GMAC5 Clock</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_axi_gmac5</name>
          <description>AXI GMAC5 Clock</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac0_rmii_rtx</name>
          <description>GMAC0 RMII RTX Clock</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=30, Default=2, Min=2, Typical=2</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_tx</name>
          <description>GMAC5 AXI64 Clock Transmitter</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: u0_sys_crg_clk_gmac0_gtxclk, clk_gmac0_rmii_rtx</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_txi</name>
          <description>GMAC5 AXI64 Clock Transmission Inverter</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_rx</name>
          <description>GMAC5 AXI64 Clock Receiver</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>dly_chain_sel</name>
              <description>Selector delay chain stage number, totally 32 stages, -50 ps each stage. The register value indicates the delay chain stage number. For example, diy_chain_sel=1 means to delay 1 stage.</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_gmac5_axi64_rxi</name>
          <description>GMAC5 AXI64 Clock Receiving Inverter</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_polarity</name>
              <description>1: Clock inverter, 0: Clock buffer</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_optc_apb</name>
          <description>OPTC APB Clock</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_rtc_hms_apb</name>
          <description>RTC HMS APB Clock</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_rtc_internal</name>
          <description>RTC Internal Clock</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_divcfg</name>
              <description>Clock divider coefficient: Max=1022, Default=750, Min=750, Typical=750</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_rtc_hms_osc32k</name>
          <description>RTC HMS Clock Oscillator 32K</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_mux_sel</name>
              <description>Clock multiplexing selector: clk_rtc, clk_rtc_internal</description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>clk_rtc_hms_cal</name>
          <description>RTC HMS Clock Calculator</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>clk_icg</name>
              <description>1: Clock enable, 0: Clock disable</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>soft_rst_addr_sel</name>
          <description>Software RESET Address Selector</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gmac5_axi64_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>aon_iomux_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pmu_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pmu_wkup</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtc_hms_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtc_hms_cal</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtc_hms_osc32k</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aoncrg_rst_status</name>
          <description>AONCRG RESET Status</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gmac5_axi64_axi</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_ahb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>aon_iomux_presetn</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pmu_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pmu_wkup</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtc_hms_apb</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtc_hms_cal</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rtc_hms_osc32k</name>
              <description>1: Assert reset, 0: De-assert reset</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>aon_syscon</name>
      <description>From starfive,jh7110-aon-syscon, peripheral generator</description>
      <baseAddress>0x17010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>aon_syscfg_0</name>
          <description>AON SYSCONSAIF SYSCFG 0</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>aon_gp_reg</name>
              <description>aon_gp_reg</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_1</name>
          <description>AON SYSCONSAIF SYSCFG 4</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_boot_ctrl_boot_status</name>
              <description>u0_boot_ctrl_boot_status</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_2</name>
          <description>AON SYSCONSAIF SYSCFG 8</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_boot_ctrl_boot_vector_0_31</name>
              <description>u0_boot_ctrl_boot_vector_0_31</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_3</name>
          <description>AON SYSCONSAIF SYSCFG 12</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_boot_ctrl_boot_vector_35_32</name>
              <description>u0_boot_ctrl_boot_vector_35_32</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gmac5_axi64_scfg_ram_cfg_slp</name>
              <description>SRAM/ROM configuration. SLP: sleep enable, high active, default is low.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_scfg_ram_cfg_sd</name>
              <description>SRAM/ROM configuration. SD: shutdown enable, high active, default is low.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_scfg_ram_cfg_rtsel</name>
              <description>SRAM/ROM configuration. RTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_scfg_ram_cfg_ptsel</name>
              <description>SRAM/ROM configuration. PTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_scfg_ram_cfg_trb</name>
              <description>SRAM/ROM configuration. TRB: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_scfg_ram_cfg_wtsel</name>
              <description>SRAM/ROM configuration. WTSEL: timing setting for debug purpose, default is 2'b01.</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_scfg_ram_cfg_vs</name>
              <description>SRAM/ROM configuration. VS: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_scfg_ram_cfg_vg</name>
              <description>SRAM/ROM configuration. VG: timing setting for debug purpose, default is 1'b1.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gmac5_axi64_mac_speed_o</name>
              <description>gmac5_axi64_mac_speed_o</description>
              <bitRange>[17:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>gmac5_axi64_phy_intf_sel_i</name>
              <description>Active PHY Selected. When you have multiple GMAC PHY interfaces in your configuration, this field indicates the sampled value of the PHY selector during reset de-assertion. Values: 0x0 - GMII or MII, 0x1 - RGMII, 0x2 - SGMII, 0x3 - TBI, 0x4 - RMII, 0x5 - RTBI, 0x6 - SMII, 0x7 - REVMII</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_4</name>
          <description>AON SYSCONSAIF SYSCFG 16</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gmac5_axi64_ptp_timestamp_o_0_31</name>
              <description>gmac5_axi64_ptp_timestamp_o_0_31</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_5</name>
          <description>AON SYSCONSAIF SYSCFG 20</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gmac5_axi64_ptp_timestamp_o_32_63</name>
              <description>gmac5_axi64_ptp_timestamp_o_32_63</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_6</name>
          <description>AON SYSCONSAIF SYSCFG 24</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_otpc_chip_mode</name>
              <description>u0_otpc_chip_mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_otpc_crc_pass</name>
              <description>u0_otpc_crc_pass</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_otpc_dbg_enable</name>
              <description>u0_otpc_dbg_enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_7</name>
          <description>AON SYSCONSAIF SYSCFG 28</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_otpc_fl_func_lock</name>
              <description>u0_otpc_fl_func_lock</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_8</name>
          <description>AON SYSCONSAIF SYSCFG 32</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_otpc_fl_pll0_lock</name>
              <description>u0_otpc_fl_pll0_lock</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_9</name>
          <description>AON SYSCONSAIF SYSCFG 36</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_otpc_fl_pll1_lock</name>
              <description>u0_otpc_fl_pll1_lock</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>aon_syscfg_10</name>
          <description>AON SYSCONSAIF SYSCFG 40</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>u0_otpc_fl_sec_boot_lmt</name>
              <description>u0_otpc_fl_sec_boot_lmt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_otpc_fl_xip</name>
              <description>u0_otpc_fl_xip</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_otpc_load_busy</name>
              <description>u0_otpc_load_busy</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_reset_ctrl_clr_reset_status</name>
              <description>u0_reset_ctrl_clr_reset_status</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_reset_ctrl_pll_timecnt_finish</name>
              <description>u0_reset_ctrl_pll_timecnt_finish</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>u0_reset_ctrl_rstn_sw</name>
              <description>u0_reset_ctrl_rstn_sw</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>u0_reset_ctrl_sys_reset_status</name>
              <description>u0_reset_ctrl_sys_reset_status</description>
              <bitRange>[9:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>syscon_2</name>
      <description>From syscon, peripheral generator</description>
      <baseAddress>0x17010000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>aon_pinctrl</name>
      <description>From starfive,jh7110-aon-pinctrl, peripheral generator</description>
      <baseAddress>0x17020000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>fmux_0</name>
          <description>AON IOMUX CFG SAIF SYSCFG FMUX 0</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gpo_doen_0</name>
              <description>The selected OEN signal for GPIO0. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-5. See Table 2-42: GPIO OEN List for AON_IOMUX for more information.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpo_doen_1</name>
              <description>The selected OEN signal for GPIO1. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-5. See Table 2-42: GPIO OEN List for AON_IOMUX for more information.</description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpo_doen_2</name>
              <description>The selected OEN signal for GPIO2. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-5. See Table 2-42: GPIO OEN List for AON_IOMUX for more information.</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpo_doen_3</name>
              <description>The selected OEN signal for GPIO3. The register value indicates the selected GPIO (Output Enable) OEN index from GPIO OEN list 0-5. See Table 2-42: GPIO OEN List for AON_IOMUX for more information.</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fmux_1</name>
          <description>AON IOMUX CFG SAIF SYSCFG FMUX 4</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gpo_dout_0</name>
              <description>The selected OEN signal for GPIO0. The register value indicates the selected GPIO output signal list 0-9. See Table 2-42: GPIO OEN List for AON_IOMUX for more information.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpo_dout_1</name>
              <description>The selected OEN signal for GPIO1. The register value indicates the selected GPIO output signal list 0-9. See Table 2-42: GPIO OEN List for AON_IOMUX for more information.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpo_dout_2</name>
              <description>The selected OEN signal for GPIO2. The register value indicates the selected GPIO output signal list 0-9. See Table 2-42: GPIO OEN List for AON_IOMUX for more information.</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpo_dout_3</name>
              <description>The selected OEN signal for GPIO3. The register value indicates the selected GPIO output signal list 0-9. See Table 2-42: GPIO OEN List for AON_IOMUX for more information.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fmux_2</name>
          <description>AON IOMUX CFG SAIF SYSCFG FMUX 8</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gpi_pmu_wakeup_0</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2-GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpi_pmu_wakeup_1</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2-GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpi_pmu_wakeup_2</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2-GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpi_pmu_wakeup_3</name>
              <description>The register value indicates the selected GPIO number + 2 (GPIO2-GPIO63, GPIO0 and GPIO1 are not available) for the input signal.</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>fmux_3</name>
          <description>AON IOMUX CFG SAIF SYSCFG FMUX 12</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>gpen_0</name>
              <description>Enable GPIO IRQ function.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_0</name>
          <description>AON IOMUX CFG SAIF SYSCFG IOIRQ 16</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>is</name>
              <description>1: Edge trigger, 0: Level trigger</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_1</name>
          <description>AON IOMUX CFG SAIF SYSCFG IOIRQ 20</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ic</name>
              <description>1: Do not clear the register, 0: Clear the register</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_2</name>
          <description>AON IOMUX CFG SAIF SYSCFG IOIRQ 24</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ibe</name>
              <description>1: Trigger on both edges, 0: Trigger on a single edge</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_3</name>
          <description>AON IOMUX CFG SAIF SYSCFG IOIRQ 28</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>iev</name>
              <description>1: Positive/Low, 0: Negative/High</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_4</name>
          <description>AON IOMUX CFG SAIF SYSCFG IOIRQ 32</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>1: Unmask, 0: Mask</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_5</name>
          <description>AON IOMUX CFG SAIF SYSCFG IOIRQ 36</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ris</name>
              <description>Status of the edge trigger, can be cleared by writing gpioic.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_6</name>
          <description>AON IOMUX CFG SAIF SYSCFG IOIRQ 40</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>mis</name>
              <description>The masked GPIO IRQ status.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ioirq_7</name>
          <description>AON IOMUX CFG SAIF SYSCFG IOIRQ 44</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>in_sync2</name>
              <description>Status of gpio_in after synchronization.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>testen</name>
          <description>AON IOMUX CFG SAIF SYSCFG 48</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>testen_pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rgpio_0</name>
          <description>AON IOMUX CFG SAIF SYSCFG 52</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rgpio_1</name>
          <description>AON IOMUX CFG SAIF SYSCFG 56</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rgpio_2</name>
          <description>AON IOMUX CFG SAIF SYSCFG 60</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rgpio_3</name>
          <description>AON IOMUX CFG SAIF SYSCFG 64</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ie</name>
              <description>Input Enable (IE) Controller - 1: Enable the receiver, 0: Disable the receiver</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS) - 00: The rated drive strength is 2 mA, 01: The rated drive strength is 4 mA, 10: The rated drive strength is 8 mA, 11: The rated drive strength is 12 mA</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pu</name>
              <description>Pull-Up (PU) settings - 1: Yes, 0: No</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd</name>
              <description>Pull-Down (PD) settings - 1: Yes, 0: No</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>slew</name>
              <description>Slew Rate Control - 0: Slow (Half frequency), 1: Fast</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger ebabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rstn</name>
          <description>AON IOMUX CFG SAIF SYSCFG 68</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>smt</name>
              <description>Active high Schmitt (SMT) trigger selector - 0: No hysteresis, 1: Schmitt trigger enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pos</name>
              <description>Power-on-Start (POS) enabler - 1: Enable active pull-down for loss of core power, 0: Active pull-down capability disabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rtc</name>
          <description>AON IOMUX CFG SAIF SYSCFG 76</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS): * 00: The rated drive strength is 2 mA. * 01: The rated drive strength is 4 mA. * 10: The rated drive strength is 8 mA. * 11: The rated drive strength is 12 mA.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>osc</name>
          <description>AON IOMUX CFG SAIF SYSCFG 84</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>ds</name>
              <description>Output Drive Strength (DS): * 00: The rated drive strength is 2 mA. * 01: The rated drive strength is 4 mA. * 10: The rated drive strength is 8 mA. * 11: The rated drive strength is 12 mA.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_mdc</name>
          <description>AON IOMUX CFG SAIF SYSCFG 88</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_mdio</name>
          <description>AON IOMUX CFG SAIF SYSCFG 92</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_rxd0</name>
          <description>AON IOMUX CFG SAIF SYSCFG 96</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>0: GMAC0 IO voltage select 3.3V, 1: GMAC0 IO voltage select 2.5V, 2: GMAC0 IO voltage select 1.8V</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_rxd1</name>
          <description>AON IOMUX CFG SAIF SYSCFG 100</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_rxd2</name>
          <description>AON IOMUX CFG SAIF SYSCFG 104</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_rxd3</name>
          <description>AON IOMUX CFG SAIF SYSCFG 108</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_rxdv</name>
          <description>AON IOMUX CFG SAIF SYSCFG 112</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_rxc</name>
          <description>AON IOMUX CFG SAIF SYSCFG 116</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_txd0</name>
          <description>AON IOMUX CFG SAIF SYSCFG 120</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_txd1</name>
          <description>AON IOMUX CFG SAIF SYSCFG 124</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_txd2</name>
          <description>AON IOMUX CFG SAIF SYSCFG 128</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_txd3</name>
          <description>AON IOMUX CFG SAIF SYSCFG 132</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_txen</name>
          <description>AON IOMUX CFG SAIF SYSCFG 136</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_txc</name>
          <description>AON IOMUX CFG SAIF SYSCFG 140</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>value</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>gmac0_rxc_func_sel</name>
          <description>AON IOMUX CFG SAIF SYSCFG 144</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>value</name>
              <description>Function selector of GMAC0_RXC: * Function 0: u0_aon_crg_clk_gmac0_rgmii_rx, * Function 1: u0_aon_crg_clk_gmac0_rmii_ref, * Function 2: None, * Function 3: None</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>pmu</name>
      <description>From starfive,jh7110-pmu, peripheral generator</description>
      <baseAddress>0x17030000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>pmu</name>
        <value>106</value>
      </interrupt>
      <registers>
        <register>
          <name>hard_event_turn_on_mask</name>
          <description>Hardware Event Turn-On Mask</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hard_event_0_on_mask</name>
              <description>RTC event encourage turn-on sequence, 1: mask hardware event, 0: enable hardware event</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hard_event_1_on_mask</name>
              <description>GMAC event encourage turn-on sequence, 1: mask hardware event, 0: enable hardware event</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hard_event_2_on_mask</name>
              <description>RFU, 1: mask hardware event, 0: enable hardware event</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hard_event_3_on_mask</name>
              <description>RGPIO0 event encourage turn-on sequence, 1: mask hardware event, 0: enable hardware event</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hard_event_4_on_mask</name>
              <description>RGPIO1 event encourage turn-on sequence, 1: mask hardware event, 0: enable hardware event</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hard_event_5_on_mask</name>
              <description>RGPIO2 event encourage turn-on sequence, 1: mask hardware event, 0: enable hardware event</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hard_event_6_on_mask</name>
              <description>RGPIO3 event encourage turn-on sequence, 1: mask hardware event, 0: enable hardware event</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hard_event_7_on_mask</name>
              <description>GPU event, 1: mask hardware event, 0: enable hardware event</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>soft_turn_on_power_mode</name>
          <description>Software Turn-On Power Mode</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>systop_power_mode</name>
              <description>SYSTOP turn-on power mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>cpu_power_mode</name>
              <description>CPU turn-on power mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpua_power_mode</name>
              <description>GPUA turn-on power mode.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vdec_power_mode</name>
              <description>VDEC turn-on power mode.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout_power_mode</name>
              <description>VOUT turn-on power mode.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>isp_power_mode</name>
              <description>ISP turn-on power mode.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>venc_power_mode</name>
              <description>VENC turn-on power mode.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>soft_turn_off_power_mode</name>
          <description>Software Turn-Off Power Mode</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>systop_power_mode</name>
              <description>SYSTOP turn-off power mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>cpu_power_mode</name>
              <description>CPU turn-off power mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpua_power_mode</name>
              <description>GPUA turn-off power mode.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vdec_power_mode</name>
              <description>VDEC turn-off power mode.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout_power_mode</name>
              <description>VOUT turn-off power mode.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>isp_power_mode</name>
              <description>ISP turn-off power mode.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>venc_power_mode</name>
              <description>VENC turn-off power mode.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>timeout_seq_thd</name>
          <description>Threshold Sequence Timeout</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>timeout_seq_thd</name>
              <description>Threshold Sequence Timeout</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pdc0</name>
          <description>Powerdomain Cascade 0</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pd0_off_cas</name>
              <description>Power domain 0 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd0_on_cas</name>
              <description>Power domain 0 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[9:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd1_off_cas</name>
              <description>Power domain 1 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[14:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd1_on_cas</name>
              <description>Power domain 1 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[19:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd2_off_cas</name>
              <description>Power domain 2 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[24:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd2_on_cas</name>
              <description>Power domain 2 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[29:25]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pdc1</name>
          <description>Powerdomain Cascade 1</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pd3_off_cas</name>
              <description>Power domain 3 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd3_on_cas</name>
              <description>Power domain 3 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[9:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd4_off_cas</name>
              <description>Power domain 4 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[14:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd4_on_cas</name>
              <description>Power domain 4 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[19:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd5_off_cas</name>
              <description>Power domain 5 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[24:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd5_on_cas</name>
              <description>Power domain 5 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[29:25]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pdc2</name>
          <description>Powerdomain Cascade 2</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pd6_off_cas</name>
              <description>Power domain 6 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd6_on_cas</name>
              <description>Power domain 6 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[9:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd7_off_cas</name>
              <description>Power domain 7 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[14:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd7_on_cas</name>
              <description>Power domain 7 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[19:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd8_off_cas</name>
              <description>Power domain 8 turn-off cascade. The register value indicates the power-off sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[24:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pd8_on_cas</name>
              <description>Power domain 8 turn-on cascade. The register value indicates the power-on sequence of this domain. 0 means the highest priority. System only accepts value from 0 to 7, any other value is invalid.</description>
              <bitRange>[29:25]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>sw_encourage</name>
          <description>Software Encouragement</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>sw_encourage</name>
              <description>Software Encouragement</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tim</name>
          <description>TIMER Interrupt Mask</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>seq_done_mask</name>
              <description>Mask the sequence complete event. 0: mask, 1: unmask</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hw_req_mask</name>
              <description>Mask the hardware encouragement request. 0: mask, 1: unmask</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sw_fail_mask</name>
              <description>Mask the software encouragement failure event. 0: mask, 1: unmask</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hw_fail_mask</name>
              <description>Mask the hardware encouragement failure event. 0: mask, 1: unmask</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pch_fail_mask</name>
              <description>Mask the P-channel encouragement failure event. 0: mask, 1: unmask</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pch_bypass</name>
          <description>P-channel Bypass</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pch_bypass</name>
              <description>Bypass P-channel. 0: enable p-channel, 1: bypass p-channel</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pch_pstate</name>
          <description>P-channel PSTATE</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pch_pstate</name>
              <description>P-channel state set</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pch_timeout</name>
          <description>P-channel Timeout Threshold</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pch_timeout</name>
              <description>P-channel waiting device acknowledge timeout.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>lp_timeout</name>
          <description>LP Cell Control Timeout Threshold</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>lp_timeout</name>
              <description>LP Cell Control signal waiting carries acknowledge timeout.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hard_turn_on_power_mode</name>
          <description>Hardware Turn-On Power Mode</description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>systop_power_mode</name>
              <description>SYSTOP turn-on power mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>cpu_power_mode</name>
              <description>CPU turn-on power mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpua_power_mode</name>
              <description>GPUA turn-on power mode.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vdec_power_mode</name>
              <description>VDEC turn-on power mode.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout_power_mode</name>
              <description>VOUT turn-on power mode.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>isp_power_mode</name>
              <description>ISP turn-on power mode.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>venc_power_mode</name>
              <description>VENC turn-on power mode.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>current_power_mode</name>
          <description>Current Power Mode</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>systop_power_mode</name>
              <description>SYSTOP turn-on power mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>cpu_power_mode</name>
              <description>CPU turn-on power mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>gpua_power_mode</name>
              <description>GPUA turn-on power mode.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vdec_power_mode</name>
              <description>VDEC turn-on power mode.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>vout_power_mode</name>
              <description>VOUT turn-on power mode.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>isp_power_mode</name>
              <description>ISP turn-on power mode.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>venc_power_mode</name>
              <description>VENC turn-on power mode.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>current_seq_state</name>
          <description>Current Sequence State</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>power_mode_cur</name>
              <description>Current sequence state.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>event_status</name>
          <description>PMU Event Status</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>seq_done_event</name>
              <description>Sequence complete.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>hw_req_event</name>
              <description>Hardware encouragement request.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sw_fail_event</name>
              <description>Software encouragement failure.</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>hw_fail_event</name>
              <description>Hardware encouragement failure.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pch_fail_event</name>
              <description>P-channel failure.</description>
              <bitRange>[8:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>int_status</name>
          <description>PMU Interrupt Status</description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>seq_done_event</name>
              <description>Sequence complete.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>hw_req_event</name>
              <description>Hardware encouragement request.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sw_fail_event</name>
              <description>Software encouragement failure.</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>hw_fail_event</name>
              <description>Hardware encouragement failure.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pch_fail_event</name>
              <description>P-channel failure.</description>
              <bitRange>[8:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>hw_event_crd</name>
          <description>Hardware Event Record</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>hw_event_crd</name>
              <description>Hardware Event Record.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>encourage_type_crd</name>
          <description>Hardware Event Type Record</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>encourage_type_crd</name>
              <description>Hardware/Software encouragement type record. 0: Software, 1: Hardware.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pch_active</name>
          <description>P-channel PACTIVE Status</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <resetValue>0</resetValue>
          <fields>
            <field>
              <name>pch_active</name>
              <description>P-channel PACTIVE status.</description>
              <bitRange>[10:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_ispcrg_0</name>
      <description>From starfive,jh7110-ispcrg, peripheral generator</description>
      <baseAddress>0x19810000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
    <peripheral>
      <name>starfive_jh7110_voutcrg_0</name>
      <description>From starfive,jh7110-voutcrg, peripheral generator</description>
      <baseAddress>0x295C0000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10000</size>
        <usage>registers</usage>
      </addressBlock>
    </peripheral>
  </peripherals>
</device>