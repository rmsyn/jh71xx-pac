#![doc = "Peripheral access API for STARFIVE VISIONFIVE 2 V1.3B microcontrollers (generated using svd2rust v0.30.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.30.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {}
#[doc(hidden)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 0] = [];
#[doc = "From sifive,clint0, peripheral generator"]
pub struct SIFIVE_CLINT0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_CLINT0_0 {}
impl SIFIVE_CLINT0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_clint0_0::RegisterBlock = 0x0200_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_clint0_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SIFIVE_CLINT0_0 {
    type Target = sifive_clint0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_CLINT0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_CLINT0_0").finish()
    }
}
#[doc = "From sifive,clint0, peripheral generator"]
pub mod sifive_clint0_0;
#[doc = "From sifive,plic0, peripheral generator"]
pub struct SIFIVE_PLIC0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_PLIC0_0 {}
impl SIFIVE_PLIC0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_plic0_0::RegisterBlock = 0x0c00_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_plic0_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SIFIVE_PLIC0_0 {
    type Target = sifive_plic0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_PLIC0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_PLIC0_0").finish()
    }
}
#[doc = "From sifive,plic0, peripheral generator"]
pub mod sifive_plic0_0;
#[doc = "From snps,designware-i2c, peripheral generator"]
pub struct SNPS_DESIGNWARE_I2C_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SNPS_DESIGNWARE_I2C_0 {}
impl SNPS_DESIGNWARE_I2C_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const snps_designware_i2c_0::RegisterBlock = 0x1003_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const snps_designware_i2c_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SNPS_DESIGNWARE_I2C_0 {
    type Target = snps_designware_i2c_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SNPS_DESIGNWARE_I2C_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SNPS_DESIGNWARE_I2C_0").finish()
    }
}
#[doc = "From snps,designware-i2c, peripheral generator"]
pub mod snps_designware_i2c_0;
#[doc = "From snps,designware-i2c, peripheral generator"]
pub struct SNPS_DESIGNWARE_I2C_1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SNPS_DESIGNWARE_I2C_1 {}
impl SNPS_DESIGNWARE_I2C_1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const snps_designware_i2c_1::RegisterBlock = 0x1004_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const snps_designware_i2c_1::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SNPS_DESIGNWARE_I2C_1 {
    type Target = snps_designware_i2c_1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SNPS_DESIGNWARE_I2C_1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SNPS_DESIGNWARE_I2C_1").finish()
    }
}
#[doc = "From snps,designware-i2c, peripheral generator"]
pub mod snps_designware_i2c_1;
#[doc = "From snps,designware-i2c, peripheral generator"]
pub struct SNPS_DESIGNWARE_I2C_2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SNPS_DESIGNWARE_I2C_2 {}
impl SNPS_DESIGNWARE_I2C_2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const snps_designware_i2c_2::RegisterBlock = 0x1005_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const snps_designware_i2c_2::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SNPS_DESIGNWARE_I2C_2 {
    type Target = snps_designware_i2c_2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SNPS_DESIGNWARE_I2C_2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SNPS_DESIGNWARE_I2C_2").finish()
    }
}
#[doc = "From snps,designware-i2c, peripheral generator"]
pub mod snps_designware_i2c_2;
#[doc = "From starfive,jh7110-stgcrg, peripheral generator"]
pub struct STARFIVE_JH7110_STGCRG_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_STGCRG_0 {}
impl STARFIVE_JH7110_STGCRG_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_stgcrg_0::RegisterBlock = 0x1023_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_stgcrg_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_STGCRG_0 {
    type Target = starfive_jh7110_stgcrg_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_STGCRG_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_STGCRG_0").finish()
    }
}
#[doc = "From starfive,jh7110-stgcrg, peripheral generator"]
pub mod starfive_jh7110_stgcrg_0;
#[doc = "From starfive,jh7110-stg-syscon, peripheral generator"]
pub struct STARFIVE_JH7110_STG_SYSCON_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_STG_SYSCON_0 {}
impl STARFIVE_JH7110_STG_SYSCON_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_stg_syscon_0::RegisterBlock = 0x1024_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_stg_syscon_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_STG_SYSCON_0 {
    type Target = starfive_jh7110_stg_syscon_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_STG_SYSCON_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_STG_SYSCON_0").finish()
    }
}
#[doc = "From starfive,jh7110-stg-syscon, peripheral generator"]
pub mod starfive_jh7110_stg_syscon_0;
#[doc = "From snps,designware-i2c, peripheral generator"]
pub struct SNPS_DESIGNWARE_I2C_3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SNPS_DESIGNWARE_I2C_3 {}
impl SNPS_DESIGNWARE_I2C_3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const snps_designware_i2c_3::RegisterBlock = 0x1203_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const snps_designware_i2c_3::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SNPS_DESIGNWARE_I2C_3 {
    type Target = snps_designware_i2c_3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SNPS_DESIGNWARE_I2C_3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SNPS_DESIGNWARE_I2C_3").finish()
    }
}
#[doc = "From snps,designware-i2c, peripheral generator"]
pub mod snps_designware_i2c_3;
#[doc = "From snps,designware-i2c, peripheral generator"]
pub struct SNPS_DESIGNWARE_I2C_4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SNPS_DESIGNWARE_I2C_4 {}
impl SNPS_DESIGNWARE_I2C_4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const snps_designware_i2c_4::RegisterBlock = 0x1204_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const snps_designware_i2c_4::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SNPS_DESIGNWARE_I2C_4 {
    type Target = snps_designware_i2c_4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SNPS_DESIGNWARE_I2C_4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SNPS_DESIGNWARE_I2C_4").finish()
    }
}
#[doc = "From snps,designware-i2c, peripheral generator"]
pub mod snps_designware_i2c_4;
#[doc = "From snps,designware-i2c, peripheral generator"]
pub struct SNPS_DESIGNWARE_I2C_5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SNPS_DESIGNWARE_I2C_5 {}
impl SNPS_DESIGNWARE_I2C_5 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const snps_designware_i2c_5::RegisterBlock = 0x1205_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const snps_designware_i2c_5::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SNPS_DESIGNWARE_I2C_5 {
    type Target = snps_designware_i2c_5::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SNPS_DESIGNWARE_I2C_5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SNPS_DESIGNWARE_I2C_5").finish()
    }
}
#[doc = "From snps,designware-i2c, peripheral generator"]
pub mod snps_designware_i2c_5;
#[doc = "From snps,designware-i2c, peripheral generator"]
pub struct SNPS_DESIGNWARE_I2C_6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SNPS_DESIGNWARE_I2C_6 {}
impl SNPS_DESIGNWARE_I2C_6 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const snps_designware_i2c_6::RegisterBlock = 0x1206_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const snps_designware_i2c_6::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for SNPS_DESIGNWARE_I2C_6 {
    type Target = snps_designware_i2c_6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SNPS_DESIGNWARE_I2C_6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SNPS_DESIGNWARE_I2C_6").finish()
    }
}
#[doc = "From snps,designware-i2c, peripheral generator"]
pub mod snps_designware_i2c_6;
#[doc = "From starfive,jh7110-pwm, peripheral generator"]
pub struct STARFIVE_JH7110_PWM_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_PWM_0 {}
impl STARFIVE_JH7110_PWM_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_pwm_0::RegisterBlock = 0x120d_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_pwm_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_PWM_0 {
    type Target = starfive_jh7110_pwm_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_PWM_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_PWM_0").finish()
    }
}
#[doc = "From starfive,jh7110-pwm, peripheral generator"]
pub mod starfive_jh7110_pwm_0;
#[doc = "From starfive,jh7110-syscrg, peripheral generator"]
pub struct STARFIVE_JH7110_SYSCRG_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_SYSCRG_0 {}
impl STARFIVE_JH7110_SYSCRG_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_syscrg_0::RegisterBlock = 0x1302_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_syscrg_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_SYSCRG_0 {
    type Target = starfive_jh7110_syscrg_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_SYSCRG_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_SYSCRG_0").finish()
    }
}
#[doc = "From starfive,jh7110-syscrg, peripheral generator"]
pub mod starfive_jh7110_syscrg_0;
#[doc = "From starfive,jh7110-sys-syscon, peripheral generator"]
pub struct STARFIVE_JH7110_SYS_SYSCON_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_SYS_SYSCON_0 {}
impl STARFIVE_JH7110_SYS_SYSCON_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_sys_syscon_0::RegisterBlock = 0x1303_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_sys_syscon_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_SYS_SYSCON_0 {
    type Target = starfive_jh7110_sys_syscon_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_SYS_SYSCON_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_SYS_SYSCON_0").finish()
    }
}
#[doc = "From starfive,jh7110-sys-syscon, peripheral generator"]
pub mod starfive_jh7110_sys_syscon_0;
#[doc = "From starfive,jh7110-sys-pinctrl, peripheral generator"]
pub struct STARFIVE_JH7110_SYS_PINCTRL_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_SYS_PINCTRL_0 {}
impl STARFIVE_JH7110_SYS_PINCTRL_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_sys_pinctrl_0::RegisterBlock = 0x1304_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_sys_pinctrl_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_SYS_PINCTRL_0 {
    type Target = starfive_jh7110_sys_pinctrl_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_SYS_PINCTRL_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_SYS_PINCTRL_0").finish()
    }
}
#[doc = "From starfive,jh7110-sys-pinctrl, peripheral generator"]
pub mod starfive_jh7110_sys_pinctrl_0;
#[doc = "From starfive,jh7110-aoncrg, peripheral generator"]
pub struct STARFIVE_JH7110_AONCRG_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_AONCRG_0 {}
impl STARFIVE_JH7110_AONCRG_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_aoncrg_0::RegisterBlock = 0x1700_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_aoncrg_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_AONCRG_0 {
    type Target = starfive_jh7110_aoncrg_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_AONCRG_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_AONCRG_0").finish()
    }
}
#[doc = "From starfive,jh7110-aoncrg, peripheral generator"]
pub mod starfive_jh7110_aoncrg_0;
#[doc = "From starfive,jh7110-aon-syscon, peripheral generator"]
pub struct STARFIVE_JH7110_AON_SYSCON_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_AON_SYSCON_0 {}
impl STARFIVE_JH7110_AON_SYSCON_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_aon_syscon_0::RegisterBlock = 0x1701_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_aon_syscon_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_AON_SYSCON_0 {
    type Target = starfive_jh7110_aon_syscon_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_AON_SYSCON_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_AON_SYSCON_0").finish()
    }
}
#[doc = "From starfive,jh7110-aon-syscon, peripheral generator"]
pub mod starfive_jh7110_aon_syscon_0;
#[doc = "From starfive,jh7110-aon-pinctrl, peripheral generator"]
pub struct STARFIVE_JH7110_AON_PINCTRL_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STARFIVE_JH7110_AON_PINCTRL_0 {}
impl STARFIVE_JH7110_AON_PINCTRL_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const starfive_jh7110_aon_pinctrl_0::RegisterBlock = 0x1702_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const starfive_jh7110_aon_pinctrl_0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for STARFIVE_JH7110_AON_PINCTRL_0 {
    type Target = starfive_jh7110_aon_pinctrl_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STARFIVE_JH7110_AON_PINCTRL_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STARFIVE_JH7110_AON_PINCTRL_0").finish()
    }
}
#[doc = "From starfive,jh7110-aon-pinctrl, peripheral generator"]
pub mod starfive_jh7110_aon_pinctrl_0;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "SIFIVE_CLINT0_0"]
    pub SIFIVE_CLINT0_0: SIFIVE_CLINT0_0,
    #[doc = "SIFIVE_PLIC0_0"]
    pub SIFIVE_PLIC0_0: SIFIVE_PLIC0_0,
    #[doc = "SNPS_DESIGNWARE_I2C_0"]
    pub SNPS_DESIGNWARE_I2C_0: SNPS_DESIGNWARE_I2C_0,
    #[doc = "SNPS_DESIGNWARE_I2C_1"]
    pub SNPS_DESIGNWARE_I2C_1: SNPS_DESIGNWARE_I2C_1,
    #[doc = "SNPS_DESIGNWARE_I2C_2"]
    pub SNPS_DESIGNWARE_I2C_2: SNPS_DESIGNWARE_I2C_2,
    #[doc = "STARFIVE_JH7110_STGCRG_0"]
    pub STARFIVE_JH7110_STGCRG_0: STARFIVE_JH7110_STGCRG_0,
    #[doc = "STARFIVE_JH7110_STG_SYSCON_0"]
    pub STARFIVE_JH7110_STG_SYSCON_0: STARFIVE_JH7110_STG_SYSCON_0,
    #[doc = "SNPS_DESIGNWARE_I2C_3"]
    pub SNPS_DESIGNWARE_I2C_3: SNPS_DESIGNWARE_I2C_3,
    #[doc = "SNPS_DESIGNWARE_I2C_4"]
    pub SNPS_DESIGNWARE_I2C_4: SNPS_DESIGNWARE_I2C_4,
    #[doc = "SNPS_DESIGNWARE_I2C_5"]
    pub SNPS_DESIGNWARE_I2C_5: SNPS_DESIGNWARE_I2C_5,
    #[doc = "SNPS_DESIGNWARE_I2C_6"]
    pub SNPS_DESIGNWARE_I2C_6: SNPS_DESIGNWARE_I2C_6,
    #[doc = "STARFIVE_JH7110_PWM_0"]
    pub STARFIVE_JH7110_PWM_0: STARFIVE_JH7110_PWM_0,
    #[doc = "STARFIVE_JH7110_SYSCRG_0"]
    pub STARFIVE_JH7110_SYSCRG_0: STARFIVE_JH7110_SYSCRG_0,
    #[doc = "STARFIVE_JH7110_SYS_SYSCON_0"]
    pub STARFIVE_JH7110_SYS_SYSCON_0: STARFIVE_JH7110_SYS_SYSCON_0,
    #[doc = "STARFIVE_JH7110_SYS_PINCTRL_0"]
    pub STARFIVE_JH7110_SYS_PINCTRL_0: STARFIVE_JH7110_SYS_PINCTRL_0,
    #[doc = "STARFIVE_JH7110_AONCRG_0"]
    pub STARFIVE_JH7110_AONCRG_0: STARFIVE_JH7110_AONCRG_0,
    #[doc = "STARFIVE_JH7110_AON_SYSCON_0"]
    pub STARFIVE_JH7110_AON_SYSCON_0: STARFIVE_JH7110_AON_SYSCON_0,
    #[doc = "STARFIVE_JH7110_AON_PINCTRL_0"]
    pub STARFIVE_JH7110_AON_PINCTRL_0: STARFIVE_JH7110_AON_PINCTRL_0,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            SIFIVE_CLINT0_0: SIFIVE_CLINT0_0 {
                _marker: PhantomData,
            },
            SIFIVE_PLIC0_0: SIFIVE_PLIC0_0 {
                _marker: PhantomData,
            },
            SNPS_DESIGNWARE_I2C_0: SNPS_DESIGNWARE_I2C_0 {
                _marker: PhantomData,
            },
            SNPS_DESIGNWARE_I2C_1: SNPS_DESIGNWARE_I2C_1 {
                _marker: PhantomData,
            },
            SNPS_DESIGNWARE_I2C_2: SNPS_DESIGNWARE_I2C_2 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_STGCRG_0: STARFIVE_JH7110_STGCRG_0 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_STG_SYSCON_0: STARFIVE_JH7110_STG_SYSCON_0 {
                _marker: PhantomData,
            },
            SNPS_DESIGNWARE_I2C_3: SNPS_DESIGNWARE_I2C_3 {
                _marker: PhantomData,
            },
            SNPS_DESIGNWARE_I2C_4: SNPS_DESIGNWARE_I2C_4 {
                _marker: PhantomData,
            },
            SNPS_DESIGNWARE_I2C_5: SNPS_DESIGNWARE_I2C_5 {
                _marker: PhantomData,
            },
            SNPS_DESIGNWARE_I2C_6: SNPS_DESIGNWARE_I2C_6 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_PWM_0: STARFIVE_JH7110_PWM_0 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_SYSCRG_0: STARFIVE_JH7110_SYSCRG_0 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_SYS_SYSCON_0: STARFIVE_JH7110_SYS_SYSCON_0 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_SYS_PINCTRL_0: STARFIVE_JH7110_SYS_PINCTRL_0 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_AONCRG_0: STARFIVE_JH7110_AONCRG_0 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_AON_SYSCON_0: STARFIVE_JH7110_AON_SYSCON_0 {
                _marker: PhantomData,
            },
            STARFIVE_JH7110_AON_PINCTRL_0: STARFIVE_JH7110_AON_PINCTRL_0 {
                _marker: PhantomData,
            },
        }
    }
}
